{
  "extension": "_mysql.sql",
  "transform_attribute": [
    {
      "search": " ",
      "replace": "_"
    },
    {
      "search": "\\.",
      "replace": ""
    }
  ],
  "compose_label_disambiguated_by_number": "{label}_{disambiguation_number}",
  "transform_title": [
    {
      "search": " ",
      "replace": "_"
    },
    {
      "search": "\\.",
      "replace": ""
    }
  ],
  "transform_relation_name": [
    {
      "search": " ",
      "replace": "_"
    },
    {
      "search": "\\.",
      "replace": ""
    }
  ],
  "compose_primary_key": "`{label_lowercase}` {data_type},\nADD_PRIMARY `{label_lowercase}`",
  "compose_normal_attribute": "`{label_lowercase}` {data_type}",
  "compose_foreign_key": "`{label_lowercase}` {data_type},\n  ALTER TABLE `{this_relation_name_uppercase}` ADD FOREIGN KEY (`{label_lowercase}`) REFERENCES `{primary_relation_name_uppercase}` (`{raw_label_lowercase}`);",
  "compose_foreign_primary_key": "`{label_lowercase}` {data_type},\nADD_PRIMARY `{label_lowercase}`,\n  ALTER TABLE `{this_relation_name_uppercase}` ADD FOREIGN KEY (`{label_lowercase}`) REFERENCES `{primary_relation_name_uppercase}` (`{raw_label_lowercase}`);",
  "column_separator": ",\n  ",
  "compose_relation": "CREATE TABLE `{this_relation_name_uppercase}` (\n  {columns},\n  PRIMARY KEY()\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;",
  "transform_single_column_relation": [
    {
      "search": "(?s)(.+)",
      "replace": "/*\n\\1\n*/"
    }
  ],
  "transform_relation": [
    {
      "search": "(?sm)ADD_PRIMARY ([^\n]+)\n(.+?PRIMARY KEY[^\n]+?)\\)",
      "replace": "\\2\\1 )",
      "iterated": true
    },
    {
      "search": ", \\)",
      "replace": ")"
    }
  ],
  "relation_separator": "\n\n",
  "compose_relational_schema": "CREATE DATABASE IF NOT EXISTS `{title_uppercase}` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\nUSE `{title_uppercase}`;\n\n{relations}",
  "transform_relational_schema": [
    {
      "search": "(?s)(.+)",
      "replace": "\\1\n\n"
    },
    {
      "search": "(?sm)^  (ALTER TABLE [^\n]+),\n(.+)",
      "replace": "\\2\\1\n",
      "iterated": true
    },
    {
      "search": "\n+$",
      "replace": ""
    }
  ]
}