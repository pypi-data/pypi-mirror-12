# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_shm', [dirname(__file__)])
        except ImportError:
            import _shm
            return _shm
        if fp is not None:
            try:
                _mod = imp.load_module('_shm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _shm = swig_import_helper()
    del swig_import_helper
else:
    import _shm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def shm_get(*args):
  return _shm.shm_get(*args)
shm_get = _shm.shm_get

def get_mode(*args):
  return _shm.get_mode(*args)
get_mode = _shm.get_mode

def set_mode(*args):
  return _shm.set_mode(*args)
set_mode = _shm.set_mode

def get_count(*args):
  return _shm.get_count(*args)
get_count = _shm.get_count

def set_count(*args):
  return _shm.set_count(*args)
set_count = _shm.set_count

def get_clockTimeStampSec(*args):
  return _shm.get_clockTimeStampSec(*args)
get_clockTimeStampSec = _shm.get_clockTimeStampSec

def set_clockTimeStampSec(*args):
  return _shm.set_clockTimeStampSec(*args)
set_clockTimeStampSec = _shm.set_clockTimeStampSec

def get_clockTimeStampUSec(*args):
  return _shm.get_clockTimeStampUSec(*args)
get_clockTimeStampUSec = _shm.get_clockTimeStampUSec

def set_clockTimeStampUSec(*args):
  return _shm.set_clockTimeStampUSec(*args)
set_clockTimeStampUSec = _shm.set_clockTimeStampUSec

def get_clockTimeStampNSec(*args):
  return _shm.get_clockTimeStampNSec(*args)
get_clockTimeStampNSec = _shm.get_clockTimeStampNSec

def set_clockTimeStampNSec(*args):
  return _shm.set_clockTimeStampNSec(*args)
set_clockTimeStampNSec = _shm.set_clockTimeStampNSec

def get_receiveTimeStampSec(*args):
  return _shm.get_receiveTimeStampSec(*args)
get_receiveTimeStampSec = _shm.get_receiveTimeStampSec

def set_receiveTimeStampSec(*args):
  return _shm.set_receiveTimeStampSec(*args)
set_receiveTimeStampSec = _shm.set_receiveTimeStampSec

def get_receiveTimeStampUSec(*args):
  return _shm.get_receiveTimeStampUSec(*args)
get_receiveTimeStampUSec = _shm.get_receiveTimeStampUSec

def set_receiveTimeStampUSec(*args):
  return _shm.set_receiveTimeStampUSec(*args)
set_receiveTimeStampUSec = _shm.set_receiveTimeStampUSec

def get_receiveTimeStampNSec(*args):
  return _shm.get_receiveTimeStampNSec(*args)
get_receiveTimeStampNSec = _shm.get_receiveTimeStampNSec

def set_receiveTimeStampNSec(*args):
  return _shm.set_receiveTimeStampNSec(*args)
set_receiveTimeStampNSec = _shm.set_receiveTimeStampNSec

def get_leap(*args):
  return _shm.get_leap(*args)
get_leap = _shm.get_leap

def set_leap(*args):
  return _shm.set_leap(*args)
set_leap = _shm.set_leap

def get_precision(*args):
  return _shm.get_precision(*args)
get_precision = _shm.get_precision

def set_precision(*args):
  return _shm.set_precision(*args)
set_precision = _shm.set_precision

def get_nsamples(*args):
  return _shm.get_nsamples(*args)
get_nsamples = _shm.get_nsamples

def set_nsamples(*args):
  return _shm.set_nsamples(*args)
set_nsamples = _shm.set_nsamples

def get_valid(*args):
  return _shm.get_valid(*args)
get_valid = _shm.get_valid

def set_valid(*args):
  return _shm.set_valid(*args)
set_valid = _shm.set_valid


