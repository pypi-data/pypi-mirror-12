{"version":3,"sources":["store.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA,UAAA;IAAA;;EAAA,CAAA,GAAI;;EAGE;IAES,iBAAC,EAAD,EAAK,KAAL;;;;MACX,IAAC,CAAA,EAAD,GAAM,CAAA,CAAE,EAAF;MACN,IAAC,CAAA,KAAD,GAAS;MACN,IAAC,CAAA,KAAJ,CAAA;IAHW;;sBAKb,KAAA,GAAO,SAAA;AACL,UAAA;MAAA,IAAO,4DAAP;AACE,eADF;;MAGA,IAAG,IAAC,CAAA,KAAD,IAAU,YAAb;QACK,IAAC,CAAA,WAAJ,CAAA,EADF;;MAIA,CAAA,CAAE,MAAF,CAAS,CAAC,EAAV,CAAa,SAAb,EAAwB,IAAC,CAAA,WAAzB;MAEA,IAAC,CAAA,EAAE,CAAC,EAAJ,CAAO,6BAAP,EAAsC,CAAA,SAAA,KAAA;eAAA,SAAA;UAEpC,CAAA,CAAE,MAAF,CAAS,CAAC,GAAV,CAAc,SAAd,EAAyB,KAAC,CAAA,WAA1B;UAEG,KAAC,CAAA,aAAJ,CAAA;UAEA,CAAA,CAAE,MAAF,CAAS,CAAC,EAAV,CAAa,SAAb,EAAwB,KAAC,CAAA,WAAzB;QANoC;MAAA,CAAA,CAAA,CAAA,IAAA,CAAtC;MAYA,KAAA,GAAQ,IAAC,CAAA,EAAE,CAAC,OAAJ,CAAY,MAAZ;aACR,KAAK,CAAC,EAAN,CAAS,QAAT,EAAmB,IAAC,CAAA,YAApB;IAvBK;;sBAyBP,aAAA,GAAe,SAAA;AACb,UAAA;MAAA,KAAA,GAAW,IAAC,CAAA,EAAE,CAAC,GAAP,CAAA;AAER;QAEE,YAAa,CAAA,IAAC,CAAA,KAAD,CAAb,GAAuB,MAFzB;OAAA,aAAA;QAGM;QAED,YAAY,CAAC,KAAhB,CAAA,EALF;;IAHa;;sBAYf,WAAA,GAAa,SAAA;MACX,IAAC,CAAA,EAAE,CAAC,GAAJ,CAAQ,YAAa,CAAA,IAAC,CAAA,KAAD,CAArB;IADW;;sBAIb,YAAA,GAAc,SAAA;MAEZ,OAAO,YAAa,CAAA,IAAC,CAAA,KAAD;IAFR;;;;;;EAMhB,CAAC,CAAC,EAAE,CAAC,MAAL,CACE;IAAA,KAAA,EAAO,SAAC,KAAD;aACL,IAAC,CAAA,IAAD,CAAM,SAAA;QACJ,IAAG,CAAI,CAAA,CAAE,IAAF,CAAI,CAAC,IAAL,CAAU,cAAV,CAAP;iBACE,CAAA,CAAE,IAAF,CAAI,CAAC,IAAL,CAAU,cAAV,EAA8B,IAAA,OAAA,CAAQ,IAAR,EAAW,KAAX,CAA9B,EADF;;MADI,CAAN;IADK,CAAP;GADF;;EAMA,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAX,GAAqB;AA/DrB","file":"store.js","sourceRoot":"/source/","sourcesContent":["$ = jQuery\n\n\nclass Storage\n\n  constructor: (el, lsKey) ->\n    @el = $(el)\n    @lsKey = lsKey\n    do @setUp\n\n  setUp: ->\n    if not localStorage?\n      return\n\n    if @lsKey of localStorage\n      do @updateField\n\n    # localStorage on change\n    $(window).on 'storage', @updateField\n\n    @el.on 'input change propertychange', =>\n      # storage gets triggered in the current tab/window in some browsers\n      $(window).off 'storage', @updateField\n\n      do @updateStorage\n\n      $(window).on 'storage', @updateField\n      return\n\n    # This gets called for every el,\n    # even if they belong to the same form,\n    # it's ok though.\n    $form = @el.closest \"form\"\n    $form.on 'submit', @clearStorage\n\n  updateStorage: =>\n    value = do @el.val\n\n    try\n      # May trigger storage\n      localStorage[@lsKey] = value\n    catch err\n      # The localStorage is probably full, nothing to do other than clear it\n      do localStorage.clear\n\n    return\n\n  updateField: =>\n    @el.val localStorage[@lsKey]\n    return\n\n  clearStorage: =>\n    # Triggers storage\n    delete localStorage[@lsKey]\n    return\n\n\n$.fn.extend\n  store: (lsKey) ->\n    @each ->\n      if not $(@).data 'plugin_store'\n        $(@).data 'plugin_store', new Storage(@, lsKey)\n\n$.fn.store.Storage = Storage"]}