[options]
; Comma-separated list of MQTT topic filters to subscribe to, e.g.
;subscriptions = licht/+/+, schalter/+/+, +/xy/+
subscriptions = #
osc_port = 9001
; OSC reveiver host[:port], supports UDP multicast too
osc_receiver =
; MQTT broker host[:port]
mqtt_broker = localhost:1883
verbose = false

; Defaults for conversion rules sections below
[DEFAULT]
; plain string or regular expression matching MQTT topic or OSC address
; In example below, everything after optional slash prefix is group 1
match = ^/?(.*)

; OSC address, a plain string or a re.sub substitution string
; for the matched MQTT topic regular expression
; Default value below adds slash prefix to MQTT topic,
; if there wasn't one already
address = /\1

; MQTT topic, a plain string or a re.sub substitution string
; for the matched OSC address regular expression
; Default value below removes slash prefix from OSC address
topic = \1

; MQTT payload encoding type.
; One of: array, json, string, struct
type = struct
; MQTT payload encoding format.
;
; When type = struct, must be a struct.unpack() format string, e.g.:
# format = B ; one unsigned byte
# format = <ffhh ; two floats and two shorts (two-bytes), little-endian
;
; When type = array, must be an array element type char, e.g.
# format = d ; double
;
; When type = json or string, must be the string encoding (default: utf-8)
# format = ascii
format = B

; Comma-separated list of conversion functions to apply to values decoded
; from the MQTT message payload.
; Available functions (available abbreviations in parentheses):
;     int (i), float(f), bool(b), str(s)
; Any other function name or empty string will leave the value as is.
; Leaving this option empty also applies no conversion to all values.
; Example:
# from_mqtt = int, float, , int
from_mqtt =

; Comma-separated list of conversion functions to apply to arguments decoded
; from the OSC message. Same format as the from_mqtt option.
from_osc =

; List of OSC type tags as a string with no separator,
; This is only necessary if the internal Python type representation
; of the values can not be converted into OSC types automatically.
; See the conversion table in the pyliblo documentation for details
osctags =

; Conversion rules sections
; section names MUST start with a colon ":"
; Conversion rules are matched in the order defined here, so put likely
; matches first for better performance
[:light]
match = ^/?(licht/.*)
from_mqtt = float
from_osc = int

[:schalter]
match = ^/?(schalter/.*)
osctags = T

[:xypad]
match = ^/?(\d+)/xy/?(\d+)
topic = \1/xy/\2
address = /\1/xy\2
format = >ff
