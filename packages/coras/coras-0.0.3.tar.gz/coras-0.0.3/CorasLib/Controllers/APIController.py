"""
   CorasLib.Controllers.APIController

   This file was automatically generated by APIMATIC BETA v2.0 on 10/21/2015
"""
import unirest

from CorasLib.APIHelper import APIHelper
from CorasLib.Configuration import Configuration
from CorasLib.APIException import APIException
from CorasLib.Models.AllocationRequestSerializer import AllocationRequestSerializer
from CorasLib.Models.AllocationRequestSerializer import AllocationRequestSerializer
from CorasLib.Models.AddressSerializer import AddressSerializer
from CorasLib.Models.AddressSerializer import AddressSerializer
from CorasLib.Models.AddressSerializer import AddressSerializer
from CorasLib.Models.AddressSerializer import AddressSerializer
from CorasLib.Models.DeviceSerializer import DeviceSerializer
from CorasLib.Models.DeviceSerializer import DeviceSerializer
from CorasLib.Models.DeviceSerializer import DeviceSerializer
from CorasLib.Models.DeviceSerializer import DeviceSerializer
from CorasLib.Models.NotificationConfigSerializer import NotificationConfigSerializer
from CorasLib.Models.NotificationConfigSerializer import NotificationConfigSerializer
from CorasLib.Models.NotificationConfigSerializer import NotificationConfigSerializer
from CorasLib.Models.NotificationConfigSerializer import NotificationConfigSerializer
from CorasLib.Models.EventSerializer import EventSerializer
from CorasLib.Models.EventSerializer import EventSerializer
from CorasLib.Models.DeviceSerializer import DeviceSerializer
from CorasLib.Models.DeviceSerializer import DeviceSerializer
from CorasLib.Models.PriceSerializer import PriceSerializer
from CorasLib.Models.PriceSerializer import PriceSerializer
from CorasLib.Models.AllocationSerializer import AllocationSerializer
from CorasLib.Models.AllocationSerializer import AllocationSerializer
from CorasLib.Models.AllocationSerializer import AllocationSerializer
from CorasLib.Models.AllocationSerializer import AllocationSerializer
from CorasLib.Models.PriceChartSerializer import PriceChartSerializer
from CorasLib.Models.PriceChartSerializer import PriceChartSerializer
from CorasLib.Models.VenueConfigurationSerializer import VenueConfigurationSerializer
from CorasLib.Models.VenueConfigurationSerializer import VenueConfigurationSerializer
from CorasLib.Models.VenueConfigurationSerializer import VenueConfigurationSerializer
from CorasLib.Models.VenueConfigurationSerializer import VenueConfigurationSerializer
from CorasLib.Models.NotificationConfigSerializer import NotificationConfigSerializer
from CorasLib.Models.NotificationConfigSerializer import NotificationConfigSerializer
from CorasLib.Models.VenueConfigurationSerializer import VenueConfigurationSerializer
from CorasLib.Models.VenueConfigurationSerializer import VenueConfigurationSerializer
from CorasLib.Models.PriceSerializer import PriceSerializer
from CorasLib.Models.PriceSerializer import PriceSerializer
from CorasLib.Models.PriceSerializer import PriceSerializer
from CorasLib.Models.PriceSerializer import PriceSerializer
from CorasLib.Models.AllocationRequestSerializer import AllocationRequestSerializer
from CorasLib.Models.AllocationRequestSerializer import AllocationRequestSerializer
from CorasLib.Models.AllocationRequestSerializer import AllocationRequestSerializer
from CorasLib.Models.AllocationRequestSerializer import AllocationRequestSerializer
from CorasLib.Models.VenueSerializer import VenueSerializer
from CorasLib.Models.VenueSerializer import VenueSerializer
from CorasLib.Models.VenueSerializer import VenueSerializer
from CorasLib.Models.VenueSerializer import VenueSerializer
from CorasLib.Models.PriceChartSerializer import PriceChartSerializer
from CorasLib.Models.PriceChartSerializer import PriceChartSerializer
from CorasLib.Models.PriceChartSerializer import PriceChartSerializer
from CorasLib.Models.PriceChartSerializer import PriceChartSerializer
from CorasLib.Models.EventSerializer import EventSerializer
from CorasLib.Models.EventSerializer import EventSerializer
from CorasLib.Models.EventSerializer import EventSerializer
from CorasLib.Models.EventSerializer import EventSerializer
from CorasLib.Models.EventSerializer import EventSerializer
from CorasLib.Models.AllocationSerializer import AllocationSerializer
from CorasLib.Models.AllocationSerializer import AllocationSerializer
from CorasLib.Models.EventSerializer import EventSerializer
from CorasLib.Models.AllocationSnapshotSerializer import AllocationSnapshotSerializer
from CorasLib.Models.SectionSerializer import SectionSerializer
from CorasLib.Models.SectionSerializer import SectionSerializer
from CorasLib.Models.VenueSerializer import VenueSerializer
from CorasLib.Models.VenueSerializer import VenueSerializer
from CorasLib.Models.SectionSerializer import SectionSerializer
from CorasLib.Models.SectionSerializer import SectionSerializer
from CorasLib.Models.SectionSerializer import SectionSerializer
from CorasLib.Models.SectionSerializer import SectionSerializer
from CorasLib.Models.AddressSerializer import AddressSerializer
from CorasLib.Models.AddressSerializer import AddressSerializer
from CorasLib.Models.AllocationSnapshotSerializer import AllocationSnapshotSerializer


class APIController(object):


    """A Controller to access Endpoints in the CorasLib API."""

    def __init__(self,
                 authorization):
        """
        Constructor with authentication and configuration parameters
        """
        self.__authorization = authorization

    def get_allocation_request_list(self):
        """Does a GET request to /api/allocationrequests/.

        Represents allocation requests.  <br/>Return a list of allocation
        requests.

        Returns:
            list of AllocationRequestSerializer: Response from the API.
                Returns list of the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocationrequests/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(AllocationRequestSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def create_allocation_request_create(self,
                                         recipient=None,
                                         to=None):
        """Does a POST request to /api/allocationrequests/.

        Represents allocation requests.

        Args:
            recipient (string, optional): TODO: type description here.
            to (string, optional): TODO: type description here.

        Returns:
            AllocationRequestSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocationrequests/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "_recipient": recipient,
            "_to": to
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationRequestSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_address_retrieve(self,
                             pk):
        """Does a GET request to /api/addresses/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            AddressSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/addresses/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AddressSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def address_update(self,
                       pk,
                       address_1=None,
                       address_2=None,
                       address_3=None,
                       city=None,
                       postcode=None,
                       state=None):
        """Does a PUT request to /api/addresses/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.
            address_1 (string, optional): TODO: type description here.
            address_2 (string, optional): TODO: type description here.
            address_3 (string, optional): TODO: type description here.
            city (string, optional): TODO: type description here.
            postcode (string, optional): TODO: type description here.
            state (string, optional): TODO: type description here.

        Returns:
            AddressSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/addresses/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "address1": address_1,
            "address2": address_2,
            "address3": address_3,
            "city": city,
            "postcode": postcode,
            "state": state
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AddressSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_address_destroy(self,
                               pk):
        """Does a DELETE request to /api/addresses/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            AddressSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/addresses/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AddressSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_address_partial_update(self,
                                      pk,
                                      address_1=None,
                                      address_2=None,
                                      address_3=None,
                                      city=None,
                                      postcode=None,
                                      state=None):
        """Does a PATCH request to /api/addresses/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.
            address_1 (string, optional): TODO: type description here.
            address_2 (string, optional): TODO: type description here.
            address_3 (string, optional): TODO: type description here.
            city (string, optional): TODO: type description here.
            postcode (string, optional): TODO: type description here.
            state (string, optional): TODO: type description here.

        Returns:
            AddressSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/addresses/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "address1": address_1,
            "address2": address_2,
            "address3": address_3,
            "city": city,
            "postcode": postcode,
            "state": state
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AddressSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_device_retrieve(self,
                            pk):
        """Does a GET request to /api/devices/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            DeviceSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/devices/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return DeviceSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_device_update(self,
                             device_id,
                             pk,
                             device_model=None):
        """Does a PUT request to /api/devices/{pk}/.

        TODO: type endpoint description here.

        Args:
            device_id (string): TODO: type description here.
            pk (string): TODO: type description here.
            device_model (string, optional): TODO: type description here.

        Returns:
            DeviceSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/devices/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "device_id": device_id,
            "device_model": device_model
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return DeviceSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_device_destroy(self,
                              pk):
        """Does a DELETE request to /api/devices/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            DeviceSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/devices/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return DeviceSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_device_partial_update(self,
                                     pk,
                                     device_id=None,
                                     device_model=None):
        """Does a PATCH request to /api/devices/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.
            device_id (string, optional): TODO: type description here.
            device_model (string, optional): TODO: type description here.

        Returns:
            DeviceSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/devices/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "device_id": device_id,
            "device_model": device_model
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return DeviceSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_notification_config_retrieve(self,
                                         pk):
        """Does a GET request to /api/notificationconfigs/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            NotificationConfigSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/notificationconfigs/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return NotificationConfigSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_notification_config_update(self,
                                          channel,
                                          pk,
                                          notification=None):
        """Does a PUT request to /api/notificationconfigs/{pk}/.

        TODO: type endpoint description here.

        Args:
            channel (string): TODO: type description here.
            pk (string): TODO: type description here.
            notification (int, optional): TODO: type description here.

        Returns:
            NotificationConfigSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/notificationconfigs/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "channel": channel,
            "notification": notification
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return NotificationConfigSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_notification_config_destroy(self,
                                           pk):
        """Does a DELETE request to /api/notificationconfigs/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            NotificationConfigSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/notificationconfigs/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return NotificationConfigSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_notification_config_partial_update(self,
                                                  pk,
                                                  channel=None,
                                                  notification=None):
        """Does a PATCH request to /api/notificationconfigs/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.
            channel (string, optional): TODO: type description here.
            notification (int, optional): TODO: type description here.

        Returns:
            NotificationConfigSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/notificationconfigs/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "channel": channel,
            "notification": notification
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return NotificationConfigSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_event_list(self):
        """Does a GET request to /api/events/.

        Events Views

        Returns:
            list of EventSerializer: Response from the API. Returns list of
                the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/events/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(EventSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def create_event_create(self,
                            general_onsale,
                            name,
                            start,
                            venue,
                            announce=None,
                            configuration=None,
                            doors=None,
                            end=None,
                            price_chart=None,
                            restriction=None):
        """Does a POST request to /api/events/.

        Events Views

        Args:
            general_onsale (DateTime): TODO: type description here.
            name (string): TODO: type description here.
            start (DateTime): TODO: type description here.
            venue (string): TODO: type description here.
            announce (DateTime, optional): TODO: type description here.
            configuration (string, optional): TODO: type description here.
            doors (DateTime, optional): TODO: type description here.
            end (DateTime, optional): TODO: type description here.
            price_chart (string, optional): TODO: type description here.
            restriction (string, optional): TODO: type description here.

        Returns:
            EventSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/events/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "general_onsale": general_onsale,
            "name": name,
            "start": start,
            "venue": venue,
            "announce": announce,
            "configuration": configuration,
            "doors": doors,
            "end": end,
            "price_chart": price_chart,
            "restriction": restriction
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return EventSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_device_list(self):
        """Does a GET request to /api/devices/.

        TODO: type endpoint description here.

        Returns:
            list of DeviceSerializer: Response from the API. Returns list of
                the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/devices/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(DeviceSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def create_device_create(self,
                             device_id,
                             device_model=None):
        """Does a POST request to /api/devices/.

        TODO: type endpoint description here.

        Args:
            device_id (string): TODO: type description here.
            device_model (string, optional): TODO: type description here.

        Returns:
            DeviceSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/devices/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "device_id": device_id,
            "device_model": device_model
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return DeviceSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_price_list(self):
        """Does a GET request to /api/prices/.

        TODO: type endpoint description here.

        Returns:
            list of PriceSerializer: Response from the API. Returns list of
                the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/prices/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(PriceSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def create_price_create(self,
                            value,
                            category=None):
        """Does a POST request to /api/prices/.

        TODO: type endpoint description here.

        Args:
            value (string): TODO: type description here.
            category (int, optional): TODO: type description here.

        Returns:
            PriceSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/prices/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "value": value,
            "category": category
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return PriceSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_allocation_retrieve(self,
                                event,
                                pk,
                                recipient,
                                since):
        """Does a GET request to /api/allocations/{pk}/.

        Represents an allocation of tickets.
        Could be tickets that are being marked back from one organisation to
        another.

        Args:
            event (string): TODO: type description here.
            pk (string): TODO: type description here.
            recipient (string): TODO: type description here.
            since (string): TODO: type description here.

        Returns:
            AllocationSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "event": event,
            "recipient": recipient,
            "since": since
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_allocation_update(self,
                                 event,
                                 items,
                                 pk,
                                 since,
                                 item_types=None,
                                 notify_recipient=None,
                                 recipient=None,
                                 state=None):
        """Does a PUT request to /api/allocations/{pk}/.

        Represents an allocation of tickets.
        Could be tickets that are being marked back from one organisation to
        another.

        Args:
            event (string): TODO: type description here.
            items (string): TODO: type description here.
            pk (string): TODO: type description here.
            since (string): TODO: type description here.
            item_types (int, optional): TODO: type description here.
            notify_recipient (bool, optional): TODO: type description here.
            recipient (string, optional): TODO: type description here.
            state (int, optional): TODO: type description here.

        Returns:
            AllocationSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "since": since
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "event": event,
            "items": items,
            "item_types": item_types,
            "notify_recipient": notify_recipient,
            "recipient": recipient,
            "state": state
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_allocation_destroy(self,
                                  event,
                                  pk,
                                  recipient,
                                  since):
        """Does a DELETE request to /api/allocations/{pk}/.

        Represents an allocation of tickets.
        Could be tickets that are being marked back from one organisation to
        another.

        Args:
            event (string): TODO: type description here.
            pk (string): TODO: type description here.
            recipient (string): TODO: type description here.
            since (string): TODO: type description here.

        Returns:
            AllocationSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "event": event,
            "recipient": recipient,
            "since": since
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_allocation_partial_update(self,
                                         pk,
                                         event=None,
                                         item_types=None,
                                         items=None,
                                         notify_recipient=None,
                                         recipient=None,
                                         since=None,
                                         state=None):
        """Does a PATCH request to /api/allocations/{pk}/.

        Represents an allocation of tickets.
        Could be tickets that are being marked back from one organisation to
        another.

        Args:
            pk (string): TODO: type description here.
            event (string, optional): TODO: type description here.
            item_types (int, optional): TODO: type description here.
            items (string, optional): TODO: type description here.
            notify_recipient (bool, optional): TODO: type description here.
            recipient (string, optional): TODO: type description here.
            since (string, optional): TODO: type description here.
            state (int, optional): TODO: type description here.

        Returns:
            AllocationSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "since": since
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "event": event,
            "item_types": item_types,
            "items": items,
            "notify_recipient": notify_recipient,
            "recipient": recipient,
            "state": state
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_price_chart_list(self):
        """Does a GET request to /api/pricecharts/.

        TODO: type endpoint description here.

        Returns:
            list of PriceChartSerializer: Response from the API. Returns list
                of the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/pricecharts/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(PriceChartSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def create_price_chart_create(self,
                                  currency,
                                  name,
                                  prices):
        """Does a POST request to /api/pricecharts/.

        TODO: type endpoint description here.

        Args:
            currency (string): TODO: type description here.
            name (string): TODO: type description here.
            prices (list of mixed): TODO: type description here.

        Returns:
            PriceChartSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/pricecharts/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "currency": currency,
            "name": name,
            "prices": prices
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return PriceChartSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_venue_configuration_retrieve(self,
                                         pk):
        """Does a GET request to /api/venueconfigurations/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            VenueConfigurationSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venueconfigurations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VenueConfigurationSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_venue_configuration_update(self,
                                          name,
                                          pk,
                                          sections,
                                          venue):
        """Does a PUT request to /api/venueconfigurations/{pk}/.

        TODO: type endpoint description here.

        Args:
            name (string): TODO: type description here.
            pk (string): TODO: type description here.
            sections (string): TODO: type description here.
            venue (string): TODO: type description here.

        Returns:
            VenueConfigurationSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venueconfigurations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "name": name,
            "sections": sections,
            "venue": venue
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VenueConfigurationSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_venue_configuration_destroy(self,
                                           pk):
        """Does a DELETE request to /api/venueconfigurations/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            VenueConfigurationSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venueconfigurations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VenueConfigurationSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_venue_configuration_partial_update(self,
                                                  pk,
                                                  name=None,
                                                  sections=None,
                                                  venue=None):
        """Does a PATCH request to /api/venueconfigurations/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.
            name (string, optional): TODO: type description here.
            sections (string, optional): TODO: type description here.
            venue (string, optional): TODO: type description here.

        Returns:
            VenueConfigurationSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venueconfigurations/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "name": name,
            "sections": sections,
            "venue": venue
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VenueConfigurationSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_notification_config_list(self):
        """Does a GET request to /api/notificationconfigs/.

        TODO: type endpoint description here.

        Returns:
            list of NotificationConfigSerializer: Response from the API.
                Returns list of the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/notificationconfigs/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(NotificationConfigSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def create_notification_config_create(self,
                                          channel,
                                          notification=None):
        """Does a POST request to /api/notificationconfigs/.

        TODO: type endpoint description here.

        Args:
            channel (string): TODO: type description here.
            notification (int, optional): TODO: type description here.

        Returns:
            NotificationConfigSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/notificationconfigs/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "channel": channel,
            "notification": notification
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return NotificationConfigSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_venue_configuration_list(self):
        """Does a GET request to /api/venueconfigurations/.

        TODO: type endpoint description here.

        Returns:
            list of VenueConfigurationSerializer: Response from the API.
                Returns list of the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venueconfigurations/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(VenueConfigurationSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def create_venue_configuration_create(self,
                                          name,
                                          sections,
                                          venue):
        """Does a POST request to /api/venueconfigurations/.

        TODO: type endpoint description here.

        Args:
            name (string): TODO: type description here.
            sections (string): TODO: type description here.
            venue (string): TODO: type description here.

        Returns:
            VenueConfigurationSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venueconfigurations/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "name": name,
            "sections": sections,
            "venue": venue
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VenueConfigurationSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_price_retrieve(self,
                           pk):
        """Does a GET request to /api/prices/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            PriceSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/prices/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return PriceSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_price_update(self,
                            pk,
                            value,
                            category=None):
        """Does a PUT request to /api/prices/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.
            value (string): TODO: type description here.
            category (int, optional): TODO: type description here.

        Returns:
            PriceSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/prices/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "value": value,
            "category": category
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return PriceSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_price_destroy(self,
                             pk):
        """Does a DELETE request to /api/prices/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            PriceSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/prices/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return PriceSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_price_partial_update(self,
                                    pk,
                                    category=None,
                                    value=None):
        """Does a PATCH request to /api/prices/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.
            category (int, optional): TODO: type description here.
            value (string, optional): TODO: type description here.

        Returns:
            PriceSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/prices/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "category": category,
            "value": value
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return PriceSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_allocation_request_retrieve(self,
                                        pk):
        """Does a GET request to /api/allocationrequests/{pk}/.

        Represents allocation requests.

        Args:
            pk (string): TODO: type description here.

        Returns:
            AllocationRequestSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocationrequests/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationRequestSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_allocation_request_update(self,
                                         pk,
                                         recipient=None,
                                         to=None):
        """Does a PUT request to /api/allocationrequests/{pk}/.

        Represents allocation requests.

        Args:
            pk (string): TODO: type description here.
            recipient (string, optional): TODO: type description here.
            to (string, optional): TODO: type description here.

        Returns:
            AllocationRequestSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocationrequests/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "_recipient": recipient,
            "_to": to
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationRequestSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_allocation_request_destroy(self,
                                          pk):
        """Does a DELETE request to /api/allocationrequests/{pk}/.

        Represents allocation requests.

        Args:
            pk (string): TODO: type description here.

        Returns:
            AllocationRequestSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocationrequests/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationRequestSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_allocation_request_partial_update(self,
                                                 pk,
                                                 recipient=None,
                                                 to=None):
        """Does a PATCH request to /api/allocationrequests/{pk}/.

        Represents allocation requests.

        Args:
            pk (string): TODO: type description here.
            recipient (string, optional): TODO: type description here.
            to (string, optional): TODO: type description here.

        Returns:
            AllocationRequestSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocationrequests/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "_recipient": recipient,
            "_to": to
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationRequestSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_venue_retrieve(self,
                           pk):
        """Does a GET request to /api/venues/{pk}/.

        Venues View

        Args:
            pk (string): TODO: type description here.

        Returns:
            VenueSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venues/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VenueSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_venue_update(self,
                            configurations,
                            name,
                            pk):
        """Does a PUT request to /api/venues/{pk}/.

        Venues View

        Args:
            configurations (string): TODO: type description here.
            name (string): TODO: type description here.
            pk (string): TODO: type description here.

        Returns:
            VenueSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venues/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "configurations": configurations,
            "name": name
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VenueSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_venue_destroy(self,
                             pk):
        """Does a DELETE request to /api/venues/{pk}/.

        Venues View

        Args:
            pk (string): TODO: type description here.

        Returns:
            VenueSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venues/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VenueSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_venue_partial_update(self,
                                    pk,
                                    configurations=None,
                                    name=None):
        """Does a PATCH request to /api/venues/{pk}/.

        Venues View

        Args:
            pk (string): TODO: type description here.
            configurations (string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.

        Returns:
            VenueSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venues/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "configurations": configurations,
            "name": name
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VenueSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_price_chart_retrieve(self,
                                 pk):
        """Does a GET request to /api/pricecharts/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            PriceChartSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/pricecharts/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return PriceChartSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_price_chart_update(self,
                                  currency,
                                  name,
                                  pk,
                                  prices):
        """Does a PUT request to /api/pricecharts/{pk}/.

        TODO: type endpoint description here.

        Args:
            currency (string): TODO: type description here.
            name (string): TODO: type description here.
            pk (string): TODO: type description here.
            prices (string): TODO: type description here.

        Returns:
            PriceChartSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/pricecharts/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "currency": currency,
            "name": name,
            "prices": prices
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return PriceChartSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_price_chart_destroy(self,
                                   pk):
        """Does a DELETE request to /api/pricecharts/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            PriceChartSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/pricecharts/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return PriceChartSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_price_chart_partial_update(self,
                                          pk,
                                          currency=None,
                                          name=None,
                                          prices=None):
        """Does a PATCH request to /api/pricecharts/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.
            currency (string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            prices (string, optional): TODO: type description here.

        Returns:
            PriceChartSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/pricecharts/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "currency": currency,
            "name": name,
            "prices": prices
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return PriceChartSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_event_snapshot(self,
                           pk):
        """Does a GET request to /api/events/{pk}/snapshot/.

        Events Views  <br/>Event snapshot detail

        Args:
            pk (string): TODO: type description here.

        Returns:
            EventSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/events/{pk}/snapshot/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return EventSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_event_retrieve(self,
                           pk):
        """Does a GET request to /api/events/{pk}/.

        Events Views

        Args:
            pk (string): TODO: type description here.

        Returns:
            EventSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/events/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return EventSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_event_update(self,
                            general_onsale,
                            name,
                            pk,
                            start,
                            venue,
                            announce=None,
                            configuration=None,
                            doors=None,
                            end=None,
                            price_chart=None,
                            restriction=None):
        """Does a PUT request to /api/events/{pk}/.

        Events Views

        Args:
            general_onsale (DateTime): TODO: type description here.
            name (string): TODO: type description here.
            pk (string): TODO: type description here.
            start (DateTime): TODO: type description here.
            venue (string): TODO: type description here.
            announce (DateTime, optional): TODO: type description here.
            configuration (string, optional): TODO: type description here.
            doors (DateTime, optional): TODO: type description here.
            end (DateTime, optional): TODO: type description here.
            price_chart (string, optional): TODO: type description here.
            restriction (string, optional): TODO: type description here.

        Returns:
            EventSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/events/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "general_onsale": general_onsale,
            "name": name,
            "start": start,
            "venue": venue,
            "announce": announce,
            "configuration": configuration,
            "doors": doors,
            "end": end,
            "price_chart": price_chart,
            "restriction": restriction
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return EventSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_event_destroy(self,
                             pk):
        """Does a DELETE request to /api/events/{pk}/.

        Events Views

        Args:
            pk (string): TODO: type description here.

        Returns:
            EventSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/events/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return EventSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_event_partial_update(self,
                                    pk,
                                    announce=None,
                                    configuration=None,
                                    doors=None,
                                    end=None,
                                    general_onsale=None,
                                    name=None,
                                    price_chart=None,
                                    restriction=None,
                                    start=None,
                                    venue=None):
        """Does a PATCH request to /api/events/{pk}/.

        Events Views

        Args:
            pk (string): TODO: type description here.
            announce (DateTime, optional): TODO: type description here.
            configuration (string, optional): TODO: type description here.
            doors (DateTime, optional): TODO: type description here.
            end (DateTime, optional): TODO: type description here.
            general_onsale (DateTime, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            price_chart (string, optional): TODO: type description here.
            restriction (string, optional): TODO: type description here.
            start (DateTime, optional): TODO: type description here.
            venue (string, optional): TODO: type description here.

        Returns:
            EventSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/events/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "announce": announce,
            "configuration": configuration,
            "doors": doors,
            "end": end,
            "general_onsale": general_onsale,
            "name": name,
            "price_chart": price_chart,
            "restriction": restriction,
            "start": start,
            "venue": venue
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return EventSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_allocation_list(self,
                            event,
                            recipient,
                            since):
        """Does a GET request to /api/allocations/.

        Represents an allocation of tickets.
        Could be tickets that are being marked back from one organisation to
        another.

        Args:
            event (string): TODO: type description here.
            recipient (string): TODO: type description here.
            since (string): TODO: type description here.

        Returns:
            list of AllocationSerializer: Response from the API. Returns list
                of the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocations/"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "event": event,
            "recipient": recipient,
            "since": since
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(AllocationSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def create_allocation_create(self,
                                 event,
                                 items,
                                 since,
                                 item_types=None,
                                 notify_recipient=None,
                                 recipient=None,
                                 state=None):
        """Does a POST request to /api/allocations/.

        Represents an allocation of tickets.
        Could be tickets that are being marked back from one organisation to
        another.

        Args:
            event (string): TODO: type description here.
            items (list of mixed): TODO: type description here.
            since (string): TODO: type description here.
            item_types (int, optional): TODO: type description here.
            notify_recipient (bool, optional): TODO: type description here.
            recipient (string, optional): TODO: type description here.
            state (int, optional): TODO: type description here.

        Returns:
            AllocationSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocations/"

        # Process optional query parameters
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, {
            "since": since
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "event": event,
            "items": items,
            "item_types": item_types,
            "notify_recipient": notify_recipient,
            "recipient": recipient,
            "state": state
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_event_allocation_history(self,
                                     pk):
        """Does a GET request to /api/events/{pk}/allocation-history/.

        Events Views  <br/>Event allocation history detail

        Args:
            pk (string): TODO: type description here.

        Returns:
            EventSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/events/{pk}/allocation-history/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return EventSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_allocation_snapshot_retrieve(self,
                                         pk):
        """Does a GET request to /api/allocationsnapshots/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            AllocationSnapshotSerializer: Response from the API. No response
                was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocationsnapshots/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AllocationSnapshotSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_section_list(self):
        """Does a GET request to /api/sections/.

        TODO: type endpoint description here.

        Returns:
            list of SectionSerializer: Response from the API. Returns list of
                the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/sections/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(SectionSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def create_section_create(self,
                              capacity,
                              configuration,
                              name,
                              is_ga=None):
        """Does a POST request to /api/sections/.

        TODO: type endpoint description here.

        Args:
            capacity (int): TODO: type description here.
            configuration (string): TODO: type description here.
            name (string): TODO: type description here.
            is_ga (bool, optional): TODO: type description here.

        Returns:
            SectionSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/sections/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "capacity": capacity,
            "configuration": configuration,
            "name": name,
            "is_ga": is_ga
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return SectionSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_venue_list(self):
        """Does a GET request to /api/venues/.

        Venues View  <br/>Return a list of venues.

        Returns:
            list of VenueSerializer: Response from the API. Returns list of
                the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venues/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(VenueSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def create_venue_create(self,
                            configurations,
                            name):
        """Does a POST request to /api/venues/.

        Venues View

        Args:
            configurations (string): TODO: type description here.
            name (string): TODO: type description here.

        Returns:
            VenueSerializer: Response from the API. No response was specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/venues/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "configurations": configurations,
            "name": name
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return VenueSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_section_retrieve(self,
                             pk):
        """Does a GET request to /api/sections/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            SectionSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/sections/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return SectionSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_section_update(self,
                              capacity,
                              configuration,
                              name,
                              pk,
                              is_ga=None):
        """Does a PUT request to /api/sections/{pk}/.

        TODO: type endpoint description here.

        Args:
            capacity (int): TODO: type description here.
            configuration (string): TODO: type description here.
            name (string): TODO: type description here.
            pk (string): TODO: type description here.
            is_ga (bool, optional): TODO: type description here.

        Returns:
            SectionSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/sections/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "capacity": capacity,
            "configuration": configuration,
            "name": name,
            "is_ga": is_ga
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.put(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return SectionSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def delete_section_destroy(self,
                               pk):
        """Does a DELETE request to /api/sections/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.

        Returns:
            SectionSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/sections/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.delete(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return SectionSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def update_section_partial_update(self,
                                      pk,
                                      capacity=None,
                                      configuration=None,
                                      is_ga=None,
                                      name=None):
        """Does a PATCH request to /api/sections/{pk}/.

        TODO: type endpoint description here.

        Args:
            pk (string): TODO: type description here.
            capacity (int, optional): TODO: type description here.
            configuration (string, optional): TODO: type description here.
            is_ga (bool, optional): TODO: type description here.
            name (string, optional): TODO: type description here.

        Returns:
            SectionSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/sections/{pk}/"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "pk": pk
        })

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "capacity": capacity,
            "configuration": configuration,
            "is_ga": is_ga,
            "name": name
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.patch(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return SectionSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_address_list(self):
        """Does a GET request to /api/addresses/.

        TODO: type endpoint description here.

        Returns:
            list of AddressSerializer: Response from the API. Returns list of
                the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/addresses/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(AddressSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def address_create(self,
                       address_1=None,
                       address_2=None,
                       address_3=None,
                       city=None,
                       postcode=None,
                       state=None):
        """Does a POST request to /api/addresses/.

        TODO: type endpoint description here.

        Args:
            address_1 (string, optional): TODO: type description here.
            address_2 (string, optional): TODO: type description here.
            address_3 (string, optional): TODO: type description here.
            city (string, optional): TODO: type description here.
            postcode (string, optional): TODO: type description here.
            state (string, optional): TODO: type description here.

        Returns:
            AddressSerializer: Response from the API. No response was
                specified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/addresses/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare parameters
        parameters = {
            "address1": address_1,
            "address2": address_2,
            "address3": address_3,
            "city": city,
            "postcode": postcode,
            "state": state
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.post(query_url, headers=headers, params=parameters)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            return AddressSerializer(**response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 

    def get_allocation_snapshot_list(self):
        """Does a GET request to /api/allocationsnapshots/.

        TODO: type endpoint description here.

        Returns:
            list of AllocationSnapshotSerializer: Response from the API.
                Returns list of the items

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/api/allocationsnapshots/"

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "Authorization": self.__authorization,
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json"
        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        #try to cast response to list of desired type
        if isinstance(response.body, list):
            # Response is already in a list, return the list of objects 
            value = list()
            for item in response.body:
                value.append(AllocationSnapshotSerializer(**item))

            return value
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body) 
