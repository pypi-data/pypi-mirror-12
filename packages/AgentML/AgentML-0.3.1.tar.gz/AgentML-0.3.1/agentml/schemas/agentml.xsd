<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
    <!-- Software Agent Markup Language, v0.2a1 -->
    <xs:element name="agentml">
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:group ref="triggerGroup"/>
                <xs:element ref="emotions"/>
                <xs:element ref="identity"/>
                <xs:element ref="init"/>
            </xs:choice>
            <xs:attribute name="version" use="required" type="xs:float"/>
        </xs:complexType>
    </xs:element>
    <xs:group name="anyElement">
        <xs:sequence>
            <xs:any minOccurs="0" maxOccurs="unbounded" processContents="skip"/>
        </xs:sequence>
    </xs:group>
    <!-- [Group] Trigger -->
    <!--
        A trigger group can be initialized by either a <trigger> element directly,
        or grouped into <topic> and/or <emotion> elements for convenience.
        
        Triggers grouped into <topic> / <emotion> tags will automatically have the
        specified topic / emotion applied to all the contained triggers.
    -->
    <xs:group name="triggerGroup">
        <xs:sequence>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="trigger"/>
                <xs:element name="group">
                    <xs:complexType>
                        <xs:group ref="triggerGroup"/>
                        <xs:attribute name="name" use="required"/>
                    </xs:complexType>
                </xs:element>
                <xs:element name="emotion">
                    <xs:complexType>
                        <xs:group ref="triggerGroup"/>
                        <xs:attribute name="name" use="required"/>
                    </xs:complexType>
                </xs:element>
                <xs:element name="topic">
                    <xs:complexType>
                        <xs:group ref="triggerGroup"/>
                        <xs:attribute name="name" use="required"/>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
        </xs:sequence>
    </xs:group>
    <!-- [Element] Trigger -->
    <xs:element name="trigger">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:group ref="trigger.group"/>
                <xs:group ref="trigger.topic"/>
                <xs:group ref="trigger.emotion"/>
                <xs:element ref="blocking"/>
                <xs:element ref="pattern"/>
                <xs:choice>
                    <xs:element ref="condition"/>
                    <xs:element ref="response"/>
                    <xs:element ref="template"/>
                    <xs:group ref="trigger.response.redirect.shorthand"/>
                </xs:choice>
                <xs:element ref="limit"/>
                <xs:element ref="chance"/>
            </xs:choice>
            <xs:attribute name="priority" type="xs:integer"/>
        </xs:complexType>
    </xs:element>
    <!-- [Attributes] Trigger -->
    <xs:group name="trigger.group">
        <xs:sequence>
            <xs:element name="group" type="xs:string"/>
        </xs:sequence>
    </xs:group>
    <xs:group name="trigger.topic">
        <xs:sequence>
            <xs:element name="topic" type="xs:string"/>
        </xs:sequence>
    </xs:group>
    <xs:group name="trigger.emotion">
        <xs:sequence>
            <xs:element name="emotion" type="xs:string"/>
        </xs:sequence>
    </xs:group>
    <xs:element name="blocking" type="xs:boolean"/>
    <xs:element name="pattern">
        <xs:complexType mixed="true">
            <xs:attribute name="regex" type="xs:boolean"/>
            <xs:attribute name="normalize" type="xs:boolean"/>
            <xs:attribute name="substitute" type="xs:boolean"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="response">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:choice>
                    <xs:group ref="trigger.response.redirect"/>
                    <xs:element name="template">
                        <xs:complexType mixed="true">
                            <xs:group minOccurs="0" maxOccurs="unbounded" ref="anyElement"/>
                        </xs:complexType>
                    </xs:element>
                </xs:choice>
                <xs:group ref="trigger.topic"/>
                <xs:group ref="trigger.emotion"/>
                <xs:element ref="limit"/>
                <xs:element ref="chance"/>
                <xs:group ref="trigger.var"/>
            </xs:choice>
            <xs:attribute name="priority" type="xs:integer"/>
            <xs:attribute name="weight" type="xs:integer"/>
        </xs:complexType>
    </xs:element>
    <xs:group name="trigger.response.redirect">
        <xs:sequence>
            <xs:element name="redirect">
                <xs:complexType mixed="true">
                    <xs:group minOccurs="0" maxOccurs="unbounded" ref="anyElement"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:group>
    <xs:element name="template">
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="anyElement"/>
            <xs:attribute name="priority" type="xs:integer"/>
            <xs:attribute name="weight" type="xs:integer"/>
        </xs:complexType>
    </xs:element>
    <xs:group name="trigger.response.redirect.shorthand">
        <xs:sequence>
            <xs:element name="redirect">
                <xs:complexType mixed="true">
                    <xs:group minOccurs="0" maxOccurs="unbounded" ref="anyElement"/>
                    <xs:attribute name="priority" type="xs:integer"/>
                    <xs:attribute name="weight" type="xs:integer"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:group>
    <xs:element name="condition">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="if"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="elif"/>
                <xs:element minOccurs="0" ref="else"/>
            </xs:sequence>
            <xs:attribute name="type"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="if">
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="response"/>
                <xs:element ref="template"/>
            </xs:choice>
            <xs:attribute name="name"/>
            <xs:attribute name="type"/>
            <xs:attributeGroup ref="trigger.response.condition.operators"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="elif">
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="response"/>
                <xs:element ref="template"/>
            </xs:choice>
            <xs:attribute name="name"/>
            <xs:attribute name="type"/>
            <xs:attributeGroup ref="trigger.response.condition.operators"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="else">
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="response"/>
                <xs:element ref="template"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <xs:attributeGroup name="trigger.response.condition.operators">
        <xs:attribute name="is"/>
        <xs:attribute name="is_not"/>
        <xs:attribute name="gt">
            <xs:simpleType>
                <xs:union memberTypes="xs:integer xs:float"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="gte">
            <xs:simpleType>
                <xs:union memberTypes="xs:integer xs:float"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="lt">
            <xs:simpleType>
                <xs:union memberTypes="xs:integer xs:float"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="lte">
            <xs:simpleType>
                <xs:union memberTypes="xs:integer xs:float"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:element name="limit">
        <xs:complexType>
            <xs:simpleContent>
                <xs:restriction base="xs:anyType">
                    <xs:simpleType>
                        <xs:union memberTypes="xs:integer xs:float"/>
                    </xs:simpleType>
                    <xs:attribute name="unit">
                        <xs:simpleType>
                            <xs:restriction base="xs:token">
                                <xs:enumeration value="seconds"/>
                                <xs:enumeration value="minutes"/>
                                <xs:enumeration value="hours"/>
                                <xs:enumeration value="days"/>
                                <xs:enumeration value="weeks"/>
                                <xs:enumeration value="months"/>
                                <xs:enumeration value="years"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="type">
                        <xs:simpleType>
                            <xs:restriction base="xs:token">
                                <xs:enumeration value="global"/>
                                <xs:enumeration value="user"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="blocking" type="xs:boolean"/>
                </xs:restriction>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="chance">
        <xs:complexType>
            <xs:simpleContent>
                <xs:restriction base="xs:anyType">
                    <xs:simpleType>
                        <xs:union memberTypes="xs:integer xs:float"/>
                    </xs:simpleType>
                    <xs:attribute name="blocking" type="xs:boolean"/>
                </xs:restriction>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>
    <xs:group name="trigger.var">
        <xs:sequence>
            <xs:element name="var">
                <xs:complexType mixed="true">
                    <xs:choice>
                        <xs:group ref="trigger.var.attributeFormat"/>
                        <xs:group ref="trigger.var.elementFormat"/>
                    </xs:choice>
                    <xs:attribute name="type">
                        <xs:simpleType>
                            <xs:restriction base="xs:token">
                                <xs:enumeration value="user"/>
                                <xs:enumeration value="global"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="name"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:group>
    <xs:group name="trigger.var.attributeFormat">
        <xs:sequence>
            <xs:group minOccurs="0" ref="anyElement"/>
        </xs:sequence>
    </xs:group>
    <xs:attributeGroup name="trigger.var.attributeFormat">
        <xs:attribute name="name" use="required"/>
    </xs:attributeGroup>
    <xs:group name="trigger.var.elementFormat">
        <xs:sequence>
            <xs:element name="name">
                <xs:complexType mixed="true">
                    <xs:group minOccurs="0" ref="anyElement"/>
                </xs:complexType>
            </xs:element>
            <xs:element ref="value"/>
        </xs:sequence>
    </xs:group>
    <xs:element name="value">
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" ref="anyElement"/>
        </xs:complexType>
    </xs:element>
    <!-- [Group] Emotions -->
    <!--
        Emotions are defined once in a single <emotions> element. Any subsequent use of this
        element will overwrite the previous definition.
        
        Emotions are defined on three levels: primary, secondary and tertiary emotions.
    -->
    <xs:element name="emotions">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="primary"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!-- [Elements] Emotions -->
    <xs:element name="primary">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="secondary"/>
            </xs:sequence>
            <xs:attribute name="name" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="secondary">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="tertiary"/>
            </xs:sequence>
            <xs:attribute name="name" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="tertiary">
        <xs:complexType>
            <xs:attribute name="name" use="required"/>
        </xs:complexType>
    </xs:element>
    <!-- [Group] Identity -->
    <!--
        This element contains miscellaneous information about the Software Agent's identity,
        such as the name, nicknames, age (epoch) and gender.
    -->
    <xs:element name="identity">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:group ref="identity.name"/>
                <xs:element ref="nickname"/>
                <xs:element ref="gender"/>
                <xs:element ref="epoch"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <!-- [Elements] Identity -->
    <xs:group name="identity.name">
        <xs:sequence>
            <xs:element name="name" type="xs:string"/>
        </xs:sequence>
    </xs:group>
    <xs:element name="nickname" type="xs:string"/>
    <xs:element name="gender">
        <xs:simpleType>
            <xs:restriction base="xs:token">
                <xs:enumeration value="male"/>
                <xs:enumeration value="female"/>
                <xs:enumeration value="neutral"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    <xs:element name="epoch" type="xs:integer"/>
    <!-- [Group] Init -->
    <!--
        Contains tasks to be executed once on startup, such as pre-defining
        global variables and substitutions.
    -->
    <xs:element name="init">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:group ref="init.var"/>
                <xs:element ref="substitutions"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <!-- [Elements] Init -->
    <xs:group name="init.var">
        <xs:sequence>
            <xs:element name="var" type="xs:string"/>
        </xs:sequence>
    </xs:group>
    <xs:element name="substitutions">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="sub"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="sub">
        <xs:complexType mixed="true">
            <xs:attribute name="word" use="required"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
