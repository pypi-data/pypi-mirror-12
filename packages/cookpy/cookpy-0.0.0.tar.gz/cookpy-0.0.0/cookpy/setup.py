# -*- coding: utf-8 -*-

import argparse
import atexit
import io
import os
import sys

from . import arguments, utils, main, ninja, paths


def init():
    # Argument parsing.
    arguments.parser = argparse.ArgumentParser(
        add_help=False, formatter_class=arguments.Formatter,
        usage='%(prog)s [actions] [options]')
    parser = arguments.parser
    parser.add_argument('actions', nargs='*', default=['build'],
                        help='commands to be executed (default: build)')
    parser.add_argument('-h', '--help', action='store_true',
                        help='show this help message and exit')
    parser.add_argument('-j', '--jobs', type=int, default=0, metavar='INT',
                        help='number of jobs to run (default: max)')
    parser.add_argument('-o', '--output', default=None, metavar='DIR',
                        help='override default build directory')

    known = parser.parse_known_args()[0]
    if known.help:
        utils.disable_stdout()
    arguments.jobs = known.jobs
    arguments.actions = known.actions

    for action in arguments.actions:
        if action not in ['clean', 'install', 'test', 'run', 'build']:
            raise ValueError

    build_dir = known.output or os.path.join(
        os.path.dirname(sys.argv[0]), 'build')

    paths._old_main = sys.modules['__main__'].__file__
    old_path = os.path.abspath(paths._old_main)

    utils.make_tree(build_dir)
    os.chdir(build_dir)

    paths._replacement = os.path.relpath(old_path)

    del known, build_dir

    # Ninja stuff.
    ninja.io = io.StringIO()
    ninja.io.write('\n'.join([
        '# This file was automatically generated by CookPy and should only be',
        '# used for debugging purposes. Rerun cook.py if you want to rebuild.',
        '',
        'builddir = intermediate/',
        '',
        'rule from',
        '  command = $with',
        '  description = $as',
        ''
    ]))

    atexit.register(main.at_exit)
