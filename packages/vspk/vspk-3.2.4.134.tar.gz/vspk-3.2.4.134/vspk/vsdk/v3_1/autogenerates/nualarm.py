# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



from bambou import NURESTObject


class NUAlarm(NURESTObject):
    """ Represents a Alarm in the VSD

        Notes:
            The alarm API allows the management of system alarms.

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUAlarm instead.
    """

    __rest_name__ = u"alarm"
    __resource_name__ = u"alarms"

    def __init__(self, **kwargs):
        """ Initializes a Alarm instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> alarm = NUAlarm(id=u'xxxx-xxx-xxx-xxx', name=u'Alarm')
                >>> alarm = NUAlarm(data=my_dict)
        """

        super(NUAlarm, self).__init__()

        # Read/Write Attributes
        
        self._acknowledged = None
        self._description = None
        self._enterprise_id = None
        self._error_condition = None
        self._name = None
        self._number_of_occurances = None
        self._reason = None
        self._severity = None
        self._target_object = None
        self._timestamp = None
        
        self.expose_attribute(local_name=u"acknowledged", remote_name=u"acknowledged", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"error_condition", remote_name=u"errorCondition", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"number_of_occurances", remote_name=u"numberOfOccurances", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"reason", remote_name=u"reason", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"severity", remote_name=u"severity", attribute_type=str, is_required=False, is_unique=False, choices=[u'CRITICAL', u'INFO', u'MAJOR', u'MINOR', u'WARNING'])
        self.expose_attribute(local_name=u"target_object", remote_name=u"targetObject", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"timestamp", remote_name=u"timestamp", attribute_type=long, is_required=False, is_unique=False)
        
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_acknowledged(self):
        """ Get acknowledged value.

            Notes:
                Flag to indicate that alarm is already acknowledged or not

                
        """
        return self._acknowledged

    def _set_acknowledged(self, value):
        """ Set acknowledged value.

            Notes:
                Flag to indicate that alarm is already acknowledged or not

                
        """
        self._acknowledged = value

    acknowledged = property(_get_acknowledged, _set_acknowledged)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Description of the alarm

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Description of the alarm

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_enterprise_id(self):
        """ Get enterprise_id value.

            Notes:
                Enterprise that this alarm belongs to

                
                This attribute is named `enterpriseID` in VSD API.
                
        """
        return self._enterprise_id

    def _set_enterprise_id(self, value):
        """ Set enterprise_id value.

            Notes:
                Enterprise that this alarm belongs to

                
                This attribute is named `enterpriseID` in VSD API.
                
        """
        self._enterprise_id = value

    enterprise_id = property(_get_enterprise_id, _set_enterprise_id)
    
    def _get_error_condition(self):
        """ Get error_condition value.

            Notes:
                Identifies the error condition

                
                This attribute is named `errorCondition` in VSD API.
                
        """
        return self._error_condition

    def _set_error_condition(self, value):
        """ Set error_condition value.

            Notes:
                Identifies the error condition

                
                This attribute is named `errorCondition` in VSD API.
                
        """
        self._error_condition = value

    error_condition = property(_get_error_condition, _set_error_condition)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                The alarm name.  Each type of alarm will generate its own name

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                The alarm name.  Each type of alarm will generate its own name

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_number_of_occurances(self):
        """ Get number_of_occurances value.

            Notes:
                Number of times that the alarm was triggered

                
                This attribute is named `numberOfOccurances` in VSD API.
                
        """
        return self._number_of_occurances

    def _set_number_of_occurances(self, value):
        """ Set number_of_occurances value.

            Notes:
                Number of times that the alarm was triggered

                
                This attribute is named `numberOfOccurances` in VSD API.
                
        """
        self._number_of_occurances = value

    number_of_occurances = property(_get_number_of_occurances, _set_number_of_occurances)
    
    def _get_reason(self):
        """ Get reason value.

            Notes:
                Provides a description of the alarm

                
        """
        return self._reason

    def _set_reason(self, value):
        """ Set reason value.

            Notes:
                Provides a description of the alarm

                
        """
        self._reason = value

    reason = property(_get_reason, _set_reason)
    
    def _get_severity(self):
        """ Get severity value.

            Notes:
                Severity of the alarm.  Possible values are MAJOR, MINOR, CRITICAL, INFO, WARNING, .

                
        """
        return self._severity

    def _set_severity(self, value):
        """ Set severity value.

            Notes:
                Severity of the alarm.  Possible values are MAJOR, MINOR, CRITICAL, INFO, WARNING, .

                
        """
        self._severity = value

    severity = property(_get_severity, _set_severity)
    
    def _get_target_object(self):
        """ Get target_object value.

            Notes:
                Identifies affected Entity.  Example: Alarm generated by TCA for Domain domain1(Packets towards a VM, Breach)

                
                This attribute is named `targetObject` in VSD API.
                
        """
        return self._target_object

    def _set_target_object(self, value):
        """ Set target_object value.

            Notes:
                Identifies affected Entity.  Example: Alarm generated by TCA for Domain domain1(Packets towards a VM, Breach)

                
                This attribute is named `targetObject` in VSD API.
                
        """
        self._target_object = value

    target_object = property(_get_target_object, _set_target_object)
    
    def _get_timestamp(self):
        """ Get timestamp value.

            Notes:
                Indicates the time that the alarm was triggered

                
        """
        return self._timestamp

    def _set_timestamp(self, value):
        """ Set timestamp value.

            Notes:
                Indicates the time that the alarm was triggered

                
        """
        self._timestamp = value

    timestamp = property(_get_timestamp, _set_timestamp)
    