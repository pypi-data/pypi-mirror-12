# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



from bambou import NURESTObject


class NUMonitoringPort(NURESTObject):
    """ Represents a MonitoringPort in the VSD

        Notes:
            Encapsulates the port information for system monitor entity.

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUMonitoringPort instead.
    """

    __rest_name__ = u"monitoringport"
    __resource_name__ = u"monitoringports"

    def __init__(self, **kwargs):
        """ Initializes a MonitoringPort instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> monitoringport = NUMonitoringPort(id=u'xxxx-xxx-xxx-xxx', name=u'MonitoringPort')
                >>> monitoringport = NUMonitoringPort(data=my_dict)
        """

        super(NUMonitoringPort, self).__init__()

        # Read/Write Attributes
        
        self._access = None
        self._description = None
        self._last_state_change = None
        self._name = None
        self._resiliency_state = None
        self._resilient = None
        self._state = None
        self._uplink = None
        
        self.expose_attribute(local_name=u"access", remote_name=u"access", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"last_state_change", remote_name=u"lastStateChange", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"resiliency_state", remote_name=u"resiliencyState", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"resilient", remote_name=u"resilient", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"state", remote_name=u"state", attribute_type=str, is_required=False, is_unique=False, choices=[u'ADMIN_DOWN', u'DOWN', u'UP'])
        self.expose_attribute(local_name=u"uplink", remote_name=u"uplink", attribute_type=bool, is_required=False, is_unique=False)
        
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_access(self):
        """ Get access value.

            Notes:
                Flag to indicate that it is a access port or network port.

                
        """
        return self._access

    def _set_access(self, value):
        """ Set access value.

            Notes:
                Flag to indicate that it is a access port or network port.

                
        """
        self._access = value

    access = property(_get_access, _set_access)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Optional port description.

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Optional port description.

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_last_state_change(self):
        """ Get last_state_change value.

            Notes:
                Last port state change timestamp.

                
                This attribute is named `lastStateChange` in VSD API.
                
        """
        return self._last_state_change

    def _set_last_state_change(self, value):
        """ Set last_state_change value.

            Notes:
                Last port state change timestamp.

                
                This attribute is named `lastStateChange` in VSD API.
                
        """
        self._last_state_change = value

    last_state_change = property(_get_last_state_change, _set_last_state_change)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Name for the port.

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Name for the port.

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_resiliency_state(self):
        """ Get resiliency_state value.

            Notes:
                

                
                This attribute is named `resiliencyState` in VSD API.
                
        """
        return self._resiliency_state

    def _set_resiliency_state(self, value):
        """ Set resiliency_state value.

            Notes:
                

                
                This attribute is named `resiliencyState` in VSD API.
                
        """
        self._resiliency_state = value

    resiliency_state = property(_get_resiliency_state, _set_resiliency_state)
    
    def _get_resilient(self):
        """ Get resilient value.

            Notes:
                Flag to indicate if an ACCESS port is resilient or not.

                
        """
        return self._resilient

    def _set_resilient(self, value):
        """ Set resilient value.

            Notes:
                Flag to indicate if an ACCESS port is resilient or not.

                
        """
        self._resilient = value

    resilient = property(_get_resilient, _set_resilient)
    
    def _get_state(self):
        """ Get state value.

            Notes:
                The current state of the port. Possible values are UP, DOWN, ADMIN_DOWN, .

                
        """
        return self._state

    def _set_state(self, value):
        """ Set state value.

            Notes:
                The current state of the port. Possible values are UP, DOWN, ADMIN_DOWN, .

                
        """
        self._state = value

    state = property(_get_state, _set_state)
    
    def _get_uplink(self):
        """ Get uplink value.

            Notes:
                Flag to indicate that is an uplink or downlink port.

                
        """
        return self._uplink

    def _set_uplink(self, value):
        """ Set uplink value.

            Notes:
                Flag to indicate that is an uplink or downlink port.

                
        """
        self._uplink = value

    uplink = property(_get_uplink, _set_uplink)
    