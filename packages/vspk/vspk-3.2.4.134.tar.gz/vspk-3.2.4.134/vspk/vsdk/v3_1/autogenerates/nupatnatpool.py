# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUEnterprisePermissionsFetcher
from ..fetchers import NUNATMapEntriesFetcher

from bambou import NURESTObject


class NUPATNATPool(NURESTObject):
    """ Represents a PATNATPool in the VSD

        Notes:
            Represents PAT NAT Pool object.

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUPATNATPool instead.
    """

    __rest_name__ = u"patnatpool"
    __resource_name__ = u"patnatpools"

    def __init__(self, **kwargs):
        """ Initializes a PATNATPool instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> patnatpool = NUPATNATPool(id=u'xxxx-xxx-xxx-xxx', name=u'PATNATPool')
                >>> patnatpool = NUPATNATPool(data=my_dict)
        """

        super(NUPATNATPool, self).__init__()

        # Read/Write Attributes
        
        self._address_range = None
        self._associated_gateway_id = None
        self._associated_gateway_type = None
        self._default_patip = None
        self._description = None
        self._name = None
        self._permitted_action = None
        
        self.expose_attribute(local_name=u"address_range", remote_name=u"addressRange", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"associated_gateway_id", remote_name=u"associatedGatewayId", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"associated_gateway_type", remote_name=u"associatedGatewayType", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"default_patip", remote_name=u"defaultPATIP", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"permitted_action", remote_name=u"permittedAction", attribute_type=str, is_required=False, is_unique=False, choices=[u'ALL', u'DEPLOY', u'EXTEND', u'INSTANTIATE', u'READ', u'USE'])
        
        # Fetchers
        
        self.enterprise_permissions = NUEnterprisePermissionsFetcher.fetcher_with_object(parent_object=self)
        
        self.nat_map_entries = NUNATMapEntriesFetcher.fetcher_with_object(parent_object=self)
        
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_address_range(self):
        """ Get address_range value.

            Notes:
                Pool of IP Address that is available for use ex : 130.12.0.0/16

                
                This attribute is named `addressRange` in VSD API.
                
        """
        return self._address_range

    def _set_address_range(self, value):
        """ Set address_range value.

            Notes:
                Pool of IP Address that is available for use ex : 130.12.0.0/16

                
                This attribute is named `addressRange` in VSD API.
                
        """
        self._address_range = value

    address_range = property(_get_address_range, _set_address_range)
    
    def _get_associated_gateway_id(self):
        """ Get associated_gateway_id value.

            Notes:
                Default PAT IP Address, must belong to the pool above

                
                This attribute is named `associatedGatewayId` in VSD API.
                
        """
        return self._associated_gateway_id

    def _set_associated_gateway_id(self, value):
        """ Set associated_gateway_id value.

            Notes:
                Default PAT IP Address, must belong to the pool above

                
                This attribute is named `associatedGatewayId` in VSD API.
                
        """
        self._associated_gateway_id = value

    associated_gateway_id = property(_get_associated_gateway_id, _set_associated_gateway_id)
    
    def _get_associated_gateway_type(self):
        """ Get associated_gateway_type value.

            Notes:
                

                
                This attribute is named `associatedGatewayType` in VSD API.
                
        """
        return self._associated_gateway_type

    def _set_associated_gateway_type(self, value):
        """ Set associated_gateway_type value.

            Notes:
                

                
                This attribute is named `associatedGatewayType` in VSD API.
                
        """
        self._associated_gateway_type = value

    associated_gateway_type = property(_get_associated_gateway_type, _set_associated_gateway_type)
    
    def _get_default_patip(self):
        """ Get default_patip value.

            Notes:
                Default PAT IP Address, must belong to the pool above

                
                This attribute is named `defaultPATIP` in VSD API.
                
        """
        return self._default_patip

    def _set_default_patip(self, value):
        """ Set default_patip value.

            Notes:
                Default PAT IP Address, must belong to the pool above

                
                This attribute is named `defaultPATIP` in VSD API.
                
        """
        self._default_patip = value

    default_patip = property(_get_default_patip, _set_default_patip)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                A description of the PATNATPool

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                A description of the PATNATPool

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Name of the PATNATPool

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Name of the PATNATPool

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_permitted_action(self):
        """ Get permitted_action value.

            Notes:
                The permitted  action to USE/EXTEND  this Gateway Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, DEPLOY, .

                
                This attribute is named `permittedAction` in VSD API.
                
        """
        return self._permitted_action

    def _set_permitted_action(self, value):
        """ Set permitted_action value.

            Notes:
                The permitted  action to USE/EXTEND  this Gateway Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, DEPLOY, .

                
                This attribute is named `permittedAction` in VSD API.
                
        """
        self._permitted_action = value

    permitted_action = property(_get_permitted_action, _set_permitted_action)
    