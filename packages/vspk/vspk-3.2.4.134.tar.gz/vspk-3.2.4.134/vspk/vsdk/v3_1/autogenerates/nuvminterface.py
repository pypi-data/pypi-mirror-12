# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUDHCPOptionsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUMultiCastChannelMapsFetcher
from ..fetchers import NUPolicyDecisionsFetcher
from ..fetchers import NUPolicyGroupsFetcher
from ..fetchers import NURedirectionTargetsFetcher
from ..fetchers import NUStaticRoutesFetcher
from ..fetchers import NUStatisticsFetcher
from ..fetchers import NUTCAsFetcher

from bambou import NURESTObject


class NUVMInterface(NURESTObject):
    """ Represents a VMInterface in the VSD

        Notes:
            Read only API that can retrieve the VM interface associated with a domain, zone or subnet for mediation created VM's for REST created  VM interfaces you need to set the additional proxy header in http request : X-Nuage-ProxyUservalue of the header has to be either :1) enterpriseName@UserName (example :bob@Alcatel Lucent), or 2) external ID of user in VSD, typically is UUID generally decided by the CMS tool in questionUser needs to have CMS privileges to use proxy user header

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUVMInterface instead.
    """

    __rest_name__ = u"vminterface"
    __resource_name__ = u"vminterfaces"

    def __init__(self, **kwargs):
        """ Initializes a VMInterface instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> vminterface = NUVMInterface(id=u'xxxx-xxx-xxx-xxx', name=u'VMInterface')
                >>> vminterface = NUVMInterface(data=my_dict)
        """

        super(NUVMInterface, self).__init__()

        # Read/Write Attributes
        
        self._associated_floating_ip_address = None
        self._attached_network_id = None
        self._attached_network_type = None
        self._domain_id = None
        self._domain_name = None
        self._gateway = None
        self._ip_address = None
        self._mac = None
        self._multi_nic_vport_name = None
        self._name = None
        self._netmask = None
        self._network_name = None
        self._policy_decision_id = None
        self._tier_id = None
        self._vmuuid = None
        self._vport_id = None
        self._vport_name = None
        self._zone_id = None
        self._zone_name = None
        
        self.expose_attribute(local_name=u"associated_floating_ip_address", remote_name=u"associatedFloatingIPAddress", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"attached_network_id", remote_name=u"attachedNetworkID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"attached_network_type", remote_name=u"attachedNetworkType", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"domain_id", remote_name=u"domainID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"domain_name", remote_name=u"domainName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ip_address", remote_name=u"IPAddress", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"mac", remote_name=u"MAC", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multi_nic_vport_name", remote_name=u"multiNICVPortName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"network_name", remote_name=u"networkName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"policy_decision_id", remote_name=u"policyDecisionID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"tier_id", remote_name=u"tierID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vmuuid", remote_name=u"VMUUID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vport_id", remote_name=u"VPortID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vport_name", remote_name=u"VPortName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"zone_id", remote_name=u"zoneID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"zone_name", remote_name=u"zoneName", attribute_type=str, is_required=False, is_unique=False)
        
        # Fetchers
        
        self.dhcp_options = NUDHCPOptionsFetcher.fetcher_with_object(parent_object=self)
        
        self.event_logs = NUEventLogsFetcher.fetcher_with_object(parent_object=self)
        
        self.multi_cast_channel_maps = NUMultiCastChannelMapsFetcher.fetcher_with_object(parent_object=self)
        
        self.policy_decisions = NUPolicyDecisionsFetcher.fetcher_with_object(parent_object=self)
        
        self.policy_groups = NUPolicyGroupsFetcher.fetcher_with_object(parent_object=self)
        
        self.redirection_targets = NURedirectionTargetsFetcher.fetcher_with_object(parent_object=self)
        
        self.static_routes = NUStaticRoutesFetcher.fetcher_with_object(parent_object=self)
        
        self.statistics = NUStatisticsFetcher.fetcher_with_object(parent_object=self)
        
        self.tcas = NUTCAsFetcher.fetcher_with_object(parent_object=self)
        
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_associated_floating_ip_address(self):
        """ Get associated_floating_ip_address value.

            Notes:
                Floating Ip Address of this network interface eg: 10.1.2.1

                
                This attribute is named `associatedFloatingIPAddress` in VSD API.
                
        """
        return self._associated_floating_ip_address

    def _set_associated_floating_ip_address(self, value):
        """ Set associated_floating_ip_address value.

            Notes:
                Floating Ip Address of this network interface eg: 10.1.2.1

                
                This attribute is named `associatedFloatingIPAddress` in VSD API.
                
        """
        self._associated_floating_ip_address = value

    associated_floating_ip_address = property(_get_associated_floating_ip_address, _set_associated_floating_ip_address)
    
    def _get_attached_network_id(self):
        """ Get attached_network_id value.

            Notes:
                ID of the l2 domain or Subnet that the VM is attached to

                
                This attribute is named `attachedNetworkID` in VSD API.
                
        """
        return self._attached_network_id

    def _set_attached_network_id(self, value):
        """ Set attached_network_id value.

            Notes:
                ID of the l2 domain or Subnet that the VM is attached to

                
                This attribute is named `attachedNetworkID` in VSD API.
                
        """
        self._attached_network_id = value

    attached_network_id = property(_get_attached_network_id, _set_attached_network_id)
    
    def _get_attached_network_type(self):
        """ Get attached_network_type value.

            Notes:
                l2 domain or Subnet that the interface is attached to

                
                This attribute is named `attachedNetworkType` in VSD API.
                
        """
        return self._attached_network_type

    def _set_attached_network_type(self, value):
        """ Set attached_network_type value.

            Notes:
                l2 domain or Subnet that the interface is attached to

                
                This attribute is named `attachedNetworkType` in VSD API.
                
        """
        self._attached_network_type = value

    attached_network_type = property(_get_attached_network_type, _set_attached_network_type)
    
    def _get_domain_id(self):
        """ Get domain_id value.

            Notes:
                ID of the domain that the VM is attached to

                
                This attribute is named `domainID` in VSD API.
                
        """
        return self._domain_id

    def _set_domain_id(self, value):
        """ Set domain_id value.

            Notes:
                ID of the domain that the VM is attached to

                
                This attribute is named `domainID` in VSD API.
                
        """
        self._domain_id = value

    domain_id = property(_get_domain_id, _set_domain_id)
    
    def _get_domain_name(self):
        """ Get domain_name value.

            Notes:
                Name of the domain that the VM is attached to

                
                This attribute is named `domainName` in VSD API.
                
        """
        return self._domain_name

    def _set_domain_name(self, value):
        """ Set domain_name value.

            Notes:
                Name of the domain that the VM is attached to

                
                This attribute is named `domainName` in VSD API.
                
        """
        self._domain_name = value

    domain_name = property(_get_domain_name, _set_domain_name)
    
    def _get_gateway(self):
        """ Get gateway value.

            Notes:
                Gateway of the subnet that the VM is connected to

                
        """
        return self._gateway

    def _set_gateway(self, value):
        """ Set gateway value.

            Notes:
                Gateway of the subnet that the VM is connected to

                
        """
        self._gateway = value

    gateway = property(_get_gateway, _set_gateway)
    
    def _get_ip_address(self):
        """ Get ip_address value.

            Notes:
                IP address of the  interface

                
                This attribute is named `IPAddress` in VSD API.
                
        """
        return self._ip_address

    def _set_ip_address(self, value):
        """ Set ip_address value.

            Notes:
                IP address of the  interface

                
                This attribute is named `IPAddress` in VSD API.
                
        """
        self._ip_address = value

    ip_address = property(_get_ip_address, _set_ip_address)
    
    def _get_mac(self):
        """ Get mac value.

            Notes:
                MAC address of the  interface

                
                This attribute is named `MAC` in VSD API.
                
        """
        return self._mac

    def _set_mac(self, value):
        """ Set mac value.

            Notes:
                MAC address of the  interface

                
                This attribute is named `MAC` in VSD API.
                
        """
        self._mac = value

    mac = property(_get_mac, _set_mac)
    
    def _get_multi_nic_vport_name(self):
        """ Get multi_nic_vport_name value.

            Notes:
                Name of the Multi NIC VPort associated with this VM Interface

                
                This attribute is named `multiNICVPortName` in VSD API.
                
        """
        return self._multi_nic_vport_name

    def _set_multi_nic_vport_name(self, value):
        """ Set multi_nic_vport_name value.

            Notes:
                Name of the Multi NIC VPort associated with this VM Interface

                
                This attribute is named `multiNICVPortName` in VSD API.
                
        """
        self._multi_nic_vport_name = value

    multi_nic_vport_name = property(_get_multi_nic_vport_name, _set_multi_nic_vport_name)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Device name associated with this interface

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Device name associated with this interface

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_netmask(self):
        """ Get netmask value.

            Notes:
                Netmask of the subnet that the VM is attached to

                
        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set netmask value.

            Notes:
                Netmask of the subnet that the VM is attached to

                
        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    
    def _get_network_name(self):
        """ Get network_name value.

            Notes:
                Name of the network that the VM is attached to

                
                This attribute is named `networkName` in VSD API.
                
        """
        return self._network_name

    def _set_network_name(self, value):
        """ Set network_name value.

            Notes:
                Name of the network that the VM is attached to

                
                This attribute is named `networkName` in VSD API.
                
        """
        self._network_name = value

    network_name = property(_get_network_name, _set_network_name)
    
    def _get_policy_decision_id(self):
        """ Get policy_decision_id value.

            Notes:
                The policy decision ID for this particular  interface

                
                This attribute is named `policyDecisionID` in VSD API.
                
        """
        return self._policy_decision_id

    def _set_policy_decision_id(self, value):
        """ Set policy_decision_id value.

            Notes:
                The policy decision ID for this particular  interface

                
                This attribute is named `policyDecisionID` in VSD API.
                
        """
        self._policy_decision_id = value

    policy_decision_id = property(_get_policy_decision_id, _set_policy_decision_id)
    
    def _get_tier_id(self):
        """ Get tier_id value.

            Notes:
                ID of the tier that the interface is attached to.

                
                This attribute is named `tierID` in VSD API.
                
        """
        return self._tier_id

    def _set_tier_id(self, value):
        """ Set tier_id value.

            Notes:
                ID of the tier that the interface is attached to.

                
                This attribute is named `tierID` in VSD API.
                
        """
        self._tier_id = value

    tier_id = property(_get_tier_id, _set_tier_id)
    
    def _get_vmuuid(self):
        """ Get vmuuid value.

            Notes:
                UUID of the associated virtual machine

                
                This attribute is named `VMUUID` in VSD API.
                
        """
        return self._vmuuid

    def _set_vmuuid(self, value):
        """ Set vmuuid value.

            Notes:
                UUID of the associated virtual machine

                
                This attribute is named `VMUUID` in VSD API.
                
        """
        self._vmuuid = value

    vmuuid = property(_get_vmuuid, _set_vmuuid)
    
    def _get_vport_id(self):
        """ Get vport_id value.

            Notes:
                ID of the vport that the interface is attached to

                
                This attribute is named `VPortID` in VSD API.
                
        """
        return self._vport_id

    def _set_vport_id(self, value):
        """ Set vport_id value.

            Notes:
                ID of the vport that the interface is attached to

                
                This attribute is named `VPortID` in VSD API.
                
        """
        self._vport_id = value

    vport_id = property(_get_vport_id, _set_vport_id)
    
    def _get_vport_name(self):
        """ Get vport_name value.

            Notes:
                Name of the vport that the VM is attached to

                
                This attribute is named `VPortName` in VSD API.
                
        """
        return self._vport_name

    def _set_vport_name(self, value):
        """ Set vport_name value.

            Notes:
                Name of the vport that the VM is attached to

                
                This attribute is named `VPortName` in VSD API.
                
        """
        self._vport_name = value

    vport_name = property(_get_vport_name, _set_vport_name)
    
    def _get_zone_id(self):
        """ Get zone_id value.

            Notes:
                ID of the zone that the interface is attached to

                
                This attribute is named `zoneID` in VSD API.
                
        """
        return self._zone_id

    def _set_zone_id(self, value):
        """ Set zone_id value.

            Notes:
                ID of the zone that the interface is attached to

                
                This attribute is named `zoneID` in VSD API.
                
        """
        self._zone_id = value

    zone_id = property(_get_zone_id, _set_zone_id)
    
    def _get_zone_name(self):
        """ Get zone_name value.

            Notes:
                Name of the zone that the VM is attached to

                
                This attribute is named `zoneName` in VSD API.
                
        """
        return self._zone_name

    def _set_zone_name(self, value):
        """ Set zone_name value.

            Notes:
                Name of the zone that the VM is attached to

                
                This attribute is named `zoneName` in VSD API.
                
        """
        self._zone_name = value

    zone_name = property(_get_zone_name, _set_zone_name)
    