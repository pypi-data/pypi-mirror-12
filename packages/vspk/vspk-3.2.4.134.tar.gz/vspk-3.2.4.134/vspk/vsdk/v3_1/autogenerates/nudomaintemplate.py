# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUDomainsFetcher
from ..fetchers import NUEgressACLTemplatesFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUGroupsFetcher
from ..fetchers import NUIngressACLTemplatesFetcher
from ..fetchers import NUIngressAdvFwdTemplatesFetcher
from ..fetchers import NUIngressExternalServiceTemplatesFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NUPolicyGroupTemplatesFetcher
from ..fetchers import NUQOSsFetcher
from ..fetchers import NURedirectionTargetTemplatesFetcher
from ..fetchers import NUSubnetTemplatesFetcher
from ..fetchers import NUZoneTemplatesFetcher

from bambou import NURESTObject


class NUDomainTemplate(NURESTObject):
    """ Represents a DomainTemplate in the VSD

        Notes:
            Domains in VSD are created from domain templates. This object provides the definition of the DomainTemplate

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUDomainTemplate instead.
    """

    __rest_name__ = u"domaintemplate"
    __resource_name__ = u"domaintemplates"

    def __init__(self, **kwargs):
        """ Initializes a DomainTemplate instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> domaintemplate = NUDomainTemplate(id=u'xxxx-xxx-xxx-xxx', name=u'DomainTemplate')
                >>> domaintemplate = NUDomainTemplate(data=my_dict)
        """

        super(NUDomainTemplate, self).__init__()

        # Read/Write Attributes
        
        self._associated_multicast_channel_map_id = None
        self._description = None
        self._encryption = None
        self._multicast = None
        self._name = None
        self._policy_change_status = None
        
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"encryption", remote_name=u"encryption", attribute_type=str, is_required=False, is_unique=False, choices=[u'DISABLED', u'ENABLED'])
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=str, is_required=False, is_unique=False, choices=[u'DISABLED', u'ENABLED', u'INHERITED'])
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"policy_change_status", remote_name=u"policyChangeStatus", attribute_type=str, is_required=False, is_unique=False, choices=[u'DISABLED', u'ENABLED'])
        
        # Fetchers
        
        self.domains = NUDomainsFetcher.fetcher_with_object(parent_object=self)
        
        self.egress_acl_templates = NUEgressACLTemplatesFetcher.fetcher_with_object(parent_object=self)
        
        self.event_logs = NUEventLogsFetcher.fetcher_with_object(parent_object=self)
        
        self.groups = NUGroupsFetcher.fetcher_with_object(parent_object=self)
        
        self.ingress_acl_templates = NUIngressACLTemplatesFetcher.fetcher_with_object(parent_object=self)
        
        self.ingress_adv_fwd_templates = NUIngressAdvFwdTemplatesFetcher.fetcher_with_object(parent_object=self)
        
        self.ingress_external_service_templates = NUIngressExternalServiceTemplatesFetcher.fetcher_with_object(parent_object=self)
        
        self.jobs = NUJobsFetcher.fetcher_with_object(parent_object=self)
        
        self.permitted_actions = NUPermittedActionsFetcher.fetcher_with_object(parent_object=self)
        
        self.policy_group_templates = NUPolicyGroupTemplatesFetcher.fetcher_with_object(parent_object=self)
        
        self.qoss = NUQOSsFetcher.fetcher_with_object(parent_object=self)
        
        self.redirection_target_templates = NURedirectionTargetTemplatesFetcher.fetcher_with_object(parent_object=self)
        
        self.subnet_templates = NUSubnetTemplatesFetcher.fetcher_with_object(parent_object=self)
        
        self.zone_templates = NUZoneTemplatesFetcher.fetcher_with_object(parent_object=self)
        
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_associated_multicast_channel_map_id(self):
        """ Get associated_multicast_channel_map_id value.

            Notes:
                The ID of the Multi Cast Channel Map  this domain template is associated with. This has to be set when  enableMultiCast is set to ENABLED

                
                This attribute is named `associatedMulticastChannelMapID` in VSD API.
                
        """
        return self._associated_multicast_channel_map_id

    def _set_associated_multicast_channel_map_id(self, value):
        """ Set associated_multicast_channel_map_id value.

            Notes:
                The ID of the Multi Cast Channel Map  this domain template is associated with. This has to be set when  enableMultiCast is set to ENABLED

                
                This attribute is named `associatedMulticastChannelMapID` in VSD API.
                
        """
        self._associated_multicast_channel_map_id = value

    associated_multicast_channel_map_id = property(_get_associated_multicast_channel_map_id, _set_associated_multicast_channel_map_id)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Domain template description provided by the user

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Domain template description provided by the user

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_encryption(self):
        """ Get encryption value.

            Notes:
                Determines whether IPSEC is enabled. Possible values are ENABLED, DISABLED, .

                
        """
        return self._encryption

    def _set_encryption(self, value):
        """ Set encryption value.

            Notes:
                Determines whether IPSEC is enabled. Possible values are ENABLED, DISABLED, .

                
        """
        self._encryption = value

    encryption = property(_get_encryption, _set_encryption)
    
    def _get_multicast(self):
        """ Get multicast value.

            Notes:
                multicast is enum that indicates multicast policy on domain. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

                
        """
        return self._multicast

    def _set_multicast(self, value):
        """ Set multicast value.

            Notes:
                multicast is enum that indicates multicast policy on domain. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

                
        """
        self._multicast = value

    multicast = property(_get_multicast, _set_multicast)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                The name of the domain template, that is unique within an enterprise. Valid characters are alphabets, numbers, space and hyphen( - ).

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                The name of the domain template, that is unique within an enterprise. Valid characters are alphabets, numbers, space and hyphen( - ).

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_policy_change_status(self):
        """ Get policy_change_status value.

            Notes:
                

                
                This attribute is named `policyChangeStatus` in VSD API.
                
        """
        return self._policy_change_status

    def _set_policy_change_status(self, value):
        """ Set policy_change_status value.

            Notes:
                

                
                This attribute is named `policyChangeStatus` in VSD API.
                
        """
        self._policy_change_status = value

    policy_change_status = property(_get_policy_change_status, _set_policy_change_status)
    