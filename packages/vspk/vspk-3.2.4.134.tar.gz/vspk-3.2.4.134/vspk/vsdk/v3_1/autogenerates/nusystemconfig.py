# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



from bambou import NURESTObject


class NUSystemConfig(NURESTObject):
    """ Represents a SystemConfig in the VSD

        Notes:
            The system configuration which can be dynamically managed using rest api.

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUSystemConfig instead.
    """

    __rest_name__ = u"systemconfig"
    __resource_name__ = u"systemconfigs"

    def __init__(self, **kwargs):
        """ Initializes a SystemConfig instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> systemconfig = NUSystemConfig(id=u'xxxx-xxx-xxx-xxx', name=u'SystemConfig')
                >>> systemconfig = NUSystemConfig(data=my_dict)
        """

        super(NUSystemConfig, self).__init__()

        # Read/Write Attributes
        
        self._acl_allow_origin = None
        self._ad_gateway_purge_time = None
        self._alarms_max_per_object = None
        self._api_key_renewal_interval = None
        self._api_key_validity = None
        self._as_number = None
        self._avatar_base_path = None
        self._avatar_base_url = None
        self._customer_id_upper_limit = None
        self._customer_key = None
        self._dhcp_option_size = None
        self._domain_tunnel_type = None
        self._dynamic_wan_service_diff_time = None
        self._ecmp_count = None
        self._ejbca_nsg_certificate_profile = None
        self._ejbca_nsg_end_entity_profile = None
        self._ejbca_ocsp_responder_cn = None
        self._ejbca_ocsp_responder_uri = None
        self._ejbca_vsp_root_ca = None
        self._esi_id = None
        self._event_log_cleanup_interval = None
        self._event_log_entry_max_age = None
        self._event_processor_interval = None
        self._event_processor_max_events_count = None
        self._event_processor_timeout = None
        self._evpnbgp_community_tag_as_number = None
        self._evpnbgp_community_tag_lower_limit = None
        self._evpnbgp_community_tag_upper_limit = None
        self._group_key_default_seed_generation_interval = None
        self._group_key_default_seed_lifetime = None
        self._group_key_default_seed_payload_authentication_algorithm = None
        self._group_key_default_seed_payload_encryption_algorithm = None
        self._group_key_default_seed_payload_signing_algorithm = None
        self._group_key_default_sek_generation_interval = None
        self._group_key_default_sek_lifetime = None
        self._group_key_default_sek_payload_encryption_algorithm = None
        self._group_key_default_sek_payload_signing_algorithm = None
        self._group_key_default_traffic_authentication_algorithm = None
        self._group_key_default_traffic_encryption_algorithm = None
        self._group_key_default_traffic_encryption_key_lifetime = None
        self._group_key_generation_interval_on_forced_re_key = None
        self._group_key_generation_interval_on_revoke = None
        self._group_key_minimum_seed_generation_interval = None
        self._group_key_minimum_seed_lifetime = None
        self._group_key_minimum_sek_generation_interval = None
        self._group_key_minimum_sek_lifetime = None
        self._group_key_minimum_traffic_encryption_key_lifetime = None
        self._inactive_timeout = None
        self._key_server_monitor_enabled = None
        self._key_server_vsd_data_synchronization_interval = None
        self._ldap_sync_interval = None
        self._ldap_trust_store_certifcate = None
        self._ldap_trust_store_password = None
        self._lru_cache_size_per_subnet = None
        self._max_failed_login_attempts = None
        self._max_response = None
        self._nsg_bootstrap_endpoint = None
        self._nsg_config_endpoint = None
        self._nsg_local_ui_url = None
        self._offset_customer_id = None
        self._offset_service_id = None
        self._page_max_size = None
        self._page_size = None
        self._post_processor_threads_count = None
        self._rd_lower_limit = None
        self._rd_public_network_lower_limit = None
        self._rd_public_network_upper_limit = None
        self._rd_upper_limit = None
        self._reflexive_acl_timeout = None
        self._rt_lower_limit = None
        self._rt_public_network_lower_limit = None
        self._rt_public_network_upper_limit = None
        self._rt_upper_limit = None
        self._service_id_upper_limit = None
        self._stack_trace_enabled = None
        self._static_wan_service_purge_time = None
        self._stats_collector_address = None
        self._stats_collector_port = None
        self._stats_collector_proto_buf_port = None
        self._stats_max_data_points = None
        self._stats_min_duration = None
        self._stats_number_of_data_points = None
        self._stats_tsdb_server_address = None
        self._subnet_resync_interval = None
        self._subnet_resync_outstanding_interval = None
        self._syslog_destination_host = None
        self._syslog_destination_port = None
        self._sysmon_cleanup_task_interval = None
        self._sysmon_node_presence_timeout = None
        self._sysmon_probe_response_timeout = None
        self._two_factor_code_expiry = None
        self._two_factor_code_length = None
        self._two_factor_code_seed_length = None
        self._vm_cache_size = None
        self._vm_purge_time = None
        self._vm_resync_deletion_wait_time = None
        self._vm_resync_outstanding_interval = None
        self._vm_unreachable_cleanup_time = None
        self._vm_unreachable_time = None
        self._vnid_lower_limit = None
        self._vnid_public_network_lower_limit = None
        self._vnid_public_network_upper_limit = None
        self._vnid_upper_limit = None
        self._vsc_on_same_version_as_vsd = None
        self._vsd_read_only_mode = None
        self._vsd_upgrade_is_complete = None
        
        self.expose_attribute(local_name=u"acl_allow_origin", remote_name=u"ACLAllowOrigin", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ad_gateway_purge_time", remote_name=u"ADGatewayPurgeTime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"alarms_max_per_object", remote_name=u"alarmsMaxPerObject", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"api_key_renewal_interval", remote_name=u"APIKeyRenewalInterval", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"api_key_validity", remote_name=u"APIKeyValidity", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"as_number", remote_name=u"ASNumber", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"avatar_base_path", remote_name=u"avatarBasePath", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"avatar_base_url", remote_name=u"avatarBaseURL", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"customer_id_upper_limit", remote_name=u"customerIDUpperLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"customer_key", remote_name=u"customerKey", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"dhcp_option_size", remote_name=u"DHCPOptionSize", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"domain_tunnel_type", remote_name=u"domainTunnelType", attribute_type=str, is_required=False, is_unique=False, choices=[u'DC_DEFAULT', u'GRE', u'VXLAN'])
        self.expose_attribute(local_name=u"dynamic_wan_service_diff_time", remote_name=u"dynamicWANServiceDiffTime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ecmp_count", remote_name=u"ecmpCount", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ejbca_nsg_certificate_profile", remote_name=u"ejbcaNSGCertificateProfile", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ejbca_nsg_end_entity_profile", remote_name=u"ejbcaNSGEndEntityProfile", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ejbca_ocsp_responder_cn", remote_name=u"ejbcaOCSPResponderCN", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ejbca_ocsp_responder_uri", remote_name=u"ejbcaOCSPResponderURI", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ejbca_vsp_root_ca", remote_name=u"ejbcaVspRootCa", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"esi_id", remote_name=u"esiID", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"event_log_cleanup_interval", remote_name=u"eventLogCleanupInterval", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"event_log_entry_max_age", remote_name=u"eventLogEntryMaxAge", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"event_processor_interval", remote_name=u"eventProcessorInterval", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"event_processor_max_events_count", remote_name=u"eventProcessorMaxEventsCount", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"event_processor_timeout", remote_name=u"eventProcessorTimeout", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"evpnbgp_community_tag_as_number", remote_name=u"EVPNBGPCommunityTagASNumber", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"evpnbgp_community_tag_lower_limit", remote_name=u"EVPNBGPCommunityTagLowerLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"evpnbgp_community_tag_upper_limit", remote_name=u"EVPNBGPCommunityTagUpperLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_default_seed_generation_interval", remote_name=u"groupKeyDefaultSeedGenerationInterval", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_default_seed_lifetime", remote_name=u"groupKeyDefaultSeedLifetime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_default_seed_payload_authentication_algorithm", remote_name=u"groupKeyDefaultSeedPayloadAuthenticationAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'HMAC_SHA1', u'HMAC_SHA256', u'HMAC_SHA512'])
        self.expose_attribute(local_name=u"group_key_default_seed_payload_encryption_algorithm", remote_name=u"groupKeyDefaultSeedPayloadEncryptionAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'AES_128_CBC', u'AES_256_CBC', u'TRIPLE_DES_CBC'])
        self.expose_attribute(local_name=u"group_key_default_seed_payload_signing_algorithm", remote_name=u"groupKeyDefaultSeedPayloadSigningAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'SHA1withRSA', u'SHA224withRSA', u'SHA256withRSA', u'SHA384withRSA', u'SHA512withRSA'])
        self.expose_attribute(local_name=u"group_key_default_sek_generation_interval", remote_name=u"groupKeyDefaultSEKGenerationInterval", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_default_sek_lifetime", remote_name=u"groupKeyDefaultSEKLifetime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_default_sek_payload_encryption_algorithm", remote_name=u"groupKeyDefaultSEKPayloadEncryptionAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'RSA_1024'])
        self.expose_attribute(local_name=u"group_key_default_sek_payload_signing_algorithm", remote_name=u"groupKeyDefaultSEKPayloadSigningAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'SHA1withRSA', u'SHA224withRSA', u'SHA256withRSA', u'SHA384withRSA', u'SHA512withRSA'])
        self.expose_attribute(local_name=u"group_key_default_traffic_authentication_algorithm", remote_name=u"groupKeyDefaultTrafficAuthenticationAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'HMAC_MD5', u'HMAC_SHA1', u'HMAC_SHA256', u'HMAC_SHA384', u'HMAC_SHA512'])
        self.expose_attribute(local_name=u"group_key_default_traffic_encryption_algorithm", remote_name=u"groupKeyDefaultTrafficEncryptionAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'AES_128_CBC', u'AES_192_CBC', u'AES_256_CBC', u'TRIPLE_DES_CBC'])
        self.expose_attribute(local_name=u"group_key_default_traffic_encryption_key_lifetime", remote_name=u"groupKeyDefaultTrafficEncryptionKeyLifetime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_generation_interval_on_forced_re_key", remote_name=u"groupKeyGenerationIntervalOnForcedReKey", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_generation_interval_on_revoke", remote_name=u"groupKeyGenerationIntervalOnRevoke", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_minimum_seed_generation_interval", remote_name=u"groupKeyMinimumSeedGenerationInterval", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_minimum_seed_lifetime", remote_name=u"groupKeyMinimumSeedLifetime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_minimum_sek_generation_interval", remote_name=u"groupKeyMinimumSEKGenerationInterval", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_minimum_sek_lifetime", remote_name=u"groupKeyMinimumSEKLifetime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_key_minimum_traffic_encryption_key_lifetime", remote_name=u"groupKeyMinimumTrafficEncryptionKeyLifetime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"inactive_timeout", remote_name=u"inactiveTimeout", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"key_server_monitor_enabled", remote_name=u"keyServerMonitorEnabled", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"key_server_vsd_data_synchronization_interval", remote_name=u"keyServerVSDDataSynchronizationInterval", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ldap_sync_interval", remote_name=u"ldapSyncInterval", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ldap_trust_store_certifcate", remote_name=u"LDAPTrustStoreCertifcate", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ldap_trust_store_password", remote_name=u"LDAPTrustStorePassword", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"lru_cache_size_per_subnet", remote_name=u"LRUCacheSizePerSubnet", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"max_failed_login_attempts", remote_name=u"maxFailedLoginAttempts", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"max_response", remote_name=u"maxResponse", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nsg_bootstrap_endpoint", remote_name=u"nsgBootstrapEndpoint", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nsg_config_endpoint", remote_name=u"nsgConfigEndpoint", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nsg_local_ui_url", remote_name=u"nsgLocalUiUrl", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"offset_customer_id", remote_name=u"offsetCustomerID", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"offset_service_id", remote_name=u"offsetServiceID", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"page_max_size", remote_name=u"pageMaxSize", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"page_size", remote_name=u"pageSize", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"post_processor_threads_count", remote_name=u"postProcessorThreadsCount", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"rd_lower_limit", remote_name=u"RDLowerLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"rd_public_network_lower_limit", remote_name=u"RDPublicNetworkLowerLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"rd_public_network_upper_limit", remote_name=u"RDPublicNetworkUpperLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"rd_upper_limit", remote_name=u"RDUpperLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"reflexive_acl_timeout", remote_name=u"reflexiveACLTimeout", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"rt_lower_limit", remote_name=u"RTLowerLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"rt_public_network_lower_limit", remote_name=u"RTPublicNetworkLowerLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"rt_public_network_upper_limit", remote_name=u"RTPublicNetworkUpperLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"rt_upper_limit", remote_name=u"RTUpperLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"service_id_upper_limit", remote_name=u"serviceIDUpperLimit", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"stack_trace_enabled", remote_name=u"stackTraceEnabled", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"static_wan_service_purge_time", remote_name=u"staticWANServicePurgeTime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"stats_collector_address", remote_name=u"statsCollectorAddress", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"stats_collector_port", remote_name=u"statsCollectorPort", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"stats_collector_proto_buf_port", remote_name=u"statsCollectorProtoBufPort", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"stats_max_data_points", remote_name=u"statsMaxDataPoints", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"stats_min_duration", remote_name=u"statsMinDuration", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"stats_number_of_data_points", remote_name=u"statsNumberOfDataPoints", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"stats_tsdb_server_address", remote_name=u"statsTSDBServerAddress", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"subnet_resync_interval", remote_name=u"subnetResyncInterval", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"subnet_resync_outstanding_interval", remote_name=u"subnetResyncOutstandingInterval", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"syslog_destination_host", remote_name=u"syslogDestinationHost", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"syslog_destination_port", remote_name=u"syslogDestinationPort", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"sysmon_cleanup_task_interval", remote_name=u"sysmonCleanupTaskInterval", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"sysmon_node_presence_timeout", remote_name=u"sysmonNodePresenceTimeout", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"sysmon_probe_response_timeout", remote_name=u"sysmonProbeResponseTimeout", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"two_factor_code_expiry", remote_name=u"twoFactorCodeExpiry", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"two_factor_code_length", remote_name=u"twoFactorCodeLength", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"two_factor_code_seed_length", remote_name=u"twoFactorCodeSeedLength", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vm_cache_size", remote_name=u"VMCacheSize", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vm_purge_time", remote_name=u"VMPurgeTime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vm_resync_deletion_wait_time", remote_name=u"VMResyncDeletionWaitTime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vm_resync_outstanding_interval", remote_name=u"VMResyncOutstandingInterval", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vm_unreachable_cleanup_time", remote_name=u"VMUnreachableCleanupTime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vm_unreachable_time", remote_name=u"VMUnreachableTime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vnid_lower_limit", remote_name=u"VNIDLowerLimit", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vnid_public_network_lower_limit", remote_name=u"VNIDPublicNetworkLowerLimit", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vnid_public_network_upper_limit", remote_name=u"VNIDPublicNetworkUpperLimit", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vnid_upper_limit", remote_name=u"VNIDUpperLimit", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vsc_on_same_version_as_vsd", remote_name=u"VSCOnSameVersionAsVSD", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vsd_read_only_mode", remote_name=u"VSDReadOnlyMode", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vsd_upgrade_is_complete", remote_name=u"VSDUpgradeIsComplete", attribute_type=bool, is_required=False, is_unique=False)
        
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_acl_allow_origin(self):
        """ Get acl_allow_origin value.

            Notes:
                Defines the domains allowed for access control list.

                
                This attribute is named `ACLAllowOrigin` in VSD API.
                
        """
        return self._acl_allow_origin

    def _set_acl_allow_origin(self, value):
        """ Set acl_allow_origin value.

            Notes:
                Defines the domains allowed for access control list.

                
                This attribute is named `ACLAllowOrigin` in VSD API.
                
        """
        self._acl_allow_origin = value

    acl_allow_origin = property(_get_acl_allow_origin, _set_acl_allow_origin)
    
    def _get_ad_gateway_purge_time(self):
        """ Get ad_gateway_purge_time value.

            Notes:
                Timers in sec for undefined vms to be deleted(min =7200, max = 86400).

                
                This attribute is named `ADGatewayPurgeTime` in VSD API.
                
        """
        return self._ad_gateway_purge_time

    def _set_ad_gateway_purge_time(self, value):
        """ Set ad_gateway_purge_time value.

            Notes:
                Timers in sec for undefined vms to be deleted(min =7200, max = 86400).

                
                This attribute is named `ADGatewayPurgeTime` in VSD API.
                
        """
        self._ad_gateway_purge_time = value

    ad_gateway_purge_time = property(_get_ad_gateway_purge_time, _set_ad_gateway_purge_time)
    
    def _get_alarms_max_per_object(self):
        """ Get alarms_max_per_object value.

            Notes:
                Maximum alarms per object for example max distinct alarms for specific VM (min = 5, max =20)

                
                This attribute is named `alarmsMaxPerObject` in VSD API.
                
        """
        return self._alarms_max_per_object

    def _set_alarms_max_per_object(self, value):
        """ Set alarms_max_per_object value.

            Notes:
                Maximum alarms per object for example max distinct alarms for specific VM (min = 5, max =20)

                
                This attribute is named `alarmsMaxPerObject` in VSD API.
                
        """
        self._alarms_max_per_object = value

    alarms_max_per_object = property(_get_alarms_max_per_object, _set_alarms_max_per_object)
    
    def _get_api_key_renewal_interval(self):
        """ Get api_key_renewal_interval value.

            Notes:
                Defines the interval in seconds, before the expiry time, that can used to renew the apiKey by making me API call. Minimum value is 1 min and maximum is 5 min.

                
                This attribute is named `APIKeyRenewalInterval` in VSD API.
                
        """
        return self._api_key_renewal_interval

    def _set_api_key_renewal_interval(self, value):
        """ Set api_key_renewal_interval value.

            Notes:
                Defines the interval in seconds, before the expiry time, that can used to renew the apiKey by making me API call. Minimum value is 1 min and maximum is 5 min.

                
                This attribute is named `APIKeyRenewalInterval` in VSD API.
                
        """
        self._api_key_renewal_interval = value

    api_key_renewal_interval = property(_get_api_key_renewal_interval, _set_api_key_renewal_interval)
    
    def _get_api_key_validity(self):
        """ Get api_key_validity value.

            Notes:
                Defines the apiKey validity duration in seconds. Default is 24 hours and minimum value is 10 min.

                
                This attribute is named `APIKeyValidity` in VSD API.
                
        """
        return self._api_key_validity

    def _set_api_key_validity(self, value):
        """ Set api_key_validity value.

            Notes:
                Defines the apiKey validity duration in seconds. Default is 24 hours and minimum value is 10 min.

                
                This attribute is named `APIKeyValidity` in VSD API.
                
        """
        self._api_key_validity = value

    api_key_validity = property(_get_api_key_validity, _set_api_key_validity)
    
    def _get_as_number(self):
        """ Get as_number value.

            Notes:
                 Autonomous System Number,Used for RT/RD auto-generation

                
                This attribute is named `ASNumber` in VSD API.
                
        """
        return self._as_number

    def _set_as_number(self, value):
        """ Set as_number value.

            Notes:
                 Autonomous System Number,Used for RT/RD auto-generation

                
                This attribute is named `ASNumber` in VSD API.
                
        """
        self._as_number = value

    as_number = property(_get_as_number, _set_as_number)
    
    def _get_avatar_base_path(self):
        """ Get avatar_base_path value.

            Notes:
                Defines location where image files needs to be copied. Above URL should be configured to read the file from this location.

                
                This attribute is named `avatarBasePath` in VSD API.
                
        """
        return self._avatar_base_path

    def _set_avatar_base_path(self, value):
        """ Set avatar_base_path value.

            Notes:
                Defines location where image files needs to be copied. Above URL should be configured to read the file from this location.

                
                This attribute is named `avatarBasePath` in VSD API.
                
        """
        self._avatar_base_path = value

    avatar_base_path = property(_get_avatar_base_path, _set_avatar_base_path)
    
    def _get_avatar_base_url(self):
        """ Get avatar_base_url value.

            Notes:
                Defines the url to read the avatar image files

                
                This attribute is named `avatarBaseURL` in VSD API.
                
        """
        return self._avatar_base_url

    def _set_avatar_base_url(self, value):
        """ Set avatar_base_url value.

            Notes:
                Defines the url to read the avatar image files

                
                This attribute is named `avatarBaseURL` in VSD API.
                
        """
        self._avatar_base_url = value

    avatar_base_url = property(_get_avatar_base_url, _set_avatar_base_url)
    
    def _get_customer_id_upper_limit(self):
        """ Get customer_id_upper_limit value.

            Notes:
                Customer id upper limit, system wide value

                
                This attribute is named `customerIDUpperLimit` in VSD API.
                
        """
        return self._customer_id_upper_limit

    def _set_customer_id_upper_limit(self, value):
        """ Set customer_id_upper_limit value.

            Notes:
                Customer id upper limit, system wide value

                
                This attribute is named `customerIDUpperLimit` in VSD API.
                
        """
        self._customer_id_upper_limit = value

    customer_id_upper_limit = property(_get_customer_id_upper_limit, _set_customer_id_upper_limit)
    
    def _get_customer_key(self):
        """ Get customer_key value.

            Notes:
                Customer key associated with the licese

                
                This attribute is named `customerKey` in VSD API.
                
        """
        return self._customer_key

    def _set_customer_key(self, value):
        """ Set customer_key value.

            Notes:
                Customer key associated with the licese

                
                This attribute is named `customerKey` in VSD API.
                
        """
        self._customer_key = value

    customer_key = property(_get_customer_key, _set_customer_key)
    
    def _get_dhcp_option_size(self):
        """ Get dhcp_option_size value.

            Notes:
                Defines total DHCP options that can be set on a domain.

                
                This attribute is named `DHCPOptionSize` in VSD API.
                
        """
        return self._dhcp_option_size

    def _set_dhcp_option_size(self, value):
        """ Set dhcp_option_size value.

            Notes:
                Defines total DHCP options that can be set on a domain.

                
                This attribute is named `DHCPOptionSize` in VSD API.
                
        """
        self._dhcp_option_size = value

    dhcp_option_size = property(_get_dhcp_option_size, _set_dhcp_option_size)
    
    def _get_domain_tunnel_type(self):
        """ Get domain_tunnel_type value.

            Notes:
                Default Domain Tunnel Type .Possible values are VXLAN,GRE Possible values are DC_DEFAULT, GRE, VXLAN, .

                
                This attribute is named `domainTunnelType` in VSD API.
                
        """
        return self._domain_tunnel_type

    def _set_domain_tunnel_type(self, value):
        """ Set domain_tunnel_type value.

            Notes:
                Default Domain Tunnel Type .Possible values are VXLAN,GRE Possible values are DC_DEFAULT, GRE, VXLAN, .

                
                This attribute is named `domainTunnelType` in VSD API.
                
        """
        self._domain_tunnel_type = value

    domain_tunnel_type = property(_get_domain_tunnel_type, _set_domain_tunnel_type)
    
    def _get_dynamic_wan_service_diff_time(self):
        """ Get dynamic_wan_service_diff_time value.

            Notes:
                Timers in sec for  dynamic WAN Services to be considered not seen by 7X50(min =1, max = 7200)

                
                This attribute is named `dynamicWANServiceDiffTime` in VSD API.
                
        """
        return self._dynamic_wan_service_diff_time

    def _set_dynamic_wan_service_diff_time(self, value):
        """ Set dynamic_wan_service_diff_time value.

            Notes:
                Timers in sec for  dynamic WAN Services to be considered not seen by 7X50(min =1, max = 7200)

                
                This attribute is named `dynamicWANServiceDiffTime` in VSD API.
                
        """
        self._dynamic_wan_service_diff_time = value

    dynamic_wan_service_diff_time = property(_get_dynamic_wan_service_diff_time, _set_dynamic_wan_service_diff_time)
    
    def _get_ecmp_count(self):
        """ Get ecmp_count value.

            Notes:
                System Default Equal-cost multi-path routing count,Every Domain derives ECMP count from this value unless specifically set for the domain

                
                This attribute is named `ecmpCount` in VSD API.
                
        """
        return self._ecmp_count

    def _set_ecmp_count(self, value):
        """ Set ecmp_count value.

            Notes:
                System Default Equal-cost multi-path routing count,Every Domain derives ECMP count from this value unless specifically set for the domain

                
                This attribute is named `ecmpCount` in VSD API.
                
        """
        self._ecmp_count = value

    ecmp_count = property(_get_ecmp_count, _set_ecmp_count)
    
    def _get_ejbca_nsg_certificate_profile(self):
        """ Get ejbca_nsg_certificate_profile value.

            Notes:
                EJBCA NSG Certificate Profile

                
                This attribute is named `ejbcaNSGCertificateProfile` in VSD API.
                
        """
        return self._ejbca_nsg_certificate_profile

    def _set_ejbca_nsg_certificate_profile(self, value):
        """ Set ejbca_nsg_certificate_profile value.

            Notes:
                EJBCA NSG Certificate Profile

                
                This attribute is named `ejbcaNSGCertificateProfile` in VSD API.
                
        """
        self._ejbca_nsg_certificate_profile = value

    ejbca_nsg_certificate_profile = property(_get_ejbca_nsg_certificate_profile, _set_ejbca_nsg_certificate_profile)
    
    def _get_ejbca_nsg_end_entity_profile(self):
        """ Get ejbca_nsg_end_entity_profile value.

            Notes:
                EJBCA NSG End Entity Profile

                
                This attribute is named `ejbcaNSGEndEntityProfile` in VSD API.
                
        """
        return self._ejbca_nsg_end_entity_profile

    def _set_ejbca_nsg_end_entity_profile(self, value):
        """ Set ejbca_nsg_end_entity_profile value.

            Notes:
                EJBCA NSG End Entity Profile

                
                This attribute is named `ejbcaNSGEndEntityProfile` in VSD API.
                
        """
        self._ejbca_nsg_end_entity_profile = value

    ejbca_nsg_end_entity_profile = property(_get_ejbca_nsg_end_entity_profile, _set_ejbca_nsg_end_entity_profile)
    
    def _get_ejbca_ocsp_responder_cn(self):
        """ Get ejbca_ocsp_responder_cn value.

            Notes:
                EJBCA OCSP Responder CommonName

                
                This attribute is named `ejbcaOCSPResponderCN` in VSD API.
                
        """
        return self._ejbca_ocsp_responder_cn

    def _set_ejbca_ocsp_responder_cn(self, value):
        """ Set ejbca_ocsp_responder_cn value.

            Notes:
                EJBCA OCSP Responder CommonName

                
                This attribute is named `ejbcaOCSPResponderCN` in VSD API.
                
        """
        self._ejbca_ocsp_responder_cn = value

    ejbca_ocsp_responder_cn = property(_get_ejbca_ocsp_responder_cn, _set_ejbca_ocsp_responder_cn)
    
    def _get_ejbca_ocsp_responder_uri(self):
        """ Get ejbca_ocsp_responder_uri value.

            Notes:
                EJBCA OCSP Responder URI

                
                This attribute is named `ejbcaOCSPResponderURI` in VSD API.
                
        """
        return self._ejbca_ocsp_responder_uri

    def _set_ejbca_ocsp_responder_uri(self, value):
        """ Set ejbca_ocsp_responder_uri value.

            Notes:
                EJBCA OCSP Responder URI

                
                This attribute is named `ejbcaOCSPResponderURI` in VSD API.
                
        """
        self._ejbca_ocsp_responder_uri = value

    ejbca_ocsp_responder_uri = property(_get_ejbca_ocsp_responder_uri, _set_ejbca_ocsp_responder_uri)
    
    def _get_ejbca_vsp_root_ca(self):
        """ Get ejbca_vsp_root_ca value.

            Notes:
                EJBCA VSP CA

                
                This attribute is named `ejbcaVspRootCa` in VSD API.
                
        """
        return self._ejbca_vsp_root_ca

    def _set_ejbca_vsp_root_ca(self, value):
        """ Set ejbca_vsp_root_ca value.

            Notes:
                EJBCA VSP CA

                
                This attribute is named `ejbcaVspRootCa` in VSD API.
                
        """
        self._ejbca_vsp_root_ca = value

    ejbca_vsp_root_ca = property(_get_ejbca_vsp_root_ca, _set_ejbca_vsp_root_ca)
    
    def _get_esi_id(self):
        """ Get esi_id value.

            Notes:
                ESI ID offset

                
                This attribute is named `esiID` in VSD API.
                
        """
        return self._esi_id

    def _set_esi_id(self, value):
        """ Set esi_id value.

            Notes:
                ESI ID offset

                
                This attribute is named `esiID` in VSD API.
                
        """
        self._esi_id = value

    esi_id = property(_get_esi_id, _set_esi_id)
    
    def _get_event_log_cleanup_interval(self):
        """ Get event_log_cleanup_interval value.

            Notes:
                Cleanup task run interval in seconds (Min: every hour, Max: every day)

                
                This attribute is named `eventLogCleanupInterval` in VSD API.
                
        """
        return self._event_log_cleanup_interval

    def _set_event_log_cleanup_interval(self, value):
        """ Set event_log_cleanup_interval value.

            Notes:
                Cleanup task run interval in seconds (Min: every hour, Max: every day)

                
                This attribute is named `eventLogCleanupInterval` in VSD API.
                
        """
        self._event_log_cleanup_interval = value

    event_log_cleanup_interval = property(_get_event_log_cleanup_interval, _set_event_log_cleanup_interval)
    
    def _get_event_log_entry_max_age(self):
        """ Get event_log_entry_max_age value.

            Notes:
                Maximum age in days for cleanup of the eventlog entries (Min: 1 day, Max: 6 months). On every periodic interval run, any eventlog entries older than the maxage will be deleted.

                
                This attribute is named `eventLogEntryMaxAge` in VSD API.
                
        """
        return self._event_log_entry_max_age

    def _set_event_log_entry_max_age(self, value):
        """ Set event_log_entry_max_age value.

            Notes:
                Maximum age in days for cleanup of the eventlog entries (Min: 1 day, Max: 6 months). On every periodic interval run, any eventlog entries older than the maxage will be deleted.

                
                This attribute is named `eventLogEntryMaxAge` in VSD API.
                
        """
        self._event_log_entry_max_age = value

    event_log_entry_max_age = property(_get_event_log_entry_max_age, _set_event_log_entry_max_age)
    
    def _get_event_processor_interval(self):
        """ Get event_processor_interval value.

            Notes:
                Defines time interval in milliseconds when events collected for a client should be processed. Minimum value is 250ms.

                
                This attribute is named `eventProcessorInterval` in VSD API.
                
        """
        return self._event_processor_interval

    def _set_event_processor_interval(self, value):
        """ Set event_processor_interval value.

            Notes:
                Defines time interval in milliseconds when events collected for a client should be processed. Minimum value is 250ms.

                
                This attribute is named `eventProcessorInterval` in VSD API.
                
        """
        self._event_processor_interval = value

    event_processor_interval = property(_get_event_processor_interval, _set_event_processor_interval)
    
    def _get_event_processor_max_events_count(self):
        """ Get event_processor_max_events_count value.

            Notes:
                Defines the maximum number of events to be collected in case of events burst. Value should be between 100 to 500.

                
                This attribute is named `eventProcessorMaxEventsCount` in VSD API.
                
        """
        return self._event_processor_max_events_count

    def _set_event_processor_max_events_count(self, value):
        """ Set event_processor_max_events_count value.

            Notes:
                Defines the maximum number of events to be collected in case of events burst. Value should be between 100 to 500.

                
                This attribute is named `eventProcessorMaxEventsCount` in VSD API.
                
        """
        self._event_processor_max_events_count = value

    event_processor_max_events_count = property(_get_event_processor_max_events_count, _set_event_processor_max_events_count)
    
    def _get_event_processor_timeout(self):
        """ Get event_processor_timeout value.

            Notes:
                Defines the maximum time period in milliseconds for the Rest server to wait before sending the events from the system. Value should be between 25000ms to 100000ms.

                
                This attribute is named `eventProcessorTimeout` in VSD API.
                
        """
        return self._event_processor_timeout

    def _set_event_processor_timeout(self, value):
        """ Set event_processor_timeout value.

            Notes:
                Defines the maximum time period in milliseconds for the Rest server to wait before sending the events from the system. Value should be between 25000ms to 100000ms.

                
                This attribute is named `eventProcessorTimeout` in VSD API.
                
        """
        self._event_processor_timeout = value

    event_processor_timeout = property(_get_event_processor_timeout, _set_event_processor_timeout)
    
    def _get_evpnbgp_community_tag_as_number(self):
        """ Get evpnbgp_community_tag_as_number value.

            Notes:
                 Autonomous System Number,Used for EVPNBGPCommunityTag auto-generation

                
                This attribute is named `EVPNBGPCommunityTagASNumber` in VSD API.
                
        """
        return self._evpnbgp_community_tag_as_number

    def _set_evpnbgp_community_tag_as_number(self, value):
        """ Set evpnbgp_community_tag_as_number value.

            Notes:
                 Autonomous System Number,Used for EVPNBGPCommunityTag auto-generation

                
                This attribute is named `EVPNBGPCommunityTagASNumber` in VSD API.
                
        """
        self._evpnbgp_community_tag_as_number = value

    evpnbgp_community_tag_as_number = property(_get_evpnbgp_community_tag_as_number, _set_evpnbgp_community_tag_as_number)
    
    def _get_evpnbgp_community_tag_lower_limit(self):
        """ Get evpnbgp_community_tag_lower_limit value.

            Notes:
                EVPNBGPCommunityTag lower limit

                
                This attribute is named `EVPNBGPCommunityTagLowerLimit` in VSD API.
                
        """
        return self._evpnbgp_community_tag_lower_limit

    def _set_evpnbgp_community_tag_lower_limit(self, value):
        """ Set evpnbgp_community_tag_lower_limit value.

            Notes:
                EVPNBGPCommunityTag lower limit

                
                This attribute is named `EVPNBGPCommunityTagLowerLimit` in VSD API.
                
        """
        self._evpnbgp_community_tag_lower_limit = value

    evpnbgp_community_tag_lower_limit = property(_get_evpnbgp_community_tag_lower_limit, _set_evpnbgp_community_tag_lower_limit)
    
    def _get_evpnbgp_community_tag_upper_limit(self):
        """ Get evpnbgp_community_tag_upper_limit value.

            Notes:
                EVPNBGPCommunityTag upper limit

                
                This attribute is named `EVPNBGPCommunityTagUpperLimit` in VSD API.
                
        """
        return self._evpnbgp_community_tag_upper_limit

    def _set_evpnbgp_community_tag_upper_limit(self, value):
        """ Set evpnbgp_community_tag_upper_limit value.

            Notes:
                EVPNBGPCommunityTag upper limit

                
                This attribute is named `EVPNBGPCommunityTagUpperLimit` in VSD API.
                
        """
        self._evpnbgp_community_tag_upper_limit = value

    evpnbgp_community_tag_upper_limit = property(_get_evpnbgp_community_tag_upper_limit, _set_evpnbgp_community_tag_upper_limit)
    
    def _get_group_key_default_seed_generation_interval(self):
        """ Get group_key_default_seed_generation_interval value.

            Notes:
                Group Key Encryption Profile Default Seed Generation Interval

                
                This attribute is named `groupKeyDefaultSeedGenerationInterval` in VSD API.
                
        """
        return self._group_key_default_seed_generation_interval

    def _set_group_key_default_seed_generation_interval(self, value):
        """ Set group_key_default_seed_generation_interval value.

            Notes:
                Group Key Encryption Profile Default Seed Generation Interval

                
                This attribute is named `groupKeyDefaultSeedGenerationInterval` in VSD API.
                
        """
        self._group_key_default_seed_generation_interval = value

    group_key_default_seed_generation_interval = property(_get_group_key_default_seed_generation_interval, _set_group_key_default_seed_generation_interval)
    
    def _get_group_key_default_seed_lifetime(self):
        """ Get group_key_default_seed_lifetime value.

            Notes:
                Group Key Encryption Profile Default Seed Lifetime

                
                This attribute is named `groupKeyDefaultSeedLifetime` in VSD API.
                
        """
        return self._group_key_default_seed_lifetime

    def _set_group_key_default_seed_lifetime(self, value):
        """ Set group_key_default_seed_lifetime value.

            Notes:
                Group Key Encryption Profile Default Seed Lifetime

                
                This attribute is named `groupKeyDefaultSeedLifetime` in VSD API.
                
        """
        self._group_key_default_seed_lifetime = value

    group_key_default_seed_lifetime = property(_get_group_key_default_seed_lifetime, _set_group_key_default_seed_lifetime)
    
    def _get_group_key_default_seed_payload_authentication_algorithm(self):
        """ Get group_key_default_seed_payload_authentication_algorithm value.

            Notes:
                Group Key Encryption Profile Default Seed Payload Authentication Algorithm Possible values are HMAC_SHA1, HMAC_SHA256, HMAC_SHA512, .

                
                This attribute is named `groupKeyDefaultSeedPayloadAuthenticationAlgorithm` in VSD API.
                
        """
        return self._group_key_default_seed_payload_authentication_algorithm

    def _set_group_key_default_seed_payload_authentication_algorithm(self, value):
        """ Set group_key_default_seed_payload_authentication_algorithm value.

            Notes:
                Group Key Encryption Profile Default Seed Payload Authentication Algorithm Possible values are HMAC_SHA1, HMAC_SHA256, HMAC_SHA512, .

                
                This attribute is named `groupKeyDefaultSeedPayloadAuthenticationAlgorithm` in VSD API.
                
        """
        self._group_key_default_seed_payload_authentication_algorithm = value

    group_key_default_seed_payload_authentication_algorithm = property(_get_group_key_default_seed_payload_authentication_algorithm, _set_group_key_default_seed_payload_authentication_algorithm)
    
    def _get_group_key_default_seed_payload_encryption_algorithm(self):
        """ Get group_key_default_seed_payload_encryption_algorithm value.

            Notes:
                Group Key Encryption Profile Default Seed Payload Encryption Algorithm Possible values are AES_128_CBC, AES_256_CBC, TRIPLE_DES_CBC, .

                
                This attribute is named `groupKeyDefaultSeedPayloadEncryptionAlgorithm` in VSD API.
                
        """
        return self._group_key_default_seed_payload_encryption_algorithm

    def _set_group_key_default_seed_payload_encryption_algorithm(self, value):
        """ Set group_key_default_seed_payload_encryption_algorithm value.

            Notes:
                Group Key Encryption Profile Default Seed Payload Encryption Algorithm Possible values are AES_128_CBC, AES_256_CBC, TRIPLE_DES_CBC, .

                
                This attribute is named `groupKeyDefaultSeedPayloadEncryptionAlgorithm` in VSD API.
                
        """
        self._group_key_default_seed_payload_encryption_algorithm = value

    group_key_default_seed_payload_encryption_algorithm = property(_get_group_key_default_seed_payload_encryption_algorithm, _set_group_key_default_seed_payload_encryption_algorithm)
    
    def _get_group_key_default_seed_payload_signing_algorithm(self):
        """ Get group_key_default_seed_payload_signing_algorithm value.

            Notes:
                Group Key Encryption Profile Default Seed Payload Signature Algorithm Possible values are SHA1withRSA, SHA224withRSA, SHA256withRSA, SHA384withRSA, SHA512withRSA, .

                
                This attribute is named `groupKeyDefaultSeedPayloadSigningAlgorithm` in VSD API.
                
        """
        return self._group_key_default_seed_payload_signing_algorithm

    def _set_group_key_default_seed_payload_signing_algorithm(self, value):
        """ Set group_key_default_seed_payload_signing_algorithm value.

            Notes:
                Group Key Encryption Profile Default Seed Payload Signature Algorithm Possible values are SHA1withRSA, SHA224withRSA, SHA256withRSA, SHA384withRSA, SHA512withRSA, .

                
                This attribute is named `groupKeyDefaultSeedPayloadSigningAlgorithm` in VSD API.
                
        """
        self._group_key_default_seed_payload_signing_algorithm = value

    group_key_default_seed_payload_signing_algorithm = property(_get_group_key_default_seed_payload_signing_algorithm, _set_group_key_default_seed_payload_signing_algorithm)
    
    def _get_group_key_default_sek_generation_interval(self):
        """ Get group_key_default_sek_generation_interval value.

            Notes:
                Group Key Encryption Profile Default SEK Generation Interval

                
                This attribute is named `groupKeyDefaultSEKGenerationInterval` in VSD API.
                
        """
        return self._group_key_default_sek_generation_interval

    def _set_group_key_default_sek_generation_interval(self, value):
        """ Set group_key_default_sek_generation_interval value.

            Notes:
                Group Key Encryption Profile Default SEK Generation Interval

                
                This attribute is named `groupKeyDefaultSEKGenerationInterval` in VSD API.
                
        """
        self._group_key_default_sek_generation_interval = value

    group_key_default_sek_generation_interval = property(_get_group_key_default_sek_generation_interval, _set_group_key_default_sek_generation_interval)
    
    def _get_group_key_default_sek_lifetime(self):
        """ Get group_key_default_sek_lifetime value.

            Notes:
                Group Key Encryption Profile Default SEK Lifetime

                
                This attribute is named `groupKeyDefaultSEKLifetime` in VSD API.
                
        """
        return self._group_key_default_sek_lifetime

    def _set_group_key_default_sek_lifetime(self, value):
        """ Set group_key_default_sek_lifetime value.

            Notes:
                Group Key Encryption Profile Default SEK Lifetime

                
                This attribute is named `groupKeyDefaultSEKLifetime` in VSD API.
                
        """
        self._group_key_default_sek_lifetime = value

    group_key_default_sek_lifetime = property(_get_group_key_default_sek_lifetime, _set_group_key_default_sek_lifetime)
    
    def _get_group_key_default_sek_payload_encryption_algorithm(self):
        """ Get group_key_default_sek_payload_encryption_algorithm value.

            Notes:
                Group Key Encryption Profile Default Sek Payload Encryption Algorithm Possible values are RSA_1024, .

                
                This attribute is named `groupKeyDefaultSEKPayloadEncryptionAlgorithm` in VSD API.
                
        """
        return self._group_key_default_sek_payload_encryption_algorithm

    def _set_group_key_default_sek_payload_encryption_algorithm(self, value):
        """ Set group_key_default_sek_payload_encryption_algorithm value.

            Notes:
                Group Key Encryption Profile Default Sek Payload Encryption Algorithm Possible values are RSA_1024, .

                
                This attribute is named `groupKeyDefaultSEKPayloadEncryptionAlgorithm` in VSD API.
                
        """
        self._group_key_default_sek_payload_encryption_algorithm = value

    group_key_default_sek_payload_encryption_algorithm = property(_get_group_key_default_sek_payload_encryption_algorithm, _set_group_key_default_sek_payload_encryption_algorithm)
    
    def _get_group_key_default_sek_payload_signing_algorithm(self):
        """ Get group_key_default_sek_payload_signing_algorithm value.

            Notes:
                Group Key Encryption Profile Default Sek Payload Signing Algorithm Possible values are SHA1withRSA, SHA224withRSA, SHA256withRSA, SHA384withRSA, SHA512withRSA, .

                
                This attribute is named `groupKeyDefaultSEKPayloadSigningAlgorithm` in VSD API.
                
        """
        return self._group_key_default_sek_payload_signing_algorithm

    def _set_group_key_default_sek_payload_signing_algorithm(self, value):
        """ Set group_key_default_sek_payload_signing_algorithm value.

            Notes:
                Group Key Encryption Profile Default Sek Payload Signing Algorithm Possible values are SHA1withRSA, SHA224withRSA, SHA256withRSA, SHA384withRSA, SHA512withRSA, .

                
                This attribute is named `groupKeyDefaultSEKPayloadSigningAlgorithm` in VSD API.
                
        """
        self._group_key_default_sek_payload_signing_algorithm = value

    group_key_default_sek_payload_signing_algorithm = property(_get_group_key_default_sek_payload_signing_algorithm, _set_group_key_default_sek_payload_signing_algorithm)
    
    def _get_group_key_default_traffic_authentication_algorithm(self):
        """ Get group_key_default_traffic_authentication_algorithm value.

            Notes:
                Group Key Encryption Profile Default Traffic Authentication Algorithm Possible values are HMAC_SHA1, HMAC_SHA256, HMAC_SHA384, HMAC_SHA512, HMAC_MD5, .

                
                This attribute is named `groupKeyDefaultTrafficAuthenticationAlgorithm` in VSD API.
                
        """
        return self._group_key_default_traffic_authentication_algorithm

    def _set_group_key_default_traffic_authentication_algorithm(self, value):
        """ Set group_key_default_traffic_authentication_algorithm value.

            Notes:
                Group Key Encryption Profile Default Traffic Authentication Algorithm Possible values are HMAC_SHA1, HMAC_SHA256, HMAC_SHA384, HMAC_SHA512, HMAC_MD5, .

                
                This attribute is named `groupKeyDefaultTrafficAuthenticationAlgorithm` in VSD API.
                
        """
        self._group_key_default_traffic_authentication_algorithm = value

    group_key_default_traffic_authentication_algorithm = property(_get_group_key_default_traffic_authentication_algorithm, _set_group_key_default_traffic_authentication_algorithm)
    
    def _get_group_key_default_traffic_encryption_algorithm(self):
        """ Get group_key_default_traffic_encryption_algorithm value.

            Notes:
                Group Key Encryption Profile Default Traffic Encryption Algorithm Possible values are AES_128_CBC, AES_192_CBC, AES_256_CBC, TRIPLE_DES_CBC, .

                
                This attribute is named `groupKeyDefaultTrafficEncryptionAlgorithm` in VSD API.
                
        """
        return self._group_key_default_traffic_encryption_algorithm

    def _set_group_key_default_traffic_encryption_algorithm(self, value):
        """ Set group_key_default_traffic_encryption_algorithm value.

            Notes:
                Group Key Encryption Profile Default Traffic Encryption Algorithm Possible values are AES_128_CBC, AES_192_CBC, AES_256_CBC, TRIPLE_DES_CBC, .

                
                This attribute is named `groupKeyDefaultTrafficEncryptionAlgorithm` in VSD API.
                
        """
        self._group_key_default_traffic_encryption_algorithm = value

    group_key_default_traffic_encryption_algorithm = property(_get_group_key_default_traffic_encryption_algorithm, _set_group_key_default_traffic_encryption_algorithm)
    
    def _get_group_key_default_traffic_encryption_key_lifetime(self):
        """ Get group_key_default_traffic_encryption_key_lifetime value.

            Notes:
                Group Key Encryption Profile Default Traffic Encryption Key Lifetime

                
                This attribute is named `groupKeyDefaultTrafficEncryptionKeyLifetime` in VSD API.
                
        """
        return self._group_key_default_traffic_encryption_key_lifetime

    def _set_group_key_default_traffic_encryption_key_lifetime(self, value):
        """ Set group_key_default_traffic_encryption_key_lifetime value.

            Notes:
                Group Key Encryption Profile Default Traffic Encryption Key Lifetime

                
                This attribute is named `groupKeyDefaultTrafficEncryptionKeyLifetime` in VSD API.
                
        """
        self._group_key_default_traffic_encryption_key_lifetime = value

    group_key_default_traffic_encryption_key_lifetime = property(_get_group_key_default_traffic_encryption_key_lifetime, _set_group_key_default_traffic_encryption_key_lifetime)
    
    def _get_group_key_generation_interval_on_forced_re_key(self):
        """ Get group_key_generation_interval_on_forced_re_key value.

            Notes:
                Time in seconds before new keys will be generated in the case of a forced re-key event

                
                This attribute is named `groupKeyGenerationIntervalOnForcedReKey` in VSD API.
                
        """
        return self._group_key_generation_interval_on_forced_re_key

    def _set_group_key_generation_interval_on_forced_re_key(self, value):
        """ Set group_key_generation_interval_on_forced_re_key value.

            Notes:
                Time in seconds before new keys will be generated in the case of a forced re-key event

                
                This attribute is named `groupKeyGenerationIntervalOnForcedReKey` in VSD API.
                
        """
        self._group_key_generation_interval_on_forced_re_key = value

    group_key_generation_interval_on_forced_re_key = property(_get_group_key_generation_interval_on_forced_re_key, _set_group_key_generation_interval_on_forced_re_key)
    
    def _get_group_key_generation_interval_on_revoke(self):
        """ Get group_key_generation_interval_on_revoke value.

            Notes:
                Time in seconds before new keys will be generated in the case of a revoke event

                
                This attribute is named `groupKeyGenerationIntervalOnRevoke` in VSD API.
                
        """
        return self._group_key_generation_interval_on_revoke

    def _set_group_key_generation_interval_on_revoke(self, value):
        """ Set group_key_generation_interval_on_revoke value.

            Notes:
                Time in seconds before new keys will be generated in the case of a revoke event

                
                This attribute is named `groupKeyGenerationIntervalOnRevoke` in VSD API.
                
        """
        self._group_key_generation_interval_on_revoke = value

    group_key_generation_interval_on_revoke = property(_get_group_key_generation_interval_on_revoke, _set_group_key_generation_interval_on_revoke)
    
    def _get_group_key_minimum_seed_generation_interval(self):
        """ Get group_key_minimum_seed_generation_interval value.

            Notes:
                Group Key Encryption Profile Default Seed Generation Interval

                
                This attribute is named `groupKeyMinimumSeedGenerationInterval` in VSD API.
                
        """
        return self._group_key_minimum_seed_generation_interval

    def _set_group_key_minimum_seed_generation_interval(self, value):
        """ Set group_key_minimum_seed_generation_interval value.

            Notes:
                Group Key Encryption Profile Default Seed Generation Interval

                
                This attribute is named `groupKeyMinimumSeedGenerationInterval` in VSD API.
                
        """
        self._group_key_minimum_seed_generation_interval = value

    group_key_minimum_seed_generation_interval = property(_get_group_key_minimum_seed_generation_interval, _set_group_key_minimum_seed_generation_interval)
    
    def _get_group_key_minimum_seed_lifetime(self):
        """ Get group_key_minimum_seed_lifetime value.

            Notes:
                Group Key Encryption Profile Default Seed Lifetime

                
                This attribute is named `groupKeyMinimumSeedLifetime` in VSD API.
                
        """
        return self._group_key_minimum_seed_lifetime

    def _set_group_key_minimum_seed_lifetime(self, value):
        """ Set group_key_minimum_seed_lifetime value.

            Notes:
                Group Key Encryption Profile Default Seed Lifetime

                
                This attribute is named `groupKeyMinimumSeedLifetime` in VSD API.
                
        """
        self._group_key_minimum_seed_lifetime = value

    group_key_minimum_seed_lifetime = property(_get_group_key_minimum_seed_lifetime, _set_group_key_minimum_seed_lifetime)
    
    def _get_group_key_minimum_sek_generation_interval(self):
        """ Get group_key_minimum_sek_generation_interval value.

            Notes:
                Group Key Encryption Profile Minimum SEK Generation Interval

                
                This attribute is named `groupKeyMinimumSEKGenerationInterval` in VSD API.
                
        """
        return self._group_key_minimum_sek_generation_interval

    def _set_group_key_minimum_sek_generation_interval(self, value):
        """ Set group_key_minimum_sek_generation_interval value.

            Notes:
                Group Key Encryption Profile Minimum SEK Generation Interval

                
                This attribute is named `groupKeyMinimumSEKGenerationInterval` in VSD API.
                
        """
        self._group_key_minimum_sek_generation_interval = value

    group_key_minimum_sek_generation_interval = property(_get_group_key_minimum_sek_generation_interval, _set_group_key_minimum_sek_generation_interval)
    
    def _get_group_key_minimum_sek_lifetime(self):
        """ Get group_key_minimum_sek_lifetime value.

            Notes:
                Group Key Encryption Profile Minimum SEK Lifetime

                
                This attribute is named `groupKeyMinimumSEKLifetime` in VSD API.
                
        """
        return self._group_key_minimum_sek_lifetime

    def _set_group_key_minimum_sek_lifetime(self, value):
        """ Set group_key_minimum_sek_lifetime value.

            Notes:
                Group Key Encryption Profile Minimum SEK Lifetime

                
                This attribute is named `groupKeyMinimumSEKLifetime` in VSD API.
                
        """
        self._group_key_minimum_sek_lifetime = value

    group_key_minimum_sek_lifetime = property(_get_group_key_minimum_sek_lifetime, _set_group_key_minimum_sek_lifetime)
    
    def _get_group_key_minimum_traffic_encryption_key_lifetime(self):
        """ Get group_key_minimum_traffic_encryption_key_lifetime value.

            Notes:
                Group Key Encryption Profile Minimum TEK Lifetime

                
                This attribute is named `groupKeyMinimumTrafficEncryptionKeyLifetime` in VSD API.
                
        """
        return self._group_key_minimum_traffic_encryption_key_lifetime

    def _set_group_key_minimum_traffic_encryption_key_lifetime(self, value):
        """ Set group_key_minimum_traffic_encryption_key_lifetime value.

            Notes:
                Group Key Encryption Profile Minimum TEK Lifetime

                
                This attribute is named `groupKeyMinimumTrafficEncryptionKeyLifetime` in VSD API.
                
        """
        self._group_key_minimum_traffic_encryption_key_lifetime = value

    group_key_minimum_traffic_encryption_key_lifetime = property(_get_group_key_minimum_traffic_encryption_key_lifetime, _set_group_key_minimum_traffic_encryption_key_lifetime)
    
    def _get_inactive_timeout(self):
        """ Get inactive_timeout value.

            Notes:
                Defines the inactive timeout for the client. If the client is inactive for more than timeout, server clears off all the cache/information regarding the client. This value should be greater than event processor max timeout

                
                This attribute is named `inactiveTimeout` in VSD API.
                
        """
        return self._inactive_timeout

    def _set_inactive_timeout(self, value):
        """ Set inactive_timeout value.

            Notes:
                Defines the inactive timeout for the client. If the client is inactive for more than timeout, server clears off all the cache/information regarding the client. This value should be greater than event processor max timeout

                
                This attribute is named `inactiveTimeout` in VSD API.
                
        """
        self._inactive_timeout = value

    inactive_timeout = property(_get_inactive_timeout, _set_inactive_timeout)
    
    def _get_key_server_monitor_enabled(self):
        """ Get key_server_monitor_enabled value.

            Notes:
                Enable the keyserver debug monitor (ie. ksmon command)

                
                This attribute is named `keyServerMonitorEnabled` in VSD API.
                
        """
        return self._key_server_monitor_enabled

    def _set_key_server_monitor_enabled(self, value):
        """ Set key_server_monitor_enabled value.

            Notes:
                Enable the keyserver debug monitor (ie. ksmon command)

                
                This attribute is named `keyServerMonitorEnabled` in VSD API.
                
        """
        self._key_server_monitor_enabled = value

    key_server_monitor_enabled = property(_get_key_server_monitor_enabled, _set_key_server_monitor_enabled)
    
    def _get_key_server_vsd_data_synchronization_interval(self):
        """ Get key_server_vsd_data_synchronization_interval value.

            Notes:
                KeyServer time in seconds between full resyncs of VSD data (just in case of missed events)

                
                This attribute is named `keyServerVSDDataSynchronizationInterval` in VSD API.
                
        """
        return self._key_server_vsd_data_synchronization_interval

    def _set_key_server_vsd_data_synchronization_interval(self, value):
        """ Set key_server_vsd_data_synchronization_interval value.

            Notes:
                KeyServer time in seconds between full resyncs of VSD data (just in case of missed events)

                
                This attribute is named `keyServerVSDDataSynchronizationInterval` in VSD API.
                
        """
        self._key_server_vsd_data_synchronization_interval = value

    key_server_vsd_data_synchronization_interval = property(_get_key_server_vsd_data_synchronization_interval, _set_key_server_vsd_data_synchronization_interval)
    
    def _get_ldap_sync_interval(self):
        """ Get ldap_sync_interval value.

            Notes:
                LDAP Sync-Up task interval in seconds(min=600, max=86400).

                
                This attribute is named `ldapSyncInterval` in VSD API.
                
        """
        return self._ldap_sync_interval

    def _set_ldap_sync_interval(self, value):
        """ Set ldap_sync_interval value.

            Notes:
                LDAP Sync-Up task interval in seconds(min=600, max=86400).

                
                This attribute is named `ldapSyncInterval` in VSD API.
                
        """
        self._ldap_sync_interval = value

    ldap_sync_interval = property(_get_ldap_sync_interval, _set_ldap_sync_interval)
    
    def _get_ldap_trust_store_certifcate(self):
        """ Get ldap_trust_store_certifcate value.

            Notes:
                Location of the truststore which is need to store LDAP server certificates. Default is cacerts located in java.home/lib/security/cacerts. Uncomment below setting if you need to use a different file

                
                This attribute is named `LDAPTrustStoreCertifcate` in VSD API.
                
        """
        return self._ldap_trust_store_certifcate

    def _set_ldap_trust_store_certifcate(self, value):
        """ Set ldap_trust_store_certifcate value.

            Notes:
                Location of the truststore which is need to store LDAP server certificates. Default is cacerts located in java.home/lib/security/cacerts. Uncomment below setting if you need to use a different file

                
                This attribute is named `LDAPTrustStoreCertifcate` in VSD API.
                
        """
        self._ldap_trust_store_certifcate = value

    ldap_trust_store_certifcate = property(_get_ldap_trust_store_certifcate, _set_ldap_trust_store_certifcate)
    
    def _get_ldap_trust_store_password(self):
        """ Get ldap_trust_store_password value.

            Notes:
                Password to access the truststore. Uncomment below line to change its value.

                
                This attribute is named `LDAPTrustStorePassword` in VSD API.
                
        """
        return self._ldap_trust_store_password

    def _set_ldap_trust_store_password(self, value):
        """ Set ldap_trust_store_password value.

            Notes:
                Password to access the truststore. Uncomment below line to change its value.

                
                This attribute is named `LDAPTrustStorePassword` in VSD API.
                
        """
        self._ldap_trust_store_password = value

    ldap_trust_store_password = property(_get_ldap_trust_store_password, _set_ldap_trust_store_password)
    
    def _get_lru_cache_size_per_subnet(self):
        """ Get lru_cache_size_per_subnet value.

            Notes:
                LRU Map size per subnet ( to hold the deleted vm's ip addresses min =32, max 256).

                
                This attribute is named `LRUCacheSizePerSubnet` in VSD API.
                
        """
        return self._lru_cache_size_per_subnet

    def _set_lru_cache_size_per_subnet(self, value):
        """ Set lru_cache_size_per_subnet value.

            Notes:
                LRU Map size per subnet ( to hold the deleted vm's ip addresses min =32, max 256).

                
                This attribute is named `LRUCacheSizePerSubnet` in VSD API.
                
        """
        self._lru_cache_size_per_subnet = value

    lru_cache_size_per_subnet = property(_get_lru_cache_size_per_subnet, _set_lru_cache_size_per_subnet)
    
    def _get_max_failed_login_attempts(self):
        """ Get max_failed_login_attempts value.

            Notes:
                Maximum failed login attempts before the account is locked (min = 5, max = 10). 0 = not enforced (unlimited attempts). This is not enforced if LDAP is used for authorization

                
                This attribute is named `maxFailedLoginAttempts` in VSD API.
                
        """
        return self._max_failed_login_attempts

    def _set_max_failed_login_attempts(self, value):
        """ Set max_failed_login_attempts value.

            Notes:
                Maximum failed login attempts before the account is locked (min = 5, max = 10). 0 = not enforced (unlimited attempts). This is not enforced if LDAP is used for authorization

                
                This attribute is named `maxFailedLoginAttempts` in VSD API.
                
        """
        self._max_failed_login_attempts = value

    max_failed_login_attempts = property(_get_max_failed_login_attempts, _set_max_failed_login_attempts)
    
    def _get_max_response(self):
        """ Get max_response value.

            Notes:
                Defines maximum results returned by the REST call (allowed max=5000).

                
                This attribute is named `maxResponse` in VSD API.
                
        """
        return self._max_response

    def _set_max_response(self, value):
        """ Set max_response value.

            Notes:
                Defines maximum results returned by the REST call (allowed max=5000).

                
                This attribute is named `maxResponse` in VSD API.
                
        """
        self._max_response = value

    max_response = property(_get_max_response, _set_max_response)
    
    def _get_nsg_bootstrap_endpoint(self):
        """ Get nsg_bootstrap_endpoint value.

            Notes:
                NSG Bootstrap Endpoint

                
                This attribute is named `nsgBootstrapEndpoint` in VSD API.
                
        """
        return self._nsg_bootstrap_endpoint

    def _set_nsg_bootstrap_endpoint(self, value):
        """ Set nsg_bootstrap_endpoint value.

            Notes:
                NSG Bootstrap Endpoint

                
                This attribute is named `nsgBootstrapEndpoint` in VSD API.
                
        """
        self._nsg_bootstrap_endpoint = value

    nsg_bootstrap_endpoint = property(_get_nsg_bootstrap_endpoint, _set_nsg_bootstrap_endpoint)
    
    def _get_nsg_config_endpoint(self):
        """ Get nsg_config_endpoint value.

            Notes:
                NSG Config Endpoint

                
                This attribute is named `nsgConfigEndpoint` in VSD API.
                
        """
        return self._nsg_config_endpoint

    def _set_nsg_config_endpoint(self, value):
        """ Set nsg_config_endpoint value.

            Notes:
                NSG Config Endpoint

                
                This attribute is named `nsgConfigEndpoint` in VSD API.
                
        """
        self._nsg_config_endpoint = value

    nsg_config_endpoint = property(_get_nsg_config_endpoint, _set_nsg_config_endpoint)
    
    def _get_nsg_local_ui_url(self):
        """ Get nsg_local_ui_url value.

            Notes:
                NSG Local UI URL - will be redirected on NSG to localhost

                
                This attribute is named `nsgLocalUiUrl` in VSD API.
                
        """
        return self._nsg_local_ui_url

    def _set_nsg_local_ui_url(self, value):
        """ Set nsg_local_ui_url value.

            Notes:
                NSG Local UI URL - will be redirected on NSG to localhost

                
                This attribute is named `nsgLocalUiUrl` in VSD API.
                
        """
        self._nsg_local_ui_url = value

    nsg_local_ui_url = property(_get_nsg_local_ui_url, _set_nsg_local_ui_url)
    
    def _get_offset_customer_id(self):
        """ Get offset_customer_id value.

            Notes:
                Customer id offset, this value has to be set before jboss starts , after that any change of value is ignored (minexclusive = 0, max = 20000) system wide value

                
                This attribute is named `offsetCustomerID` in VSD API.
                
        """
        return self._offset_customer_id

    def _set_offset_customer_id(self, value):
        """ Set offset_customer_id value.

            Notes:
                Customer id offset, this value has to be set before jboss starts , after that any change of value is ignored (minexclusive = 0, max = 20000) system wide value

                
                This attribute is named `offsetCustomerID` in VSD API.
                
        """
        self._offset_customer_id = value

    offset_customer_id = property(_get_offset_customer_id, _set_offset_customer_id)
    
    def _get_offset_service_id(self):
        """ Get offset_service_id value.

            Notes:
                Service id offset, this value has to be set before jboss starts during install time, after that any change of value is ignored (minexclusive = 0, max = 40000) system wide value

                
                This attribute is named `offsetServiceID` in VSD API.
                
        """
        return self._offset_service_id

    def _set_offset_service_id(self, value):
        """ Set offset_service_id value.

            Notes:
                Service id offset, this value has to be set before jboss starts during install time, after that any change of value is ignored (minexclusive = 0, max = 40000) system wide value

                
                This attribute is named `offsetServiceID` in VSD API.
                
        """
        self._offset_service_id = value

    offset_service_id = property(_get_offset_service_id, _set_offset_service_id)
    
    def _get_page_max_size(self):
        """ Get page_max_size value.

            Notes:
                Defines upper bound for the page size (allowed max=1000). Configured or input page size should be less than this max page size.

                
                This attribute is named `pageMaxSize` in VSD API.
                
        """
        return self._page_max_size

    def _set_page_max_size(self, value):
        """ Set page_max_size value.

            Notes:
                Defines upper bound for the page size (allowed max=1000). Configured or input page size should be less than this max page size.

                
                This attribute is named `pageMaxSize` in VSD API.
                
        """
        self._page_max_size = value

    page_max_size = property(_get_page_max_size, _set_page_max_size)
    
    def _get_page_size(self):
        """ Get page_size value.

            Notes:
                Defines the page size for the results returned by the REST call.

                
                This attribute is named `pageSize` in VSD API.
                
        """
        return self._page_size

    def _set_page_size(self, value):
        """ Set page_size value.

            Notes:
                Defines the page size for the results returned by the REST call.

                
                This attribute is named `pageSize` in VSD API.
                
        """
        self._page_size = value

    page_size = property(_get_page_size, _set_page_size)
    
    def _get_post_processor_threads_count(self):
        """ Get post_processor_threads_count value.

            Notes:
                Post processor thread count.

                
                This attribute is named `postProcessorThreadsCount` in VSD API.
                
        """
        return self._post_processor_threads_count

    def _set_post_processor_threads_count(self, value):
        """ Set post_processor_threads_count value.

            Notes:
                Post processor thread count.

                
                This attribute is named `postProcessorThreadsCount` in VSD API.
                
        """
        self._post_processor_threads_count = value

    post_processor_threads_count = property(_get_post_processor_threads_count, _set_post_processor_threads_count)
    
    def _get_rd_lower_limit(self):
        """ Get rd_lower_limit value.

            Notes:
                route distinguisher lower limit

                
                This attribute is named `RDLowerLimit` in VSD API.
                
        """
        return self._rd_lower_limit

    def _set_rd_lower_limit(self, value):
        """ Set rd_lower_limit value.

            Notes:
                route distinguisher lower limit

                
                This attribute is named `RDLowerLimit` in VSD API.
                
        """
        self._rd_lower_limit = value

    rd_lower_limit = property(_get_rd_lower_limit, _set_rd_lower_limit)
    
    def _get_rd_public_network_lower_limit(self):
        """ Get rd_public_network_lower_limit value.

            Notes:
                route distinguisher public network lower limit

                
                This attribute is named `RDPublicNetworkLowerLimit` in VSD API.
                
        """
        return self._rd_public_network_lower_limit

    def _set_rd_public_network_lower_limit(self, value):
        """ Set rd_public_network_lower_limit value.

            Notes:
                route distinguisher public network lower limit

                
                This attribute is named `RDPublicNetworkLowerLimit` in VSD API.
                
        """
        self._rd_public_network_lower_limit = value

    rd_public_network_lower_limit = property(_get_rd_public_network_lower_limit, _set_rd_public_network_lower_limit)
    
    def _get_rd_public_network_upper_limit(self):
        """ Get rd_public_network_upper_limit value.

            Notes:
                route distinguisher public network upper limit

                
                This attribute is named `RDPublicNetworkUpperLimit` in VSD API.
                
        """
        return self._rd_public_network_upper_limit

    def _set_rd_public_network_upper_limit(self, value):
        """ Set rd_public_network_upper_limit value.

            Notes:
                route distinguisher public network upper limit

                
                This attribute is named `RDPublicNetworkUpperLimit` in VSD API.
                
        """
        self._rd_public_network_upper_limit = value

    rd_public_network_upper_limit = property(_get_rd_public_network_upper_limit, _set_rd_public_network_upper_limit)
    
    def _get_rd_upper_limit(self):
        """ Get rd_upper_limit value.

            Notes:
                route distinguisher upper limit

                
                This attribute is named `RDUpperLimit` in VSD API.
                
        """
        return self._rd_upper_limit

    def _set_rd_upper_limit(self, value):
        """ Set rd_upper_limit value.

            Notes:
                route distinguisher upper limit

                
                This attribute is named `RDUpperLimit` in VSD API.
                
        """
        self._rd_upper_limit = value

    rd_upper_limit = property(_get_rd_upper_limit, _set_rd_upper_limit)
    
    def _get_reflexive_acl_timeout(self):
        """ Get reflexive_acl_timeout value.

            Notes:
                Defines the timeout in seconds for reflexive ACLs. This value applies for both TCP and UDP connections. Default value is 180 seconds and the timeout should be between 10 to 86400 seconds.

                
                This attribute is named `reflexiveACLTimeout` in VSD API.
                
        """
        return self._reflexive_acl_timeout

    def _set_reflexive_acl_timeout(self, value):
        """ Set reflexive_acl_timeout value.

            Notes:
                Defines the timeout in seconds for reflexive ACLs. This value applies for both TCP and UDP connections. Default value is 180 seconds and the timeout should be between 10 to 86400 seconds.

                
                This attribute is named `reflexiveACLTimeout` in VSD API.
                
        """
        self._reflexive_acl_timeout = value

    reflexive_acl_timeout = property(_get_reflexive_acl_timeout, _set_reflexive_acl_timeout)
    
    def _get_rt_lower_limit(self):
        """ Get rt_lower_limit value.

            Notes:
                route target lower limit

                
                This attribute is named `RTLowerLimit` in VSD API.
                
        """
        return self._rt_lower_limit

    def _set_rt_lower_limit(self, value):
        """ Set rt_lower_limit value.

            Notes:
                route target lower limit

                
                This attribute is named `RTLowerLimit` in VSD API.
                
        """
        self._rt_lower_limit = value

    rt_lower_limit = property(_get_rt_lower_limit, _set_rt_lower_limit)
    
    def _get_rt_public_network_lower_limit(self):
        """ Get rt_public_network_lower_limit value.

            Notes:
                route target public network lower limit

                
                This attribute is named `RTPublicNetworkLowerLimit` in VSD API.
                
        """
        return self._rt_public_network_lower_limit

    def _set_rt_public_network_lower_limit(self, value):
        """ Set rt_public_network_lower_limit value.

            Notes:
                route target public network lower limit

                
                This attribute is named `RTPublicNetworkLowerLimit` in VSD API.
                
        """
        self._rt_public_network_lower_limit = value

    rt_public_network_lower_limit = property(_get_rt_public_network_lower_limit, _set_rt_public_network_lower_limit)
    
    def _get_rt_public_network_upper_limit(self):
        """ Get rt_public_network_upper_limit value.

            Notes:
                route target public network upper limit

                
                This attribute is named `RTPublicNetworkUpperLimit` in VSD API.
                
        """
        return self._rt_public_network_upper_limit

    def _set_rt_public_network_upper_limit(self, value):
        """ Set rt_public_network_upper_limit value.

            Notes:
                route target public network upper limit

                
                This attribute is named `RTPublicNetworkUpperLimit` in VSD API.
                
        """
        self._rt_public_network_upper_limit = value

    rt_public_network_upper_limit = property(_get_rt_public_network_upper_limit, _set_rt_public_network_upper_limit)
    
    def _get_rt_upper_limit(self):
        """ Get rt_upper_limit value.

            Notes:
                route target upper limit

                
                This attribute is named `RTUpperLimit` in VSD API.
                
        """
        return self._rt_upper_limit

    def _set_rt_upper_limit(self, value):
        """ Set rt_upper_limit value.

            Notes:
                route target upper limit

                
                This attribute is named `RTUpperLimit` in VSD API.
                
        """
        self._rt_upper_limit = value

    rt_upper_limit = property(_get_rt_upper_limit, _set_rt_upper_limit)
    
    def _get_service_id_upper_limit(self):
        """ Get service_id_upper_limit value.

            Notes:
                Service id upper limit system wide value

                
                This attribute is named `serviceIDUpperLimit` in VSD API.
                
        """
        return self._service_id_upper_limit

    def _set_service_id_upper_limit(self, value):
        """ Set service_id_upper_limit value.

            Notes:
                Service id upper limit system wide value

                
                This attribute is named `serviceIDUpperLimit` in VSD API.
                
        """
        self._service_id_upper_limit = value

    service_id_upper_limit = property(_get_service_id_upper_limit, _set_service_id_upper_limit)
    
    def _get_stack_trace_enabled(self):
        """ Get stack_trace_enabled value.

            Notes:
                True to enable stacktrace in the REST call.

                
                This attribute is named `stackTraceEnabled` in VSD API.
                
        """
        return self._stack_trace_enabled

    def _set_stack_trace_enabled(self, value):
        """ Set stack_trace_enabled value.

            Notes:
                True to enable stacktrace in the REST call.

                
                This attribute is named `stackTraceEnabled` in VSD API.
                
        """
        self._stack_trace_enabled = value

    stack_trace_enabled = property(_get_stack_trace_enabled, _set_stack_trace_enabled)
    
    def _get_static_wan_service_purge_time(self):
        """ Get static_wan_service_purge_time value.

            Notes:
                Timers in sec for unreacheable static WAN Services to be deleted(min =3600, max = 7200)

                
                This attribute is named `staticWANServicePurgeTime` in VSD API.
                
        """
        return self._static_wan_service_purge_time

    def _set_static_wan_service_purge_time(self, value):
        """ Set static_wan_service_purge_time value.

            Notes:
                Timers in sec for unreacheable static WAN Services to be deleted(min =3600, max = 7200)

                
                This attribute is named `staticWANServicePurgeTime` in VSD API.
                
        """
        self._static_wan_service_purge_time = value

    static_wan_service_purge_time = property(_get_static_wan_service_purge_time, _set_static_wan_service_purge_time)
    
    def _get_stats_collector_address(self):
        """ Get stats_collector_address value.

            Notes:
                Specify the ip address(es) of the stats collector.

                
                This attribute is named `statsCollectorAddress` in VSD API.
                
        """
        return self._stats_collector_address

    def _set_stats_collector_address(self, value):
        """ Set stats_collector_address value.

            Notes:
                Specify the ip address(es) of the stats collector.

                
                This attribute is named `statsCollectorAddress` in VSD API.
                
        """
        self._stats_collector_address = value

    stats_collector_address = property(_get_stats_collector_address, _set_stats_collector_address)
    
    def _get_stats_collector_port(self):
        """ Get stats_collector_port value.

            Notes:
                Specify the port number(s) of the stats collector.

                
                This attribute is named `statsCollectorPort` in VSD API.
                
        """
        return self._stats_collector_port

    def _set_stats_collector_port(self, value):
        """ Set stats_collector_port value.

            Notes:
                Specify the port number(s) of the stats collector.

                
                This attribute is named `statsCollectorPort` in VSD API.
                
        """
        self._stats_collector_port = value

    stats_collector_port = property(_get_stats_collector_port, _set_stats_collector_port)
    
    def _get_stats_collector_proto_buf_port(self):
        """ Get stats_collector_proto_buf_port value.

            Notes:
                Specify the protobuf port number(s) of the stats collector.

                
                This attribute is named `statsCollectorProtoBufPort` in VSD API.
                
        """
        return self._stats_collector_proto_buf_port

    def _set_stats_collector_proto_buf_port(self, value):
        """ Set stats_collector_proto_buf_port value.

            Notes:
                Specify the protobuf port number(s) of the stats collector.

                
                This attribute is named `statsCollectorProtoBufPort` in VSD API.
                
        """
        self._stats_collector_proto_buf_port = value

    stats_collector_proto_buf_port = property(_get_stats_collector_proto_buf_port, _set_stats_collector_proto_buf_port)
    
    def _get_stats_max_data_points(self):
        """ Get stats_max_data_points value.

            Notes:
                Specifies the maximum number of data points to support.

                
                This attribute is named `statsMaxDataPoints` in VSD API.
                
        """
        return self._stats_max_data_points

    def _set_stats_max_data_points(self, value):
        """ Set stats_max_data_points value.

            Notes:
                Specifies the maximum number of data points to support.

                
                This attribute is named `statsMaxDataPoints` in VSD API.
                
        """
        self._stats_max_data_points = value

    stats_max_data_points = property(_get_stats_max_data_points, _set_stats_max_data_points)
    
    def _get_stats_min_duration(self):
        """ Get stats_min_duration value.

            Notes:
                Default minimum duration for statistics to be displayed in UI is 30 days in seconds.

                
                This attribute is named `statsMinDuration` in VSD API.
                
        """
        return self._stats_min_duration

    def _set_stats_min_duration(self, value):
        """ Set stats_min_duration value.

            Notes:
                Default minimum duration for statistics to be displayed in UI is 30 days in seconds.

                
                This attribute is named `statsMinDuration` in VSD API.
                
        """
        self._stats_min_duration = value

    stats_min_duration = property(_get_stats_min_duration, _set_stats_min_duration)
    
    def _get_stats_number_of_data_points(self):
        """ Get stats_number_of_data_points value.

            Notes:
                Specifies number of data points.

                
                This attribute is named `statsNumberOfDataPoints` in VSD API.
                
        """
        return self._stats_number_of_data_points

    def _set_stats_number_of_data_points(self, value):
        """ Set stats_number_of_data_points value.

            Notes:
                Specifies number of data points.

                
                This attribute is named `statsNumberOfDataPoints` in VSD API.
                
        """
        self._stats_number_of_data_points = value

    stats_number_of_data_points = property(_get_stats_number_of_data_points, _set_stats_number_of_data_points)
    
    def _get_stats_tsdb_server_address(self):
        """ Get stats_tsdb_server_address value.

            Notes:
                Specifies the TSDB server location.

                
                This attribute is named `statsTSDBServerAddress` in VSD API.
                
        """
        return self._stats_tsdb_server_address

    def _set_stats_tsdb_server_address(self, value):
        """ Set stats_tsdb_server_address value.

            Notes:
                Specifies the TSDB server location.

                
                This attribute is named `statsTSDBServerAddress` in VSD API.
                
        """
        self._stats_tsdb_server_address = value

    stats_tsdb_server_address = property(_get_stats_tsdb_server_address, _set_stats_tsdb_server_address)
    
    def _get_subnet_resync_interval(self):
        """ Get subnet_resync_interval value.

            Notes:
                After resync on a subnet , another resync on the same subnet is allowed based on the below value subnet resync complete wait time in min (min = 5, max =15)

                
                This attribute is named `subnetResyncInterval` in VSD API.
                
        """
        return self._subnet_resync_interval

    def _set_subnet_resync_interval(self, value):
        """ Set subnet_resync_interval value.

            Notes:
                After resync on a subnet , another resync on the same subnet is allowed based on the below value subnet resync complete wait time in min (min = 5, max =15)

                
                This attribute is named `subnetResyncInterval` in VSD API.
                
        """
        self._subnet_resync_interval = value

    subnet_resync_interval = property(_get_subnet_resync_interval, _set_subnet_resync_interval)
    
    def _get_subnet_resync_outstanding_interval(self):
        """ Get subnet_resync_outstanding_interval value.

            Notes:
                Outstanding subnet resync interval (in secs). (min = 10, max = 50) system wide value

                
                This attribute is named `subnetResyncOutstandingInterval` in VSD API.
                
        """
        return self._subnet_resync_outstanding_interval

    def _set_subnet_resync_outstanding_interval(self, value):
        """ Set subnet_resync_outstanding_interval value.

            Notes:
                Outstanding subnet resync interval (in secs). (min = 10, max = 50) system wide value

                
                This attribute is named `subnetResyncOutstandingInterval` in VSD API.
                
        """
        self._subnet_resync_outstanding_interval = value

    subnet_resync_outstanding_interval = property(_get_subnet_resync_outstanding_interval, _set_subnet_resync_outstanding_interval)
    
    def _get_syslog_destination_host(self):
        """ Get syslog_destination_host value.

            Notes:
                Specifies the remote syslog destination host

                
                This attribute is named `syslogDestinationHost` in VSD API.
                
        """
        return self._syslog_destination_host

    def _set_syslog_destination_host(self, value):
        """ Set syslog_destination_host value.

            Notes:
                Specifies the remote syslog destination host

                
                This attribute is named `syslogDestinationHost` in VSD API.
                
        """
        self._syslog_destination_host = value

    syslog_destination_host = property(_get_syslog_destination_host, _set_syslog_destination_host)
    
    def _get_syslog_destination_port(self):
        """ Get syslog_destination_port value.

            Notes:
                Specified the remote syslog destination port

                
                This attribute is named `syslogDestinationPort` in VSD API.
                
        """
        return self._syslog_destination_port

    def _set_syslog_destination_port(self, value):
        """ Set syslog_destination_port value.

            Notes:
                Specified the remote syslog destination port

                
                This attribute is named `syslogDestinationPort` in VSD API.
                
        """
        self._syslog_destination_port = value

    syslog_destination_port = property(_get_syslog_destination_port, _set_syslog_destination_port)
    
    def _get_sysmon_cleanup_task_interval(self):
        """ Get sysmon_cleanup_task_interval value.

            Notes:
                Sysmon cleanup task run interval in seconds (Min: 10 secs,  Max: 3600 secs)

                
                This attribute is named `sysmonCleanupTaskInterval` in VSD API.
                
        """
        return self._sysmon_cleanup_task_interval

    def _set_sysmon_cleanup_task_interval(self, value):
        """ Set sysmon_cleanup_task_interval value.

            Notes:
                Sysmon cleanup task run interval in seconds (Min: 10 secs,  Max: 3600 secs)

                
                This attribute is named `sysmonCleanupTaskInterval` in VSD API.
                
        """
        self._sysmon_cleanup_task_interval = value

    sysmon_cleanup_task_interval = property(_get_sysmon_cleanup_task_interval, _set_sysmon_cleanup_task_interval)
    
    def _get_sysmon_node_presence_timeout(self):
        """ Get sysmon_node_presence_timeout value.

            Notes:
                Node presence timeout in seconds if no messages (Min: 600,  Max: 86400)

                
                This attribute is named `sysmonNodePresenceTimeout` in VSD API.
                
        """
        return self._sysmon_node_presence_timeout

    def _set_sysmon_node_presence_timeout(self, value):
        """ Set sysmon_node_presence_timeout value.

            Notes:
                Node presence timeout in seconds if no messages (Min: 600,  Max: 86400)

                
                This attribute is named `sysmonNodePresenceTimeout` in VSD API.
                
        """
        self._sysmon_node_presence_timeout = value

    sysmon_node_presence_timeout = property(_get_sysmon_node_presence_timeout, _set_sysmon_node_presence_timeout)
    
    def _get_sysmon_probe_response_timeout(self):
        """ Get sysmon_probe_response_timeout value.

            Notes:
                Probe response timeout in seconds (Min: 5,  Max: 60)

                
                This attribute is named `sysmonProbeResponseTimeout` in VSD API.
                
        """
        return self._sysmon_probe_response_timeout

    def _set_sysmon_probe_response_timeout(self, value):
        """ Set sysmon_probe_response_timeout value.

            Notes:
                Probe response timeout in seconds (Min: 5,  Max: 60)

                
                This attribute is named `sysmonProbeResponseTimeout` in VSD API.
                
        """
        self._sysmon_probe_response_timeout = value

    sysmon_probe_response_timeout = property(_get_sysmon_probe_response_timeout, _set_sysmon_probe_response_timeout)
    
    def _get_two_factor_code_expiry(self):
        """ Get two_factor_code_expiry value.

            Notes:
                Two Factor Code Expiry in Seconds

                
                This attribute is named `twoFactorCodeExpiry` in VSD API.
                
        """
        return self._two_factor_code_expiry

    def _set_two_factor_code_expiry(self, value):
        """ Set two_factor_code_expiry value.

            Notes:
                Two Factor Code Expiry in Seconds

                
                This attribute is named `twoFactorCodeExpiry` in VSD API.
                
        """
        self._two_factor_code_expiry = value

    two_factor_code_expiry = property(_get_two_factor_code_expiry, _set_two_factor_code_expiry)
    
    def _get_two_factor_code_length(self):
        """ Get two_factor_code_length value.

            Notes:
                Two Factor Code Length

                
                This attribute is named `twoFactorCodeLength` in VSD API.
                
        """
        return self._two_factor_code_length

    def _set_two_factor_code_length(self, value):
        """ Set two_factor_code_length value.

            Notes:
                Two Factor Code Length

                
                This attribute is named `twoFactorCodeLength` in VSD API.
                
        """
        self._two_factor_code_length = value

    two_factor_code_length = property(_get_two_factor_code_length, _set_two_factor_code_length)
    
    def _get_two_factor_code_seed_length(self):
        """ Get two_factor_code_seed_length value.

            Notes:
                Two Factor Seed length in bytes

                
                This attribute is named `twoFactorCodeSeedLength` in VSD API.
                
        """
        return self._two_factor_code_seed_length

    def _set_two_factor_code_seed_length(self, value):
        """ Set two_factor_code_seed_length value.

            Notes:
                Two Factor Seed length in bytes

                
                This attribute is named `twoFactorCodeSeedLength` in VSD API.
                
        """
        self._two_factor_code_seed_length = value

    two_factor_code_seed_length = property(_get_two_factor_code_seed_length, _set_two_factor_code_seed_length)
    
    def _get_vm_cache_size(self):
        """ Get vm_cache_size value.

            Notes:
                LRU Map size for vm (min = 1000, max =100000) this value has to set based on memory given to VSD jvm not finalized.

                
                This attribute is named `VMCacheSize` in VSD API.
                
        """
        return self._vm_cache_size

    def _set_vm_cache_size(self, value):
        """ Set vm_cache_size value.

            Notes:
                LRU Map size for vm (min = 1000, max =100000) this value has to set based on memory given to VSD jvm not finalized.

                
                This attribute is named `VMCacheSize` in VSD API.
                
        """
        self._vm_cache_size = value

    vm_cache_size = property(_get_vm_cache_size, _set_vm_cache_size)
    
    def _get_vm_purge_time(self):
        """ Get vm_purge_time value.

            Notes:
                Timers in sec for undefined vms to be deleted(min =60, max = 600).

                
                This attribute is named `VMPurgeTime` in VSD API.
                
        """
        return self._vm_purge_time

    def _set_vm_purge_time(self, value):
        """ Set vm_purge_time value.

            Notes:
                Timers in sec for undefined vms to be deleted(min =60, max = 600).

                
                This attribute is named `VMPurgeTime` in VSD API.
                
        """
        self._vm_purge_time = value

    vm_purge_time = property(_get_vm_purge_time, _set_vm_purge_time)
    
    def _get_vm_resync_deletion_wait_time(self):
        """ Get vm_resync_deletion_wait_time value.

            Notes:
                After resync on vm , if no controller returns with a VM request with in the below timeframe then it will get deleted deletion wait time in min (min = 1, max =5)

                
                This attribute is named `VMResyncDeletionWaitTime` in VSD API.
                
        """
        return self._vm_resync_deletion_wait_time

    def _set_vm_resync_deletion_wait_time(self, value):
        """ Set vm_resync_deletion_wait_time value.

            Notes:
                After resync on vm , if no controller returns with a VM request with in the below timeframe then it will get deleted deletion wait time in min (min = 1, max =5)

                
                This attribute is named `VMResyncDeletionWaitTime` in VSD API.
                
        """
        self._vm_resync_deletion_wait_time = value

    vm_resync_deletion_wait_time = property(_get_vm_resync_deletion_wait_time, _set_vm_resync_deletion_wait_time)
    
    def _get_vm_resync_outstanding_interval(self):
        """ Get vm_resync_outstanding_interval value.

            Notes:
                Outstanding VM resync interval (in secs). (min = 500, max =2000) system wide value

                
                This attribute is named `VMResyncOutstandingInterval` in VSD API.
                
        """
        return self._vm_resync_outstanding_interval

    def _set_vm_resync_outstanding_interval(self, value):
        """ Set vm_resync_outstanding_interval value.

            Notes:
                Outstanding VM resync interval (in secs). (min = 500, max =2000) system wide value

                
                This attribute is named `VMResyncOutstandingInterval` in VSD API.
                
        """
        self._vm_resync_outstanding_interval = value

    vm_resync_outstanding_interval = property(_get_vm_resync_outstanding_interval, _set_vm_resync_outstanding_interval)
    
    def _get_vm_unreachable_cleanup_time(self):
        """ Get vm_unreachable_cleanup_time value.

            Notes:
                Timers in sec for unreachable VMs for cleanup(min = 3600, max = 86400).

                
                This attribute is named `VMUnreachableCleanupTime` in VSD API.
                
        """
        return self._vm_unreachable_cleanup_time

    def _set_vm_unreachable_cleanup_time(self, value):
        """ Set vm_unreachable_cleanup_time value.

            Notes:
                Timers in sec for unreachable VMs for cleanup(min = 3600, max = 86400).

                
                This attribute is named `VMUnreachableCleanupTime` in VSD API.
                
        """
        self._vm_unreachable_cleanup_time = value

    vm_unreachable_cleanup_time = property(_get_vm_unreachable_cleanup_time, _set_vm_unreachable_cleanup_time)
    
    def _get_vm_unreachable_time(self):
        """ Get vm_unreachable_time value.

            Notes:
                Timers in sec for unreachable VMs (min =1800, max = 7200)

                
                This attribute is named `VMUnreachableTime` in VSD API.
                
        """
        return self._vm_unreachable_time

    def _set_vm_unreachable_time(self, value):
        """ Set vm_unreachable_time value.

            Notes:
                Timers in sec for unreachable VMs (min =1800, max = 7200)

                
                This attribute is named `VMUnreachableTime` in VSD API.
                
        """
        self._vm_unreachable_time = value

    vm_unreachable_time = property(_get_vm_unreachable_time, _set_vm_unreachable_time)
    
    def _get_vnid_lower_limit(self):
        """ Get vnid_lower_limit value.

            Notes:
                Virtual network ID offset

                
                This attribute is named `VNIDLowerLimit` in VSD API.
                
        """
        return self._vnid_lower_limit

    def _set_vnid_lower_limit(self, value):
        """ Set vnid_lower_limit value.

            Notes:
                Virtual network ID offset

                
                This attribute is named `VNIDLowerLimit` in VSD API.
                
        """
        self._vnid_lower_limit = value

    vnid_lower_limit = property(_get_vnid_lower_limit, _set_vnid_lower_limit)
    
    def _get_vnid_public_network_lower_limit(self):
        """ Get vnid_public_network_lower_limit value.

            Notes:
                Virtual network ID public network lower limit

                
                This attribute is named `VNIDPublicNetworkLowerLimit` in VSD API.
                
        """
        return self._vnid_public_network_lower_limit

    def _set_vnid_public_network_lower_limit(self, value):
        """ Set vnid_public_network_lower_limit value.

            Notes:
                Virtual network ID public network lower limit

                
                This attribute is named `VNIDPublicNetworkLowerLimit` in VSD API.
                
        """
        self._vnid_public_network_lower_limit = value

    vnid_public_network_lower_limit = property(_get_vnid_public_network_lower_limit, _set_vnid_public_network_lower_limit)
    
    def _get_vnid_public_network_upper_limit(self):
        """ Get vnid_public_network_upper_limit value.

            Notes:
                Virtual network ID public network upper limit

                
                This attribute is named `VNIDPublicNetworkUpperLimit` in VSD API.
                
        """
        return self._vnid_public_network_upper_limit

    def _set_vnid_public_network_upper_limit(self, value):
        """ Set vnid_public_network_upper_limit value.

            Notes:
                Virtual network ID public network upper limit

                
                This attribute is named `VNIDPublicNetworkUpperLimit` in VSD API.
                
        """
        self._vnid_public_network_upper_limit = value

    vnid_public_network_upper_limit = property(_get_vnid_public_network_upper_limit, _set_vnid_public_network_upper_limit)
    
    def _get_vnid_upper_limit(self):
        """ Get vnid_upper_limit value.

            Notes:
                Virtual network ID upper limit

                
                This attribute is named `VNIDUpperLimit` in VSD API.
                
        """
        return self._vnid_upper_limit

    def _set_vnid_upper_limit(self, value):
        """ Set vnid_upper_limit value.

            Notes:
                Virtual network ID upper limit

                
                This attribute is named `VNIDUpperLimit` in VSD API.
                
        """
        self._vnid_upper_limit = value

    vnid_upper_limit = property(_get_vnid_upper_limit, _set_vnid_upper_limit)
    
    def _get_vsc_on_same_version_as_vsd(self):
        """ Get vsc_on_same_version_as_vsd value.

            Notes:
                This flag is used to indicate that whether VSC is on the same version as VSD or not.

                
                This attribute is named `VSCOnSameVersionAsVSD` in VSD API.
                
        """
        return self._vsc_on_same_version_as_vsd

    def _set_vsc_on_same_version_as_vsd(self, value):
        """ Set vsc_on_same_version_as_vsd value.

            Notes:
                This flag is used to indicate that whether VSC is on the same version as VSD or not.

                
                This attribute is named `VSCOnSameVersionAsVSD` in VSD API.
                
        """
        self._vsc_on_same_version_as_vsd = value

    vsc_on_same_version_as_vsd = property(_get_vsc_on_same_version_as_vsd, _set_vsc_on_same_version_as_vsd)
    
    def _get_vsd_read_only_mode(self):
        """ Get vsd_read_only_mode value.

            Notes:
                True means VSD readonly mode enabled. False means VSD readonly mode disabled

                
                This attribute is named `VSDReadOnlyMode` in VSD API.
                
        """
        return self._vsd_read_only_mode

    def _set_vsd_read_only_mode(self, value):
        """ Set vsd_read_only_mode value.

            Notes:
                True means VSD readonly mode enabled. False means VSD readonly mode disabled

                
                This attribute is named `VSDReadOnlyMode` in VSD API.
                
        """
        self._vsd_read_only_mode = value

    vsd_read_only_mode = property(_get_vsd_read_only_mode, _set_vsd_read_only_mode)
    
    def _get_vsd_upgrade_is_complete(self):
        """ Get vsd_upgrade_is_complete value.

            Notes:
                This flag is used to indicate that whether VSD upgrade is complete,it is expected that csproot will set to true,after VSD upgrade is complete and also making sure that all VSC's audits and Gateway audits with VSD are done

                
                This attribute is named `VSDUpgradeIsComplete` in VSD API.
                
        """
        return self._vsd_upgrade_is_complete

    def _set_vsd_upgrade_is_complete(self, value):
        """ Set vsd_upgrade_is_complete value.

            Notes:
                This flag is used to indicate that whether VSD upgrade is complete,it is expected that csproot will set to true,after VSD upgrade is complete and also making sure that all VSC's audits and Gateway audits with VSD are done

                
                This attribute is named `VSDUpgradeIsComplete` in VSD API.
                
        """
        self._vsd_upgrade_is_complete = value

    vsd_upgrade_is_complete = property(_get_vsd_upgrade_is_complete, _set_vsd_upgrade_is_complete)
    