# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUInfrastructureGatewayProfile(NURESTObject):
    """ Represents a InfrastructureGatewayProfile in the VSD

        Notes:
            Represents Infrastructure Gateway Profile

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUInfrastructureGatewayProfile instead.
    """

    __rest_name__ = u"infrastructuregatewayprofile"
    __resource_name__ = u"infrastructuregatewayprofiles"

    def __init__(self, **kwargs):
        """ Initializes a InfrastructureGatewayProfile instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> infrastructuregatewayprofile = NUInfrastructureGatewayProfile(id=u'xxxx-xxx-xxx-xxx', name=u'InfrastructureGatewayProfile')
                >>> infrastructuregatewayprofile = NUInfrastructureGatewayProfile(data=my_dict)
        """

        super(NUInfrastructureGatewayProfile, self).__init__()

        # Read/Write Attributes
        
        self._active_controller = None
        self._datapath_sync_timeout = None
        self._dead_timer = None
        self._description = None
        self._enterprise_id = None
        self._flow_eviction_threshold = None
        self._metadata_upgrade_path = None
        self._name = None
        self._ntp_server_key = None
        self._ntp_server_key_id = None
        self._probe_interval = None
        self._proxy_dns_name = None
        self._remote_log_dir_path = None
        self._remote_log_mode = None
        self._remote_log_password = None
        self._remote_log_server_address = None
        self._remote_log_server_port = None
        self._remote_log_username = None
        self._standby_controller = None
        self._stats_collector_port = None
        self._system_sync_scheduler = None
        self._system_sync_window = None
        self._upgrade_action = None
        self._use_two_factor = None
        
        self.expose_attribute(local_name=u"active_controller", remote_name=u"activeController", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"datapath_sync_timeout", remote_name=u"datapathSyncTimeout", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"dead_timer", remote_name=u"deadTimer", attribute_type=str, is_required=False, is_unique=False, choices=[u'FIVE_HOURS', u'FOUR_HOURS', u'MAXIMUM_DURATION', u'NONE', u'ONE_HOUR', u'SIX_HOURS', u'TEN_MINUTES', u'THIRTY_MINUTES', u'THREE_HOURS', u'TWO_HOURS'])
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"flow_eviction_threshold", remote_name=u"flowEvictionThreshold", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"metadata_upgrade_path", remote_name=u"metadataUpgradePath", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"ntp_server_key", remote_name=u"NTPServerKey", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ntp_server_key_id", remote_name=u"NTPServerKeyID", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"probe_interval", remote_name=u"probeInterval", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"proxy_dns_name", remote_name=u"proxyDNSName", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"remote_log_dir_path", remote_name=u"remoteLogDirPath", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"remote_log_mode", remote_name=u"remoteLogMode", attribute_type=str, is_required=False, is_unique=False, choices=[u'DISABLED', u'RSYSLOG', u'SCP', u'SFTP'])
        self.expose_attribute(local_name=u"remote_log_password", remote_name=u"remoteLogPassword", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"remote_log_server_address", remote_name=u"remoteLogServerAddress", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"remote_log_server_port", remote_name=u"remoteLogServerPort", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"remote_log_username", remote_name=u"remoteLogUsername", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"standby_controller", remote_name=u"standbyController", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"stats_collector_port", remote_name=u"statsCollectorPort", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"system_sync_scheduler", remote_name=u"systemSyncScheduler", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"system_sync_window", remote_name=u"systemSyncWindow", attribute_type=str, is_required=False, is_unique=False, choices=[u'FIVE_HOURS', u'FOUR_HOURS', u'MAXIMUM_DURATION', u'NONE', u'ONE_HOUR', u'SIX_HOURS', u'TEN_MINUTES', u'THIRTY_MINUTES', u'THREE_HOURS', u'TWO_HOURS'])
        self.expose_attribute(local_name=u"upgrade_action", remote_name=u"upgradeAction", attribute_type=str, is_required=False, is_unique=False, choices=[u'DOWNLOAD_AND_UPGRADE_AT_WINDOW', u'DOWNLOAD_AND_UPGRADE_NOW', u'DOWNLOAD_ONLY', u'NONE', u'UPGRADE_AT_BOOTSTRAPPING', u'UPGRADE_NOW'])
        self.expose_attribute(local_name=u"use_two_factor", remote_name=u"useTwoFactor", attribute_type=bool, is_required=False, is_unique=False)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_active_controller(self):
        """ Get active_controller value.

            Notes:
                VSC Active Controller :  IP Address of the primary VSC system NSG instances associated to this profile will be reaching for.

                
                This attribute is named `activeController` in VSD API.
                
        """
        return self._active_controller

    def _set_active_controller(self, value):
        """ Set active_controller value.

            Notes:
                VSC Active Controller :  IP Address of the primary VSC system NSG instances associated to this profile will be reaching for.

                
                This attribute is named `activeController` in VSD API.
                
        """
        self._active_controller = value

    active_controller = property(_get_active_controller, _set_active_controller)
    
    def _get_datapath_sync_timeout(self):
        """ Get datapath_sync_timeout value.

            Notes:
                Datapath flows sync-time-interval specified in milliseconds (default: 1000)

                
                This attribute is named `datapathSyncTimeout` in VSD API.
                
        """
        return self._datapath_sync_timeout

    def _set_datapath_sync_timeout(self, value):
        """ Set datapath_sync_timeout value.

            Notes:
                Datapath flows sync-time-interval specified in milliseconds (default: 1000)

                
                This attribute is named `datapathSyncTimeout` in VSD API.
                
        """
        self._datapath_sync_timeout = value

    datapath_sync_timeout = property(_get_datapath_sync_timeout, _set_datapath_sync_timeout)
    
    def _get_dead_timer(self):
        """ Get dead_timer value.

            Notes:
                Time, in seconds, allowed for a Gateway to be inactive before the VSD revokes its certificates and marks it as untrusted.  Default value is 1 hour (3600) Possible values are NONE, TEN_MINUTES, THIRTY_MINUTES, ONE_HOUR, TWO_HOURS, THREE_HOURS, FOUR_HOURS, FIVE_HOURS, SIX_HOURS, MAXIMUM_DURATION, .

                
                This attribute is named `deadTimer` in VSD API.
                
        """
        return self._dead_timer

    def _set_dead_timer(self, value):
        """ Set dead_timer value.

            Notes:
                Time, in seconds, allowed for a Gateway to be inactive before the VSD revokes its certificates and marks it as untrusted.  Default value is 1 hour (3600) Possible values are NONE, TEN_MINUTES, THIRTY_MINUTES, ONE_HOUR, TWO_HOURS, THREE_HOURS, FOUR_HOURS, FIVE_HOURS, SIX_HOURS, MAXIMUM_DURATION, .

                
                This attribute is named `deadTimer` in VSD API.
                
        """
        self._dead_timer = value

    dead_timer = property(_get_dead_timer, _set_dead_timer)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                A description of the Profile instance created.

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                A description of the Profile instance created.

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_enterprise_id(self):
        """ Get enterprise_id value.

            Notes:
                Enterprise/Organisation associated with this Profile instance.

                
                This attribute is named `enterpriseID` in VSD API.
                
        """
        return self._enterprise_id

    def _set_enterprise_id(self, value):
        """ Set enterprise_id value.

            Notes:
                Enterprise/Organisation associated with this Profile instance.

                
                This attribute is named `enterpriseID` in VSD API.
                
        """
        self._enterprise_id = value

    enterprise_id = property(_get_enterprise_id, _set_enterprise_id)
    
    def _get_flow_eviction_threshold(self):
        """ Get flow_eviction_threshold value.

            Notes:
                Number of flows at which eviction from kernel flow table will be triggered (default: 2500)

                
                This attribute is named `flowEvictionThreshold` in VSD API.
                
        """
        return self._flow_eviction_threshold

    def _set_flow_eviction_threshold(self, value):
        """ Set flow_eviction_threshold value.

            Notes:
                Number of flows at which eviction from kernel flow table will be triggered (default: 2500)

                
                This attribute is named `flowEvictionThreshold` in VSD API.
                
        """
        self._flow_eviction_threshold = value

    flow_eviction_threshold = property(_get_flow_eviction_threshold, _set_flow_eviction_threshold)
    
    def _get_metadata_upgrade_path(self):
        """ Get metadata_upgrade_path value.

            Notes:
                Path/URL to retrieve the NSG Upgrade information meta data files.  From that meta data, the NSG will be able to retrieve the upgrade package files and perform some validations.  It is expected that the meta data file is in JSON format.  RFC 2616 states that there are no 'official' maximum length for a URL but different browsers and servers have limits.  Our friendly Internet Explorer has a maximum of 'around' 2048 characters, we shall use this as a limit here.

                
                This attribute is named `metadataUpgradePath` in VSD API.
                
        """
        return self._metadata_upgrade_path

    def _set_metadata_upgrade_path(self, value):
        """ Set metadata_upgrade_path value.

            Notes:
                Path/URL to retrieve the NSG Upgrade information meta data files.  From that meta data, the NSG will be able to retrieve the upgrade package files and perform some validations.  It is expected that the meta data file is in JSON format.  RFC 2616 states that there are no 'official' maximum length for a URL but different browsers and servers have limits.  Our friendly Internet Explorer has a maximum of 'around' 2048 characters, we shall use this as a limit here.

                
                This attribute is named `metadataUpgradePath` in VSD API.
                
        """
        self._metadata_upgrade_path = value

    metadata_upgrade_path = property(_get_metadata_upgrade_path, _set_metadata_upgrade_path)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Name of the Infrastructure Profile

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Name of the Infrastructure Profile

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_ntp_server_key(self):
        """ Get ntp_server_key value.

            Notes:
                If set, this represents the security key for the Gateway to communicate with the NTP server (a VSC).

                
                This attribute is named `NTPServerKey` in VSD API.
                
        """
        return self._ntp_server_key

    def _set_ntp_server_key(self, value):
        """ Set ntp_server_key value.

            Notes:
                If set, this represents the security key for the Gateway to communicate with the NTP server (a VSC).

                
                This attribute is named `NTPServerKey` in VSD API.
                
        """
        self._ntp_server_key = value

    ntp_server_key = property(_get_ntp_server_key, _set_ntp_server_key)
    
    def _get_ntp_server_key_id(self):
        """ Get ntp_server_key_id value.

            Notes:
                Correspond to the key ID on the NTP server that matches the ntpServerKey value.  Valid values are from 1 to 255 as specified by SR-OS and 0 to specify unused (VSD/NSG only).

                
                This attribute is named `NTPServerKeyID` in VSD API.
                
        """
        return self._ntp_server_key_id

    def _set_ntp_server_key_id(self, value):
        """ Set ntp_server_key_id value.

            Notes:
                Correspond to the key ID on the NTP server that matches the ntpServerKey value.  Valid values are from 1 to 255 as specified by SR-OS and 0 to specify unused (VSD/NSG only).

                
                This attribute is named `NTPServerKeyID` in VSD API.
                
        """
        self._ntp_server_key_id = value

    ntp_server_key_id = property(_get_ntp_server_key_id, _set_ntp_server_key_id)
    
    def _get_probe_interval(self):
        """ Get probe_interval value.

            Notes:
                Openflow echo timer in millisecond

                
                This attribute is named `probeInterval` in VSD API.
                
        """
        return self._probe_interval

    def _set_probe_interval(self, value):
        """ Set probe_interval value.

            Notes:
                Openflow echo timer in millisecond

                
                This attribute is named `probeInterval` in VSD API.
                
        """
        self._probe_interval = value

    probe_interval = property(_get_probe_interval, _set_probe_interval)
    
    def _get_proxy_dns_name(self):
        """ Get proxy_dns_name value.

            Notes:
                Proxy DNS Name :  DNS Name of the system acting as a proxy between the NSG instances and the VSD.

                
                This attribute is named `proxyDNSName` in VSD API.
                
        """
        return self._proxy_dns_name

    def _set_proxy_dns_name(self, value):
        """ Set proxy_dns_name value.

            Notes:
                Proxy DNS Name :  DNS Name of the system acting as a proxy between the NSG instances and the VSD.

                
                This attribute is named `proxyDNSName` in VSD API.
                
        """
        self._proxy_dns_name = value

    proxy_dns_name = property(_get_proxy_dns_name, _set_proxy_dns_name)
    
    def _get_remote_log_dir_path(self):
        """ Get remote_log_dir_path value.

            Notes:
                Path on the remote log server where the logs generated by the NSG are to be stored.  This field is only useful for SCP and SFTP.

                
                This attribute is named `remoteLogDirPath` in VSD API.
                
        """
        return self._remote_log_dir_path

    def _set_remote_log_dir_path(self, value):
        """ Set remote_log_dir_path value.

            Notes:
                Path on the remote log server where the logs generated by the NSG are to be stored.  This field is only useful for SCP and SFTP.

                
                This attribute is named `remoteLogDirPath` in VSD API.
                
        """
        self._remote_log_dir_path = value

    remote_log_dir_path = property(_get_remote_log_dir_path, _set_remote_log_dir_path)
    
    def _get_remote_log_mode(self):
        """ Get remote_log_mode value.

            Notes:
                Type of Log Server for system logs generated by Gateways associated with this Infrastructure Profile.  Valid values are SCP, SFTP, RSyslog, and Disabled.  This field is set to Disabled by default. Possible values are SCP, SFTP, RSYSLOG, DISABLED, .

                
                This attribute is named `remoteLogMode` in VSD API.
                
        """
        return self._remote_log_mode

    def _set_remote_log_mode(self, value):
        """ Set remote_log_mode value.

            Notes:
                Type of Log Server for system logs generated by Gateways associated with this Infrastructure Profile.  Valid values are SCP, SFTP, RSyslog, and Disabled.  This field is set to Disabled by default. Possible values are SCP, SFTP, RSYSLOG, DISABLED, .

                
                This attribute is named `remoteLogMode` in VSD API.
                
        """
        self._remote_log_mode = value

    remote_log_mode = property(_get_remote_log_mode, _set_remote_log_mode)
    
    def _get_remote_log_password(self):
        """ Get remote_log_password value.

            Notes:
                Password to be used when accessing the remote log server via SCP or SFTP.  This field is only useful for SCP and SFTP.

                
                This attribute is named `remoteLogPassword` in VSD API.
                
        """
        return self._remote_log_password

    def _set_remote_log_password(self, value):
        """ Set remote_log_password value.

            Notes:
                Password to be used when accessing the remote log server via SCP or SFTP.  This field is only useful for SCP and SFTP.

                
                This attribute is named `remoteLogPassword` in VSD API.
                
        """
        self._remote_log_password = value

    remote_log_password = property(_get_remote_log_password, _set_remote_log_password)
    
    def _get_remote_log_server_address(self):
        """ Get remote_log_server_address value.

            Notes:
                Primary Log Server for system logs generated by Gateways associated with this Infrastructure Profile.  Can be an IP address or a URL.  This field is optional.

                
                This attribute is named `remoteLogServerAddress` in VSD API.
                
        """
        return self._remote_log_server_address

    def _set_remote_log_server_address(self, value):
        """ Set remote_log_server_address value.

            Notes:
                Primary Log Server for system logs generated by Gateways associated with this Infrastructure Profile.  Can be an IP address or a URL.  This field is optional.

                
                This attribute is named `remoteLogServerAddress` in VSD API.
                
        """
        self._remote_log_server_address = value

    remote_log_server_address = property(_get_remote_log_server_address, _set_remote_log_server_address)
    
    def _get_remote_log_server_port(self):
        """ Get remote_log_server_port value.

            Notes:
                Port to be used to access the Remote Syslog server.  By default, this is port 514.

                
                This attribute is named `remoteLogServerPort` in VSD API.
                
        """
        return self._remote_log_server_port

    def _set_remote_log_server_port(self, value):
        """ Set remote_log_server_port value.

            Notes:
                Port to be used to access the Remote Syslog server.  By default, this is port 514.

                
                This attribute is named `remoteLogServerPort` in VSD API.
                
        """
        self._remote_log_server_port = value

    remote_log_server_port = property(_get_remote_log_server_port, _set_remote_log_server_port)
    
    def _get_remote_log_username(self):
        """ Get remote_log_username value.

            Notes:
                Username to be used when accessing the remote log server via SCP or SFTP.  This field is only useful for SCP and SFTP.

                
                This attribute is named `remoteLogUsername` in VSD API.
                
        """
        return self._remote_log_username

    def _set_remote_log_username(self, value):
        """ Set remote_log_username value.

            Notes:
                Username to be used when accessing the remote log server via SCP or SFTP.  This field is only useful for SCP and SFTP.

                
                This attribute is named `remoteLogUsername` in VSD API.
                
        """
        self._remote_log_username = value

    remote_log_username = property(_get_remote_log_username, _set_remote_log_username)
    
    def _get_standby_controller(self):
        """ Get standby_controller value.

            Notes:
                VSC Standby Controller :  IP Address of the standby VSC system NSG instances associated to this profile will be reaching for.

                
                This attribute is named `standbyController` in VSD API.
                
        """
        return self._standby_controller

    def _set_standby_controller(self, value):
        """ Set standby_controller value.

            Notes:
                VSC Standby Controller :  IP Address of the standby VSC system NSG instances associated to this profile will be reaching for.

                
                This attribute is named `standbyController` in VSD API.
                
        """
        self._standby_controller = value

    standby_controller = property(_get_standby_controller, _set_standby_controller)
    
    def _get_stats_collector_port(self):
        """ Get stats_collector_port value.

            Notes:
                The port to open by the proxy for stats collector to use

                
                This attribute is named `statsCollectorPort` in VSD API.
                
        """
        return self._stats_collector_port

    def _set_stats_collector_port(self, value):
        """ Set stats_collector_port value.

            Notes:
                The port to open by the proxy for stats collector to use

                
                This attribute is named `statsCollectorPort` in VSD API.
                
        """
        self._stats_collector_port = value

    stats_collector_port = property(_get_stats_collector_port, _set_stats_collector_port)
    
    def _get_system_sync_scheduler(self):
        """ Get system_sync_scheduler value.

            Notes:
                Time in a Cron format when configuration update are being applied on the Gateway (NSG).  This property is linked to systemSyncWindow.  Default value is every midnight (0 0 * * *).  Format:  Minutes Hours DayOfMonth Month DayOfWeek

                
                This attribute is named `systemSyncScheduler` in VSD API.
                
        """
        return self._system_sync_scheduler

    def _set_system_sync_scheduler(self, value):
        """ Set system_sync_scheduler value.

            Notes:
                Time in a Cron format when configuration update are being applied on the Gateway (NSG).  This property is linked to systemSyncWindow.  Default value is every midnight (0 0 * * *).  Format:  Minutes Hours DayOfMonth Month DayOfWeek

                
                This attribute is named `systemSyncScheduler` in VSD API.
                
        """
        self._system_sync_scheduler = value

    system_sync_scheduler = property(_get_system_sync_scheduler, _set_system_sync_scheduler)
    
    def _get_system_sync_window(self):
        """ Get system_sync_window value.

            Notes:
                Length of time, in seconds, given to a Gateway to apply a configuration change.  This property is closely linked to systemSyncScheduler.  Default value is 1 hour (3600 s) Possible values are NONE, TEN_MINUTES, THIRTY_MINUTES, ONE_HOUR, TWO_HOURS, THREE_HOURS, FOUR_HOURS, FIVE_HOURS, SIX_HOURS, MAXIMUM_DURATION, .

                
                This attribute is named `systemSyncWindow` in VSD API.
                
        """
        return self._system_sync_window

    def _set_system_sync_window(self, value):
        """ Set system_sync_window value.

            Notes:
                Length of time, in seconds, given to a Gateway to apply a configuration change.  This property is closely linked to systemSyncScheduler.  Default value is 1 hour (3600 s) Possible values are NONE, TEN_MINUTES, THIRTY_MINUTES, ONE_HOUR, TWO_HOURS, THREE_HOURS, FOUR_HOURS, FIVE_HOURS, SIX_HOURS, MAXIMUM_DURATION, .

                
                This attribute is named `systemSyncWindow` in VSD API.
                
        """
        self._system_sync_window = value

    system_sync_window = property(_get_system_sync_window, _set_system_sync_window)
    
    def _get_upgrade_action(self):
        """ Get upgrade_action value.

            Notes:
                Upgrade action for NSG associated with this Infrastructure Gateway Profile instance.  By default, there is no upgrade. Possible values are DOWNLOAD_ONLY, DOWNLOAD_AND_UPGRADE_AT_WINDOW, DOWNLOAD_AND_UPGRADE_NOW, UPGRADE_NOW, UPGRADE_AT_BOOTSTRAPPING, NONE, .

                
                This attribute is named `upgradeAction` in VSD API.
                
        """
        return self._upgrade_action

    def _set_upgrade_action(self, value):
        """ Set upgrade_action value.

            Notes:
                Upgrade action for NSG associated with this Infrastructure Gateway Profile instance.  By default, there is no upgrade. Possible values are DOWNLOAD_ONLY, DOWNLOAD_AND_UPGRADE_AT_WINDOW, DOWNLOAD_AND_UPGRADE_NOW, UPGRADE_NOW, UPGRADE_AT_BOOTSTRAPPING, NONE, .

                
                This attribute is named `upgradeAction` in VSD API.
                
        """
        self._upgrade_action = value

    upgrade_action = property(_get_upgrade_action, _set_upgrade_action)
    
    def _get_use_two_factor(self):
        """ Get use_two_factor value.

            Notes:
                Use Two Factor :  When set to true, the use of two independent authentication factors will be used to secure the installed NSG.  When set to false, there is an assumption that the NSG is being installed in a secure environment and the installer is also trusted.  The defaut value is true, using 2-factor.

                
                This attribute is named `useTwoFactor` in VSD API.
                
        """
        return self._use_two_factor

    def _set_use_two_factor(self, value):
        """ Set use_two_factor value.

            Notes:
                Use Two Factor :  When set to true, the use of two independent authentication factors will be used to secure the installed NSG.  When set to false, there is an assumption that the NSG is being installed in a secure environment and the installer is also trusted.  The defaut value is true, using 2-factor.

                
                This attribute is named `useTwoFactor` in VSD API.
                
        """
        self._use_two_factor = value

    use_two_factor = property(_get_use_two_factor, _set_use_two_factor)
    