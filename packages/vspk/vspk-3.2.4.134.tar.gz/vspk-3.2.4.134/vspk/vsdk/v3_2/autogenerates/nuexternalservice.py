# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUEndPointsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUMetadataTagsFetcher
from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUExternalService(NURESTObject):
    """ Represents a ExternalService in the VSD

        Notes:
            Representation of External Service

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUExternalService instead.
    """

    __rest_name__ = u"externalservice"
    __resource_name__ = u"externalservices"

    def __init__(self, **kwargs):
        """ Initializes a ExternalService instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> externalservice = NUExternalService(id=u'xxxx-xxx-xxx-xxx', name=u'ExternalService')
                >>> externalservice = NUExternalService(data=my_dict)
        """

        super(NUExternalService, self).__init__()

        # Read/Write Attributes
        
        self._description = None
        self._direction = None
        self._name = None
        self._service_type = None
        self._stage = None
        
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"direction", remote_name=u"direction", attribute_type=str, is_required=False, is_unique=False, choices=[u'INGRESS'])
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"service_type", remote_name=u"serviceType", attribute_type=str, is_required=True, is_unique=False, choices=[u'L2', u'L3'])
        self.expose_attribute(local_name=u"stage", remote_name=u"stage", attribute_type=str, is_required=False, is_unique=False, choices=[u'START'])
        
        # Fetchers
        
        self.end_points = NUEndPointsFetcher.fetcher_with_object(parent_object=self)
        
        self.event_logs = NUEventLogsFetcher.fetcher_with_object(parent_object=self)
        
        self.metadata_tags = NUMetadataTagsFetcher.fetcher_with_object(parent_object=self)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Description of the External Service.

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Description of the External Service.

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_direction(self):
        """ Get direction value.

            Notes:
                Direction -  INGRESS Possible values are INGRESS, .

                
        """
        return self._direction

    def _set_direction(self, value):
        """ Set direction value.

            Notes:
                Direction -  INGRESS Possible values are INGRESS, .

                
        """
        self._direction = value

    direction = property(_get_direction, _set_direction)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                unique name of the External Service. 

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                unique name of the External Service. 

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_service_type(self):
        """ Get service_type value.

            Notes:
                Type of the SERVICE -  L3,L2 Possible values are L3, L2, .

                
                This attribute is named `serviceType` in VSD API.
                
        """
        return self._service_type

    def _set_service_type(self, value):
        """ Set service_type value.

            Notes:
                Type of the SERVICE -  L3,L2 Possible values are L3, L2, .

                
                This attribute is named `serviceType` in VSD API.
                
        """
        self._service_type = value

    service_type = property(_get_service_type, _set_service_type)
    
    def _get_stage(self):
        """ Get stage value.

            Notes:
                Stage -  START,END Possible values are START, .

                
        """
        return self._stage

    def _set_stage(self, value):
        """ Set stage value.

            Notes:
                Stage -  START,END Possible values are START, .

                
        """
        self._stage = value

    stage = property(_get_stage, _set_stage)
    