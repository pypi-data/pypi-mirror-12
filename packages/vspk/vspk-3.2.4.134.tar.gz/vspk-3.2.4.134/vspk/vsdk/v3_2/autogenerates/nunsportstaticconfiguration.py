# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUNSPortStaticConfiguration(NURESTObject):
    """ Represents a NSPortStaticConfiguration in the VSD

        Notes:
            Represents a network port static configuration in the context of an NSG.

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUNSPortStaticConfiguration instead.
    """

    __rest_name__ = u"nsportstaticconfiguration"
    __resource_name__ = u"nsportstaticconfigurations"

    def __init__(self, **kwargs):
        """ Initializes a NSPortStaticConfiguration instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> nsportstaticconfiguration = NUNSPortStaticConfiguration(id=u'xxxx-xxx-xxx-xxx', name=u'NSPortStaticConfiguration')
                >>> nsportstaticconfiguration = NUNSPortStaticConfiguration(data=my_dict)
        """

        super(NUNSPortStaticConfiguration, self).__init__()

        # Read/Write Attributes
        
        self._address = None
        self._dns_address = None
        self._enabled = None
        self._gateway = None
        self._netmask = None
        
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"dns_address", remote_name=u"DNSAddress", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"enabled", remote_name=u"enabled", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str, is_required=False, is_unique=False)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_address(self):
        """ Get address value.

            Notes:
                IP address of the Network NSPort.

                
        """
        return self._address

    def _set_address(self, value):
        """ Set address value.

            Notes:
                IP address of the Network NSPort.

                
        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_dns_address(self):
        """ Get dns_address value.

            Notes:
                DNS Address for Network NSPort.

                
                This attribute is named `DNSAddress` in VSD API.
                
        """
        return self._dns_address

    def _set_dns_address(self, value):
        """ Set dns_address value.

            Notes:
                DNS Address for Network NSPort.

                
                This attribute is named `DNSAddress` in VSD API.
                
        """
        self._dns_address = value

    dns_address = property(_get_dns_address, _set_dns_address)
    
    def _get_enabled(self):
        """ Get enabled value.

            Notes:
                Boolean value that states if the NSG Port static configuration needs to be applied.

                
        """
        return self._enabled

    def _set_enabled(self, value):
        """ Set enabled value.

            Notes:
                Boolean value that states if the NSG Port static configuration needs to be applied.

                
        """
        self._enabled = value

    enabled = property(_get_enabled, _set_enabled)
    
    def _get_gateway(self):
        """ Get gateway value.

            Notes:
                IP address of the gateway bound to the Network NSPort.

                
        """
        return self._gateway

    def _set_gateway(self, value):
        """ Set gateway value.

            Notes:
                IP address of the gateway bound to the Network NSPort.

                
        """
        self._gateway = value

    gateway = property(_get_gateway, _set_gateway)
    
    def _get_netmask(self):
        """ Get netmask value.

            Notes:
                IP address netmask of the Network NSPort.

                
        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set netmask value.

            Notes:
                IP address netmask of the Network NSPort.

                
        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    