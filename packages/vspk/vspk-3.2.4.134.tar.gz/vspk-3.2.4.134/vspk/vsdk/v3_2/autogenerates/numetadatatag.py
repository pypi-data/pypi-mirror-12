# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUGlobalMetadatasFetcher
from ..fetchers import NUMetadatasFetcher
from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUMetadataTag(NURESTObject):
    """ Represents a MetadataTag in the VSD

        Notes:
            Metadata tag associated to a metadata

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUMetadataTag instead.
    """

    __rest_name__ = u"metadatatag"
    __resource_name__ = u"metadatatags"

    def __init__(self, **kwargs):
        """ Initializes a MetadataTag instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> metadatatag = NUMetadataTag(id=u'xxxx-xxx-xxx-xxx', name=u'MetadataTag')
                >>> metadatatag = NUMetadataTag(data=my_dict)
        """

        super(NUMetadataTag, self).__init__()

        # Read/Write Attributes
        
        self._associated_external_service_id = None
        self._auto_created = None
        self._description = None
        self._name = None
        
        self.expose_attribute(local_name=u"associated_external_service_id", remote_name=u"associatedExternalServiceID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"auto_created", remote_name=u"autoCreated", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        
        # Fetchers
        
        self.event_logs = NUEventLogsFetcher.fetcher_with_object(parent_object=self)
        
        self.global_metadatas = NUGlobalMetadatasFetcher.fetcher_with_object(parent_object=self)
        
        self.metadatas = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_associated_external_service_id(self):
        """ Get associated_external_service_id value.

            Notes:
                ID of the entity to which the Metadata tag is  associated to

                
                This attribute is named `associatedExternalServiceID` in VSD API.
                
        """
        return self._associated_external_service_id

    def _set_associated_external_service_id(self, value):
        """ Set associated_external_service_id value.

            Notes:
                ID of the entity to which the Metadata tag is  associated to

                
                This attribute is named `associatedExternalServiceID` in VSD API.
                
        """
        self._associated_external_service_id = value

    associated_external_service_id = property(_get_associated_external_service_id, _set_associated_external_service_id)
    
    def _get_auto_created(self):
        """ Get auto_created value.

            Notes:
                set to true if it is the default metadata tag created as part of external service creation

                
                This attribute is named `autoCreated` in VSD API.
                
        """
        return self._auto_created

    def _set_auto_created(self, value):
        """ Set auto_created value.

            Notes:
                set to true if it is the default metadata tag created as part of external service creation

                
                This attribute is named `autoCreated` in VSD API.
                
        """
        self._auto_created = value

    auto_created = property(_get_auto_created, _set_auto_created)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Description of the Metadata tag.

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Description of the Metadata tag.

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                name of the Metadata tag.

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                name of the Metadata tag.

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    