# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUGroupKeyEncryptionProfile(NURESTObject):
    """ Represents a GroupKeyEncryptionProfile in the VSD

        Notes:
            Represents a Group Key Profile

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUGroupKeyEncryptionProfile instead.
    """

    __rest_name__ = u"groupkeyencryptionprofile"
    __resource_name__ = u"groupkeyencryptionprofiles"

    def __init__(self, **kwargs):
        """ Initializes a GroupKeyEncryptionProfile instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> groupkeyencryptionprofile = NUGroupKeyEncryptionProfile(id=u'xxxx-xxx-xxx-xxx', name=u'GroupKeyEncryptionProfile')
                >>> groupkeyencryptionprofile = NUGroupKeyEncryptionProfile(data=my_dict)
        """

        super(NUGroupKeyEncryptionProfile, self).__init__()

        # Read/Write Attributes
        
        self._description = None
        self._name = None
        self._seed_generation_interval = None
        self._seed_lifetime = None
        self._seed_payload_authentication_algorithm = None
        self._seed_payload_authentication_bc_algorithm = None
        self._seed_payload_authentication_key_length = None
        self._seed_payload_encryption_algorithm = None
        self._seed_payload_encryption_bc_algorithm = None
        self._seed_payload_encryption_key_length = None
        self._seed_payload_signing_algorithm = None
        self._sek_generation_interval = None
        self._sek_lifetime = None
        self._sek_payload_encryption_algorithm = None
        self._sek_payload_encryption_bc_algorithm = None
        self._sek_payload_encryption_key_length = None
        self._sek_payload_signing_algorithm = None
        self._traffic_authentication_algorithm = None
        self._traffic_encryption_algorithm = None
        self._traffic_encryption_key_lifetime = None
        
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"seed_generation_interval", remote_name=u"seedGenerationInterval", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"seed_lifetime", remote_name=u"seedLifetime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"seed_payload_authentication_algorithm", remote_name=u"seedPayloadAuthenticationAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'HMAC_SHA1', u'HMAC_SHA256', u'HMAC_SHA512'])
        self.expose_attribute(local_name=u"seed_payload_authentication_bc_algorithm", remote_name=u"seedPayloadAuthenticationBCAlgorithm", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"seed_payload_authentication_key_length", remote_name=u"seedPayloadAuthenticationKeyLength", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"seed_payload_encryption_algorithm", remote_name=u"seedPayloadEncryptionAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'AES_128_CBC', u'AES_256_CBC', u'TRIPLE_DES_CBC'])
        self.expose_attribute(local_name=u"seed_payload_encryption_bc_algorithm", remote_name=u"seedPayloadEncryptionBCAlgorithm", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"seed_payload_encryption_key_length", remote_name=u"seedPayloadEncryptionKeyLength", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"seed_payload_signing_algorithm", remote_name=u"seedPayloadSigningAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'SHA1withRSA', u'SHA224withRSA', u'SHA256withRSA', u'SHA384withRSA', u'SHA512withRSA'])
        self.expose_attribute(local_name=u"sek_generation_interval", remote_name=u"SEKGenerationInterval", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"sek_lifetime", remote_name=u"SEKLifetime", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"sek_payload_encryption_algorithm", remote_name=u"SEKPayloadEncryptionAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'RSA_1024'])
        self.expose_attribute(local_name=u"sek_payload_encryption_bc_algorithm", remote_name=u"SEKPayloadEncryptionBCAlgorithm", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"sek_payload_encryption_key_length", remote_name=u"SEKPayloadEncryptionKeyLength", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"sek_payload_signing_algorithm", remote_name=u"SEKPayloadSigningAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'SHA1withRSA', u'SHA224withRSA', u'SHA256withRSA', u'SHA384withRSA', u'SHA512withRSA'])
        self.expose_attribute(local_name=u"traffic_authentication_algorithm", remote_name=u"trafficAuthenticationAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'HMAC_MD5', u'HMAC_SHA1', u'HMAC_SHA256', u'HMAC_SHA384', u'HMAC_SHA512'])
        self.expose_attribute(local_name=u"traffic_encryption_algorithm", remote_name=u"trafficEncryptionAlgorithm", attribute_type=str, is_required=False, is_unique=False, choices=[u'AES_128_CBC', u'AES_192_CBC', u'AES_256_CBC', u'TRIPLE_DES_CBC'])
        self.expose_attribute(local_name=u"traffic_encryption_key_lifetime", remote_name=u"trafficEncryptionKeyLifetime", attribute_type=int, is_required=False, is_unique=False)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_description(self):
        """ Get description value.

            Notes:
                A description of the Profile instance created.

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                A description of the Profile instance created.

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Name of the Encryption Profile

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Name of the Encryption Profile

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_seed_generation_interval(self):
        """ Get seed_generation_interval value.

            Notes:
                Group Key SEED Generation Interval in Seconds. Min=1, Max=86400

                
                This attribute is named `seedGenerationInterval` in VSD API.
                
        """
        return self._seed_generation_interval

    def _set_seed_generation_interval(self, value):
        """ Set seed_generation_interval value.

            Notes:
                Group Key SEED Generation Interval in Seconds. Min=1, Max=86400

                
                This attribute is named `seedGenerationInterval` in VSD API.
                
        """
        self._seed_generation_interval = value

    seed_generation_interval = property(_get_seed_generation_interval, _set_seed_generation_interval)
    
    def _get_seed_lifetime(self):
        """ Get seed_lifetime value.

            Notes:
                Group Key SEED Lifetime in Seconds. Min=1, Max=86400

                
                This attribute is named `seedLifetime` in VSD API.
                
        """
        return self._seed_lifetime

    def _set_seed_lifetime(self, value):
        """ Set seed_lifetime value.

            Notes:
                Group Key SEED Lifetime in Seconds. Min=1, Max=86400

                
                This attribute is named `seedLifetime` in VSD API.
                
        """
        self._seed_lifetime = value

    seed_lifetime = property(_get_seed_lifetime, _set_seed_lifetime)
    
    def _get_seed_payload_authentication_algorithm(self):
        """ Get seed_payload_authentication_algorithm value.

            Notes:
                Group Key SEK Payload Signature Algorithm. Possible values are HMAC_SHA1, HMAC_SHA256, HMAC_SHA512, .

                
                This attribute is named `seedPayloadAuthenticationAlgorithm` in VSD API.
                
        """
        return self._seed_payload_authentication_algorithm

    def _set_seed_payload_authentication_algorithm(self, value):
        """ Set seed_payload_authentication_algorithm value.

            Notes:
                Group Key SEK Payload Signature Algorithm. Possible values are HMAC_SHA1, HMAC_SHA256, HMAC_SHA512, .

                
                This attribute is named `seedPayloadAuthenticationAlgorithm` in VSD API.
                
        """
        self._seed_payload_authentication_algorithm = value

    seed_payload_authentication_algorithm = property(_get_seed_payload_authentication_algorithm, _set_seed_payload_authentication_algorithm)
    
    def _get_seed_payload_authentication_bc_algorithm(self):
        """ Get seed_payload_authentication_bc_algorithm value.

            Notes:
                Group Key Seed Payload Authentication Algorithm (read only)

                
                This attribute is named `seedPayloadAuthenticationBCAlgorithm` in VSD API.
                
        """
        return self._seed_payload_authentication_bc_algorithm

    def _set_seed_payload_authentication_bc_algorithm(self, value):
        """ Set seed_payload_authentication_bc_algorithm value.

            Notes:
                Group Key Seed Payload Authentication Algorithm (read only)

                
                This attribute is named `seedPayloadAuthenticationBCAlgorithm` in VSD API.
                
        """
        self._seed_payload_authentication_bc_algorithm = value

    seed_payload_authentication_bc_algorithm = property(_get_seed_payload_authentication_bc_algorithm, _set_seed_payload_authentication_bc_algorithm)
    
    def _get_seed_payload_authentication_key_length(self):
        """ Get seed_payload_authentication_key_length value.

            Notes:
                Group Key Seed Payload Authentication Key Length  (read only)

                
                This attribute is named `seedPayloadAuthenticationKeyLength` in VSD API.
                
        """
        return self._seed_payload_authentication_key_length

    def _set_seed_payload_authentication_key_length(self, value):
        """ Set seed_payload_authentication_key_length value.

            Notes:
                Group Key Seed Payload Authentication Key Length  (read only)

                
                This attribute is named `seedPayloadAuthenticationKeyLength` in VSD API.
                
        """
        self._seed_payload_authentication_key_length = value

    seed_payload_authentication_key_length = property(_get_seed_payload_authentication_key_length, _set_seed_payload_authentication_key_length)
    
    def _get_seed_payload_encryption_algorithm(self):
        """ Get seed_payload_encryption_algorithm value.

            Notes:
                Group Key SEED Payload Encryption Algorithm. Possible values are AES_128_CBC, AES_256_CBC, TRIPLE_DES_CBC, .

                
                This attribute is named `seedPayloadEncryptionAlgorithm` in VSD API.
                
        """
        return self._seed_payload_encryption_algorithm

    def _set_seed_payload_encryption_algorithm(self, value):
        """ Set seed_payload_encryption_algorithm value.

            Notes:
                Group Key SEED Payload Encryption Algorithm. Possible values are AES_128_CBC, AES_256_CBC, TRIPLE_DES_CBC, .

                
                This attribute is named `seedPayloadEncryptionAlgorithm` in VSD API.
                
        """
        self._seed_payload_encryption_algorithm = value

    seed_payload_encryption_algorithm = property(_get_seed_payload_encryption_algorithm, _set_seed_payload_encryption_algorithm)
    
    def _get_seed_payload_encryption_bc_algorithm(self):
        """ Get seed_payload_encryption_bc_algorithm value.

            Notes:
                Group Key Seed Payload Encryption Algorithm (read only)

                
                This attribute is named `seedPayloadEncryptionBCAlgorithm` in VSD API.
                
        """
        return self._seed_payload_encryption_bc_algorithm

    def _set_seed_payload_encryption_bc_algorithm(self, value):
        """ Set seed_payload_encryption_bc_algorithm value.

            Notes:
                Group Key Seed Payload Encryption Algorithm (read only)

                
                This attribute is named `seedPayloadEncryptionBCAlgorithm` in VSD API.
                
        """
        self._seed_payload_encryption_bc_algorithm = value

    seed_payload_encryption_bc_algorithm = property(_get_seed_payload_encryption_bc_algorithm, _set_seed_payload_encryption_bc_algorithm)
    
    def _get_seed_payload_encryption_key_length(self):
        """ Get seed_payload_encryption_key_length value.

            Notes:
                Group Key Seed Payload Encryption Key Length (read only)

                
                This attribute is named `seedPayloadEncryptionKeyLength` in VSD API.
                
        """
        return self._seed_payload_encryption_key_length

    def _set_seed_payload_encryption_key_length(self, value):
        """ Set seed_payload_encryption_key_length value.

            Notes:
                Group Key Seed Payload Encryption Key Length (read only)

                
                This attribute is named `seedPayloadEncryptionKeyLength` in VSD API.
                
        """
        self._seed_payload_encryption_key_length = value

    seed_payload_encryption_key_length = property(_get_seed_payload_encryption_key_length, _set_seed_payload_encryption_key_length)
    
    def _get_seed_payload_signing_algorithm(self):
        """ Get seed_payload_signing_algorithm value.

            Notes:
                Group Key Seed Payload Signature Algorithm. Possible values are SHA1withRSA, SHA224withRSA, SHA256withRSA, SHA384withRSA, SHA512withRSA, .

                
                This attribute is named `seedPayloadSigningAlgorithm` in VSD API.
                
        """
        return self._seed_payload_signing_algorithm

    def _set_seed_payload_signing_algorithm(self, value):
        """ Set seed_payload_signing_algorithm value.

            Notes:
                Group Key Seed Payload Signature Algorithm. Possible values are SHA1withRSA, SHA224withRSA, SHA256withRSA, SHA384withRSA, SHA512withRSA, .

                
                This attribute is named `seedPayloadSigningAlgorithm` in VSD API.
                
        """
        self._seed_payload_signing_algorithm = value

    seed_payload_signing_algorithm = property(_get_seed_payload_signing_algorithm, _set_seed_payload_signing_algorithm)
    
    def _get_sek_generation_interval(self):
        """ Get sek_generation_interval value.

            Notes:
                Group Key SEK Generation Interval in Seconds. Min=1, Max=86400

                
                This attribute is named `SEKGenerationInterval` in VSD API.
                
        """
        return self._sek_generation_interval

    def _set_sek_generation_interval(self, value):
        """ Set sek_generation_interval value.

            Notes:
                Group Key SEK Generation Interval in Seconds. Min=1, Max=86400

                
                This attribute is named `SEKGenerationInterval` in VSD API.
                
        """
        self._sek_generation_interval = value

    sek_generation_interval = property(_get_sek_generation_interval, _set_sek_generation_interval)
    
    def _get_sek_lifetime(self):
        """ Get sek_lifetime value.

            Notes:
                Group Key SEK Lifetime in Seconds. Min=1, Max=86400

                
                This attribute is named `SEKLifetime` in VSD API.
                
        """
        return self._sek_lifetime

    def _set_sek_lifetime(self, value):
        """ Set sek_lifetime value.

            Notes:
                Group Key SEK Lifetime in Seconds. Min=1, Max=86400

                
                This attribute is named `SEKLifetime` in VSD API.
                
        """
        self._sek_lifetime = value

    sek_lifetime = property(_get_sek_lifetime, _set_sek_lifetime)
    
    def _get_sek_payload_encryption_algorithm(self):
        """ Get sek_payload_encryption_algorithm value.

            Notes:
                Group Key SEK Payload Encryption Algorithm. Possible values are RSA_1024, .

                
                This attribute is named `SEKPayloadEncryptionAlgorithm` in VSD API.
                
        """
        return self._sek_payload_encryption_algorithm

    def _set_sek_payload_encryption_algorithm(self, value):
        """ Set sek_payload_encryption_algorithm value.

            Notes:
                Group Key SEK Payload Encryption Algorithm. Possible values are RSA_1024, .

                
                This attribute is named `SEKPayloadEncryptionAlgorithm` in VSD API.
                
        """
        self._sek_payload_encryption_algorithm = value

    sek_payload_encryption_algorithm = property(_get_sek_payload_encryption_algorithm, _set_sek_payload_encryption_algorithm)
    
    def _get_sek_payload_encryption_bc_algorithm(self):
        """ Get sek_payload_encryption_bc_algorithm value.

            Notes:
                Group Key Sek Payload Encryption BC Algorithm (read only)

                
                This attribute is named `SEKPayloadEncryptionBCAlgorithm` in VSD API.
                
        """
        return self._sek_payload_encryption_bc_algorithm

    def _set_sek_payload_encryption_bc_algorithm(self, value):
        """ Set sek_payload_encryption_bc_algorithm value.

            Notes:
                Group Key Sek Payload Encryption BC Algorithm (read only)

                
                This attribute is named `SEKPayloadEncryptionBCAlgorithm` in VSD API.
                
        """
        self._sek_payload_encryption_bc_algorithm = value

    sek_payload_encryption_bc_algorithm = property(_get_sek_payload_encryption_bc_algorithm, _set_sek_payload_encryption_bc_algorithm)
    
    def _get_sek_payload_encryption_key_length(self):
        """ Get sek_payload_encryption_key_length value.

            Notes:
                Group Key Sek Payload Encryption Key Length (read only)

                
                This attribute is named `SEKPayloadEncryptionKeyLength` in VSD API.
                
        """
        return self._sek_payload_encryption_key_length

    def _set_sek_payload_encryption_key_length(self, value):
        """ Set sek_payload_encryption_key_length value.

            Notes:
                Group Key Sek Payload Encryption Key Length (read only)

                
                This attribute is named `SEKPayloadEncryptionKeyLength` in VSD API.
                
        """
        self._sek_payload_encryption_key_length = value

    sek_payload_encryption_key_length = property(_get_sek_payload_encryption_key_length, _set_sek_payload_encryption_key_length)
    
    def _get_sek_payload_signing_algorithm(self):
        """ Get sek_payload_signing_algorithm value.

            Notes:
                Group Key SEK Payload Signature Algorithm. Possible values are SHA1withRSA, SHA224withRSA, SHA256withRSA, SHA384withRSA, SHA512withRSA, .

                
                This attribute is named `SEKPayloadSigningAlgorithm` in VSD API.
                
        """
        return self._sek_payload_signing_algorithm

    def _set_sek_payload_signing_algorithm(self, value):
        """ Set sek_payload_signing_algorithm value.

            Notes:
                Group Key SEK Payload Signature Algorithm. Possible values are SHA1withRSA, SHA224withRSA, SHA256withRSA, SHA384withRSA, SHA512withRSA, .

                
                This attribute is named `SEKPayloadSigningAlgorithm` in VSD API.
                
        """
        self._sek_payload_signing_algorithm = value

    sek_payload_signing_algorithm = property(_get_sek_payload_signing_algorithm, _set_sek_payload_signing_algorithm)
    
    def _get_traffic_authentication_algorithm(self):
        """ Get traffic_authentication_algorithm value.

            Notes:
                Group Key traffic Authentication Algorithm. Possible values are HMAC_SHA1, HMAC_SHA256, HMAC_SHA384, HMAC_SHA512, HMAC_MD5, .

                
                This attribute is named `trafficAuthenticationAlgorithm` in VSD API.
                
        """
        return self._traffic_authentication_algorithm

    def _set_traffic_authentication_algorithm(self, value):
        """ Set traffic_authentication_algorithm value.

            Notes:
                Group Key traffic Authentication Algorithm. Possible values are HMAC_SHA1, HMAC_SHA256, HMAC_SHA384, HMAC_SHA512, HMAC_MD5, .

                
                This attribute is named `trafficAuthenticationAlgorithm` in VSD API.
                
        """
        self._traffic_authentication_algorithm = value

    traffic_authentication_algorithm = property(_get_traffic_authentication_algorithm, _set_traffic_authentication_algorithm)
    
    def _get_traffic_encryption_algorithm(self):
        """ Get traffic_encryption_algorithm value.

            Notes:
                Group Key traffic Encryption Algorithm. Possible values are AES_128_CBC, AES_192_CBC, AES_256_CBC, TRIPLE_DES_CBC, .

                
                This attribute is named `trafficEncryptionAlgorithm` in VSD API.
                
        """
        return self._traffic_encryption_algorithm

    def _set_traffic_encryption_algorithm(self, value):
        """ Set traffic_encryption_algorithm value.

            Notes:
                Group Key traffic Encryption Algorithm. Possible values are AES_128_CBC, AES_192_CBC, AES_256_CBC, TRIPLE_DES_CBC, .

                
                This attribute is named `trafficEncryptionAlgorithm` in VSD API.
                
        """
        self._traffic_encryption_algorithm = value

    traffic_encryption_algorithm = property(_get_traffic_encryption_algorithm, _set_traffic_encryption_algorithm)
    
    def _get_traffic_encryption_key_lifetime(self):
        """ Get traffic_encryption_key_lifetime value.

            Notes:
                Group Key Traffic Encryption Key Lifetime in Seconds. Min=1, Max=86400

                
                This attribute is named `trafficEncryptionKeyLifetime` in VSD API.
                
        """
        return self._traffic_encryption_key_lifetime

    def _set_traffic_encryption_key_lifetime(self, value):
        """ Set traffic_encryption_key_lifetime value.

            Notes:
                Group Key Traffic Encryption Key Lifetime in Seconds. Min=1, Max=86400

                
                This attribute is named `trafficEncryptionKeyLifetime` in VSD API.
                
        """
        self._traffic_encryption_key_lifetime = value

    traffic_encryption_key_lifetime = property(_get_traffic_encryption_key_lifetime, _set_traffic_encryption_key_lifetime)
    