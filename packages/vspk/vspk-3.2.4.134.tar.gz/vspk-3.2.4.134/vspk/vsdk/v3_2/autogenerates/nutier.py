# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUStatisticsFetcher
from ..fetchers import NUStatisticsPoliciesFetcher
from ..fetchers import NUTCAsFetcher
from ..fetchers import NUVMsFetcher
from ..fetchers import NUVPortsFetcher
from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUTier(NURESTObject):
    """ Represents a Tier in the VSD

        Notes:
            Tier represents a portion of an application.

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUTier instead.
    """

    __rest_name__ = u"tier"
    __resource_name__ = u"tiers"

    def __init__(self, **kwargs):
        """ Initializes a Tier instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> tier = NUTier(id=u'xxxx-xxx-xxx-xxx', name=u'Tier')
                >>> tier = NUTier(data=my_dict)
        """

        super(NUTier, self).__init__()

        # Read/Write Attributes
        
        self._address = None
        self._associated_application_id = None
        self._associated_floating_ip_pool_id = None
        self._associated_network_macro_id = None
        self._associated_network_object_id = None
        self._associated_network_object_type = None
        self._description = None
        self._gateway = None
        self._metadata = None
        self._name = None
        self._netmask = None
        self._type = None
        
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"associated_application_id", remote_name=u"associatedApplicationID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"associated_floating_ip_pool_id", remote_name=u"associatedFloatingIPPoolID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"associated_network_macro_id", remote_name=u"associatedNetworkMacroID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"associated_network_object_id", remote_name=u"associatedNetworkObjectID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"associated_network_object_type", remote_name=u"associatedNetworkObjectType", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"metadata", remote_name=u"metadata", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=str, is_required=True, is_unique=False, choices=[u'APPLICATION', u'APPLICATION_EXTENDED_NETWORK', u'NETWORK_MACRO', u'STANDARD'])
        
        # Fetchers
        
        self.event_logs = NUEventLogsFetcher.fetcher_with_object(parent_object=self)
        
        self.statistics = NUStatisticsFetcher.fetcher_with_object(parent_object=self)
        
        self.statistics_policies = NUStatisticsPoliciesFetcher.fetcher_with_object(parent_object=self)
        
        self.tcas = NUTCAsFetcher.fetcher_with_object(parent_object=self)
        
        self.vms = NUVMsFetcher.fetcher_with_object(parent_object=self)
        
        self.vports = NUVPortsFetcher.fetcher_with_object(parent_object=self)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_address(self):
        """ Get address value.

            Notes:
                IP address of the tier defined.

                
        """
        return self._address

    def _set_address(self, value):
        """ Set address value.

            Notes:
                IP address of the tier defined.

                
        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_associated_application_id(self):
        """ Get associated_application_id value.

            Notes:
                The associated network macro ID.

                
                This attribute is named `associatedApplicationID` in VSD API.
                
        """
        return self._associated_application_id

    def _set_associated_application_id(self, value):
        """ Set associated_application_id value.

            Notes:
                The associated network macro ID.

                
                This attribute is named `associatedApplicationID` in VSD API.
                
        """
        self._associated_application_id = value

    associated_application_id = property(_get_associated_application_id, _set_associated_application_id)
    
    def _get_associated_floating_ip_pool_id(self):
        """ Get associated_floating_ip_pool_id value.

            Notes:
                The associated floating IP Pool ID.

                
                This attribute is named `associatedFloatingIPPoolID` in VSD API.
                
        """
        return self._associated_floating_ip_pool_id

    def _set_associated_floating_ip_pool_id(self, value):
        """ Set associated_floating_ip_pool_id value.

            Notes:
                The associated floating IP Pool ID.

                
                This attribute is named `associatedFloatingIPPoolID` in VSD API.
                
        """
        self._associated_floating_ip_pool_id = value

    associated_floating_ip_pool_id = property(_get_associated_floating_ip_pool_id, _set_associated_floating_ip_pool_id)
    
    def _get_associated_network_macro_id(self):
        """ Get associated_network_macro_id value.

            Notes:
                The associated network macro ID.

                
                This attribute is named `associatedNetworkMacroID` in VSD API.
                
        """
        return self._associated_network_macro_id

    def _set_associated_network_macro_id(self, value):
        """ Set associated_network_macro_id value.

            Notes:
                The associated network macro ID.

                
                This attribute is named `associatedNetworkMacroID` in VSD API.
                
        """
        self._associated_network_macro_id = value

    associated_network_macro_id = property(_get_associated_network_macro_id, _set_associated_network_macro_id)
    
    def _get_associated_network_object_id(self):
        """ Get associated_network_object_id value.

            Notes:
                The associated network object id.

                
                This attribute is named `associatedNetworkObjectID` in VSD API.
                
        """
        return self._associated_network_object_id

    def _set_associated_network_object_id(self, value):
        """ Set associated_network_object_id value.

            Notes:
                The associated network object id.

                
                This attribute is named `associatedNetworkObjectID` in VSD API.
                
        """
        self._associated_network_object_id = value

    associated_network_object_id = property(_get_associated_network_object_id, _set_associated_network_object_id)
    
    def _get_associated_network_object_type(self):
        """ Get associated_network_object_type value.

            Notes:
                The associated network object type. Refer to API section for supported types.

                
                This attribute is named `associatedNetworkObjectType` in VSD API.
                
        """
        return self._associated_network_object_type

    def _set_associated_network_object_type(self, value):
        """ Set associated_network_object_type value.

            Notes:
                The associated network object type. Refer to API section for supported types.

                
                This attribute is named `associatedNetworkObjectType` in VSD API.
                
        """
        self._associated_network_object_type = value

    associated_network_object_type = property(_get_associated_network_object_type, _set_associated_network_object_type)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Description of the application tier.

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Description of the application tier.

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_gateway(self):
        """ Get gateway value.

            Notes:
                The IP address of the gateway for this tier.

                
        """
        return self._gateway

    def _set_gateway(self, value):
        """ Set gateway value.

            Notes:
                The IP address of the gateway for this tier.

                
        """
        self._gateway = value

    gateway = property(_get_gateway, _set_gateway)
    
    def _get_metadata(self):
        """ Get metadata value.

            Notes:
                Metadata field to store tier related data.

                
        """
        return self._metadata

    def _set_metadata(self, value):
        """ Set metadata value.

            Notes:
                Metadata field to store tier related data.

                
        """
        self._metadata = value

    metadata = property(_get_metadata, _set_metadata)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Name of the application tier.

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Name of the application tier.

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_netmask(self):
        """ Get netmask value.

            Notes:
                Netmask for the tier.

                
        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set netmask value.

            Notes:
                Netmask for the tier.

                
        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    
    def _get_type(self):
        """ Get type value.

            Notes:
                Type of the application tier. (Example: STANDARD, NETWORK_MACRO, APPLICATION or APPLICATION_EXTENDED_NETWORK Possible values are STANDARD, NETWORK_MACRO, APPLICATION, APPLICATION_EXTENDED_NETWORK, .

                
        """
        return self._type

    def _set_type(self, value):
        """ Set type value.

            Notes:
                Type of the application tier. (Example: STANDARD, NETWORK_MACRO, APPLICATION or APPLICATION_EXTENDED_NETWORK Possible values are STANDARD, NETWORK_MACRO, APPLICATION, APPLICATION_EXTENDED_NETWORK, .

                
        """
        self._type = value

    type = property(_get_type, _set_type)
    