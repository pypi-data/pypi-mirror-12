# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NULDAPConfiguration(NURESTObject):
    """ Represents a LDAPConfiguration in the VSD

        Notes:
            Configuration of LDAP parameters associated with an enterprise. This will enable authentication through an external LDAP server for this enterprise

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NULDAPConfiguration instead.
    """

    __rest_name__ = u"ldapconfiguration"
    __resource_name__ = u"ldapconfigurations"

    def __init__(self, **kwargs):
        """ Initializes a LDAPConfiguration instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> ldapconfiguration = NULDAPConfiguration(id=u'xxxx-xxx-xxx-xxx', name=u'LDAPConfiguration')
                >>> ldapconfiguration = NULDAPConfiguration(data=my_dict)
        """

        super(NULDAPConfiguration, self).__init__()

        # Read/Write Attributes
        
        self._accept_all_certificates = None
        self._authorization_enabled = None
        self._authorizing_user_dn = None
        self._certificate = None
        self._enabled = None
        self._group_dn = None
        self._password = None
        self._port = None
        self._server = None
        self._ssl_enabled = None
        self._user_dn_template = None
        
        self.expose_attribute(local_name=u"accept_all_certificates", remote_name=u"acceptAllCertificates", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"authorization_enabled", remote_name=u"authorizationEnabled", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"authorizing_user_dn", remote_name=u"authorizingUserDN", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"certificate", remote_name=u"certificate", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"enabled", remote_name=u"enabled", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"group_dn", remote_name=u"groupDN", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"password", remote_name=u"password", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"port", remote_name=u"port", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"server", remote_name=u"server", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"ssl_enabled", remote_name=u"SSLEnabled", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"user_dn_template", remote_name=u"userDNTemplate", attribute_type=str, is_required=True, is_unique=False)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_accept_all_certificates(self):
        """ Get accept_all_certificates value.

            Notes:
                Accept all certificates from the LDAP server

                
                This attribute is named `acceptAllCertificates` in VSD API.
                
        """
        return self._accept_all_certificates

    def _set_accept_all_certificates(self, value):
        """ Set accept_all_certificates value.

            Notes:
                Accept all certificates from the LDAP server

                
                This attribute is named `acceptAllCertificates` in VSD API.
                
        """
        self._accept_all_certificates = value

    accept_all_certificates = property(_get_accept_all_certificates, _set_accept_all_certificates)
    
    def _get_authorization_enabled(self):
        """ Get authorization_enabled value.

            Notes:
                To enable LDAP authorization for an enterprise, both authorizationEnabled and enabled attributes must be set to true. If enabled attribute is not set, this attribute is ignored. The relationship between enabled and authorizationEnabled attributes is as follows, enabled = true, authorizationEnabled = false, LDAP is used only for Authentication. enabled = true, authorizationEnabled = true, LDAP is used for both authentication and authorization. enabled = false, authorizationEnabled = true, LDAP is not used. enabled = false, authorizationEnabled = false, LDAP is not used.

                
                This attribute is named `authorizationEnabled` in VSD API.
                
        """
        return self._authorization_enabled

    def _set_authorization_enabled(self, value):
        """ Set authorization_enabled value.

            Notes:
                To enable LDAP authorization for an enterprise, both authorizationEnabled and enabled attributes must be set to true. If enabled attribute is not set, this attribute is ignored. The relationship between enabled and authorizationEnabled attributes is as follows, enabled = true, authorizationEnabled = false, LDAP is used only for Authentication. enabled = true, authorizationEnabled = true, LDAP is used for both authentication and authorization. enabled = false, authorizationEnabled = true, LDAP is not used. enabled = false, authorizationEnabled = false, LDAP is not used.

                
                This attribute is named `authorizationEnabled` in VSD API.
                
        """
        self._authorization_enabled = value

    authorization_enabled = property(_get_authorization_enabled, _set_authorization_enabled)
    
    def _get_authorizing_user_dn(self):
        """ Get authorizing_user_dn value.

            Notes:
                This attribute is a mandatory field for LDAP authorization. When LDAP is used for authorization for an enterprise, the user DN that will be used to verify the integrity of groups and users in LDAP server for the enterprise. For example, CN=groupAdmin,OU=VSD_USERS,OU=Personal,OU=Domain Users,DC=company,DC=com

                
                This attribute is named `authorizingUserDN` in VSD API.
                
        """
        return self._authorizing_user_dn

    def _set_authorizing_user_dn(self, value):
        """ Set authorizing_user_dn value.

            Notes:
                This attribute is a mandatory field for LDAP authorization. When LDAP is used for authorization for an enterprise, the user DN that will be used to verify the integrity of groups and users in LDAP server for the enterprise. For example, CN=groupAdmin,OU=VSD_USERS,OU=Personal,OU=Domain Users,DC=company,DC=com

                
                This attribute is named `authorizingUserDN` in VSD API.
                
        """
        self._authorizing_user_dn = value

    authorizing_user_dn = property(_get_authorizing_user_dn, _set_authorizing_user_dn)
    
    def _get_certificate(self):
        """ Get certificate value.

            Notes:
                The certificate to authenticate with the LDAP server

                
        """
        return self._certificate

    def _set_certificate(self, value):
        """ Set certificate value.

            Notes:
                The certificate to authenticate with the LDAP server

                
        """
        self._certificate = value

    certificate = property(_get_certificate, _set_certificate)
    
    def _get_enabled(self):
        """ Get enabled value.

            Notes:
                To enable LDAP authentication for an enterprise, set this attribute to true. If enabled is set to false, authorizationEnabled attribute is ignored and LDAP is not used for authentication as well as authorization. The relationship between enabled and authorizationEnabled attributes is as follows, enabled = true, authorizationEnabled = false, LDAP is used only for Authentication enabled = true, authorizationEnabled = true, LDAP is used for both authentication and authorization. enabled = false, authorizationEnabled = true, LDAP is not used. enabled = false, authorizationEnabled = false, LDAP is not used.

                
        """
        return self._enabled

    def _set_enabled(self, value):
        """ Set enabled value.

            Notes:
                To enable LDAP authentication for an enterprise, set this attribute to true. If enabled is set to false, authorizationEnabled attribute is ignored and LDAP is not used for authentication as well as authorization. The relationship between enabled and authorizationEnabled attributes is as follows, enabled = true, authorizationEnabled = false, LDAP is used only for Authentication enabled = true, authorizationEnabled = true, LDAP is used for both authentication and authorization. enabled = false, authorizationEnabled = true, LDAP is not used. enabled = false, authorizationEnabled = false, LDAP is not used.

                
        """
        self._enabled = value

    enabled = property(_get_enabled, _set_enabled)
    
    def _get_group_dn(self):
        """ Get group_dn value.

            Notes:
                This attribute is a mandatory field for LDAP authorization. When LDAP is used for authorization for an enterprise, the group DN will be used to get the list of VSD specific groups in LDAP server for the enterprise. For example, OU=VSDGroups,DC=company,DC=com

                
                This attribute is named `groupDN` in VSD API.
                
        """
        return self._group_dn

    def _set_group_dn(self, value):
        """ Set group_dn value.

            Notes:
                This attribute is a mandatory field for LDAP authorization. When LDAP is used for authorization for an enterprise, the group DN will be used to get the list of VSD specific groups in LDAP server for the enterprise. For example, OU=VSDGroups,DC=company,DC=com

                
                This attribute is named `groupDN` in VSD API.
                
        """
        self._group_dn = value

    group_dn = property(_get_group_dn, _set_group_dn)
    
    def _get_password(self):
        """ Get password value.

            Notes:
                This attribute is a mandatory field for LDAP authorization. Password that will be used to verify the integrity of groups and users in LDAP server for the enterprise.

                
        """
        return self._password

    def _set_password(self, value):
        """ Set password value.

            Notes:
                This attribute is a mandatory field for LDAP authorization. Password that will be used to verify the integrity of groups and users in LDAP server for the enterprise.

                
        """
        self._password = value

    password = property(_get_password, _set_password)
    
    def _get_port(self):
        """ Get port value.

            Notes:
                Port to be used for the LDAP server

                
        """
        return self._port

    def _set_port(self, value):
        """ Set port value.

            Notes:
                Port to be used for the LDAP server

                
        """
        self._port = value

    port = property(_get_port, _set_port)
    
    def _get_server(self):
        """ Get server value.

            Notes:
                The LDAP server IP or FQDN

                
        """
        return self._server

    def _set_server(self, value):
        """ Set server value.

            Notes:
                The LDAP server IP or FQDN

                
        """
        self._server = value

    server = property(_get_server, _set_server)
    
    def _get_ssl_enabled(self):
        """ Get ssl_enabled value.

            Notes:
                Enable SSL for communication with the LDAP server

                
                This attribute is named `SSLEnabled` in VSD API.
                
        """
        return self._ssl_enabled

    def _set_ssl_enabled(self, value):
        """ Set ssl_enabled value.

            Notes:
                Enable SSL for communication with the LDAP server

                
                This attribute is named `SSLEnabled` in VSD API.
                
        """
        self._ssl_enabled = value

    ssl_enabled = property(_get_ssl_enabled, _set_ssl_enabled)
    
    def _get_user_dn_template(self):
        """ Get user_dn_template value.

            Notes:
                The DN template to be used for authentication. The template needs to have a string _USERID_ in it. This will be replaced by  the userId of the user who makes the REST API call. For example, template UID=_USERID_,OU=company,DC=com will converted to  UID=admin,OU=company,DC=com and this will be used as DN for LDAP authentication.

                
                This attribute is named `userDNTemplate` in VSD API.
                
        """
        return self._user_dn_template

    def _set_user_dn_template(self, value):
        """ Set user_dn_template value.

            Notes:
                The DN template to be used for authentication. The template needs to have a string _USERID_ in it. This will be replaced by  the userId of the user who makes the REST API call. For example, template UID=_USERID_,OU=company,DC=com will converted to  UID=admin,OU=company,DC=com and this will be used as DN for LDAP authentication.

                
                This attribute is named `userDNTemplate` in VSD API.
                
        """
        self._user_dn_template = value

    user_dn_template = property(_get_user_dn_template, _set_user_dn_template)
    