# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUInfrastructureVscProfile(NURESTObject):
    """ Represents a InfrastructureVscProfile in the VSD

        Notes:
            Represents an Infrastructure VSC Profile

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUInfrastructureVscProfile instead.
    """

    __rest_name__ = u"infrastructurevscprofile"
    __resource_name__ = u"infrastructurevscprofiles"

    def __init__(self, **kwargs):
        """ Initializes a InfrastructureVscProfile instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> infrastructurevscprofile = NUInfrastructureVscProfile(id=u'xxxx-xxx-xxx-xxx', name=u'InfrastructureVscProfile')
                >>> infrastructurevscprofile = NUInfrastructureVscProfile(data=my_dict)
        """

        super(NUInfrastructureVscProfile, self).__init__()

        # Read/Write Attributes
        
        self._description = None
        self._enterprise_id = None
        self._first_controller = None
        self._name = None
        self._probe_interval = None
        self._second_controller = None
        
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"first_controller", remote_name=u"firstController", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"probe_interval", remote_name=u"probeInterval", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"second_controller", remote_name=u"secondController", attribute_type=str, is_required=False, is_unique=False)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_description(self):
        """ Get description value.

            Notes:
                A description of the Profile instance created.

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                A description of the Profile instance created.

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_enterprise_id(self):
        """ Get enterprise_id value.

            Notes:
                Enterprise/Organisation associated with this Profile instance.

                
                This attribute is named `enterpriseID` in VSD API.
                
        """
        return self._enterprise_id

    def _set_enterprise_id(self, value):
        """ Set enterprise_id value.

            Notes:
                Enterprise/Organisation associated with this Profile instance.

                
                This attribute is named `enterpriseID` in VSD API.
                
        """
        self._enterprise_id = value

    enterprise_id = property(_get_enterprise_id, _set_enterprise_id)
    
    def _get_first_controller(self):
        """ Get first_controller value.

            Notes:
                First VSC Controller :  IP Address of the first VSC system NSG instances associated to this profile will be reaching for.

                
                This attribute is named `firstController` in VSD API.
                
        """
        return self._first_controller

    def _set_first_controller(self, value):
        """ Set first_controller value.

            Notes:
                First VSC Controller :  IP Address of the first VSC system NSG instances associated to this profile will be reaching for.

                
                This attribute is named `firstController` in VSD API.
                
        """
        self._first_controller = value

    first_controller = property(_get_first_controller, _set_first_controller)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Name of the Infrastructure Profile

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Name of the Infrastructure Profile

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_probe_interval(self):
        """ Get probe_interval value.

            Notes:
                Openflow echo timer in millisecond

                
                This attribute is named `probeInterval` in VSD API.
                
        """
        return self._probe_interval

    def _set_probe_interval(self, value):
        """ Set probe_interval value.

            Notes:
                Openflow echo timer in millisecond

                
                This attribute is named `probeInterval` in VSD API.
                
        """
        self._probe_interval = value

    probe_interval = property(_get_probe_interval, _set_probe_interval)
    
    def _get_second_controller(self):
        """ Get second_controller value.

            Notes:
                Second VSC Controller :  IP Address of the secondary VSC system NSG instances associated to this profile will be reaching for.

                
                This attribute is named `secondController` in VSD API.
                
        """
        return self._second_controller

    def _set_second_controller(self, value):
        """ Set second_controller value.

            Notes:
                Second VSC Controller :  IP Address of the secondary VSC system NSG instances associated to this profile will be reaching for.

                
                This attribute is named `secondController` in VSD API.
                
        """
        self._second_controller = value

    second_controller = property(_get_second_controller, _set_second_controller)
    