# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject
from time import time


class NULicense(NURESTObject):
    """ Represents a License in the VSD

        Notes:
            Enables retrieval/modification and creation of license files. Most of the attributes are retrieved from the encrypted license. The create API simply provides the encrypted license that is in base64 format

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NULicense instead.
    """

    __rest_name__ = u"license"
    __resource_name__ = u"licenses"

    def __init__(self, **kwargs):
        """ Initializes a License instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> license = NULicense(id=u'xxxx-xxx-xxx-xxx', name=u'License')
                >>> license = NULicense(data=my_dict)
        """

        super(NULicense, self).__init__()

        # Read/Write Attributes
        
        self._allowed_cpes_count = None
        self._allowed_nics_count = None
        self._allowed_vms_count = None
        self._allowed_vrsgs_count = None
        self._allowed_vrss_count = None
        self._city = None
        self._company = None
        self._country = None
        self._customer_key = None
        self._email = None
        self._encryption_mode = None
        self._expiration_date = None
        self._is_cluster_license = None
        self._license = None
        self._license_encryption = None
        self._license_id = None
        self._license_type = None
        self._major_release = None
        self._minor_release = None
        self._phone = None
        self._product_version = None
        self._provider = None
        self._state = None
        self._street = None
        self._user_name = None
        self._zip = None
        
        self.expose_attribute(local_name=u"allowed_cpes_count", remote_name=u"allowedCPEsCount", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"allowed_nics_count", remote_name=u"allowedNICsCount", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"allowed_vms_count", remote_name=u"allowedVMsCount", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"allowed_vrsgs_count", remote_name=u"allowedVRSGsCount", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"allowed_vrss_count", remote_name=u"allowedVRSsCount", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"city", remote_name=u"city", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"company", remote_name=u"company", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"country", remote_name=u"country", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"customer_key", remote_name=u"customerKey", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"email", remote_name=u"email", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"encryption_mode", remote_name=u"encryptionMode", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"expiration_date", remote_name=u"expirationDate", attribute_type=time, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"is_cluster_license", remote_name=u"isClusterLicense", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"license", remote_name=u"license", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"license_encryption", remote_name=u"licenseEncryption", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"license_id", remote_name=u"licenseID", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"license_type", remote_name=u"licenseType", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"major_release", remote_name=u"majorRelease", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"minor_release", remote_name=u"minorRelease", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"phone", remote_name=u"phone", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"product_version", remote_name=u"productVersion", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"provider", remote_name=u"provider", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"state", remote_name=u"state", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"street", remote_name=u"street", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"user_name", remote_name=u"userName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"zip", remote_name=u"zip", attribute_type=str, is_required=False, is_unique=False)
        
        # Fetchers
        
        self.event_logs = NUEventLogsFetcher.fetcher_with_object(parent_object=self)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_allowed_cpes_count(self):
        """ Get allowed_cpes_count value.

            Notes:
                Maximum number of CPEs enabled with this license. A value of -1 indicates an unlimited number of CPEs

                
                This attribute is named `allowedCPEsCount` in VSD API.
                
        """
        return self._allowed_cpes_count

    def _set_allowed_cpes_count(self, value):
        """ Set allowed_cpes_count value.

            Notes:
                Maximum number of CPEs enabled with this license. A value of -1 indicates an unlimited number of CPEs

                
                This attribute is named `allowedCPEsCount` in VSD API.
                
        """
        self._allowed_cpes_count = value

    allowed_cpes_count = property(_get_allowed_cpes_count, _set_allowed_cpes_count)
    
    def _get_allowed_nics_count(self):
        """ Get allowed_nics_count value.

            Notes:
                Maximum number of NICs allowed. A value of -1 indicates unlimited number of NICs

                
                This attribute is named `allowedNICsCount` in VSD API.
                
        """
        return self._allowed_nics_count

    def _set_allowed_nics_count(self, value):
        """ Set allowed_nics_count value.

            Notes:
                Maximum number of NICs allowed. A value of -1 indicates unlimited number of NICs

                
                This attribute is named `allowedNICsCount` in VSD API.
                
        """
        self._allowed_nics_count = value

    allowed_nics_count = property(_get_allowed_nics_count, _set_allowed_nics_count)
    
    def _get_allowed_vms_count(self):
        """ Get allowed_vms_count value.

            Notes:
                Maximum number of VMs enabled with this license. A value of -1 indicates an unlimited number of VMs

                
                This attribute is named `allowedVMsCount` in VSD API.
                
        """
        return self._allowed_vms_count

    def _set_allowed_vms_count(self, value):
        """ Set allowed_vms_count value.

            Notes:
                Maximum number of VMs enabled with this license. A value of -1 indicates an unlimited number of VMs

                
                This attribute is named `allowedVMsCount` in VSD API.
                
        """
        self._allowed_vms_count = value

    allowed_vms_count = property(_get_allowed_vms_count, _set_allowed_vms_count)
    
    def _get_allowed_vrsgs_count(self):
        """ Get allowed_vrsgs_count value.

            Notes:
                Maximum number of VRSGs enabled with this license. A value of -1 indicates an unlimited number of VRSGs

                
                This attribute is named `allowedVRSGsCount` in VSD API.
                
        """
        return self._allowed_vrsgs_count

    def _set_allowed_vrsgs_count(self, value):
        """ Set allowed_vrsgs_count value.

            Notes:
                Maximum number of VRSGs enabled with this license. A value of -1 indicates an unlimited number of VRSGs

                
                This attribute is named `allowedVRSGsCount` in VSD API.
                
        """
        self._allowed_vrsgs_count = value

    allowed_vrsgs_count = property(_get_allowed_vrsgs_count, _set_allowed_vrsgs_count)
    
    def _get_allowed_vrss_count(self):
        """ Get allowed_vrss_count value.

            Notes:
                Maximum number of VRSs enabled with this license. A value of -1 indicates an unlimited number of VRSs

                
                This attribute is named `allowedVRSsCount` in VSD API.
                
        """
        return self._allowed_vrss_count

    def _set_allowed_vrss_count(self, value):
        """ Set allowed_vrss_count value.

            Notes:
                Maximum number of VRSs enabled with this license. A value of -1 indicates an unlimited number of VRSs

                
                This attribute is named `allowedVRSsCount` in VSD API.
                
        """
        self._allowed_vrss_count = value

    allowed_vrss_count = property(_get_allowed_vrss_count, _set_allowed_vrss_count)
    
    def _get_city(self):
        """ Get city value.

            Notes:
                City of the owner associated with the license file

                
        """
        return self._city

    def _set_city(self, value):
        """ Set city value.

            Notes:
                City of the owner associated with the license file

                
        """
        self._city = value

    city = property(_get_city, _set_city)
    
    def _get_company(self):
        """ Get company value.

            Notes:
                Company of the owner associated with the license file

                
        """
        return self._company

    def _set_company(self, value):
        """ Set company value.

            Notes:
                Company of the owner associated with the license file

                
        """
        self._company = value

    company = property(_get_company, _set_company)
    
    def _get_country(self):
        """ Get country value.

            Notes:
                Country of the owner associated with the license file

                
        """
        return self._country

    def _set_country(self, value):
        """ Set country value.

            Notes:
                Country of the owner associated with the license file

                
        """
        self._country = value

    country = property(_get_country, _set_country)
    
    def _get_customer_key(self):
        """ Get customer_key value.

            Notes:
                Customer key associated with the licese

                
                This attribute is named `customerKey` in VSD API.
                
        """
        return self._customer_key

    def _set_customer_key(self, value):
        """ Set customer_key value.

            Notes:
                Customer key associated with the licese

                
                This attribute is named `customerKey` in VSD API.
                
        """
        self._customer_key = value

    customer_key = property(_get_customer_key, _set_customer_key)
    
    def _get_email(self):
        """ Get email value.

            Notes:
                Email of the owner associated with the license file

                
        """
        return self._email

    def _set_email(self, value):
        """ Set email value.

            Notes:
                Email of the owner associated with the license file

                
        """
        self._email = value

    email = property(_get_email, _set_email)
    
    def _get_encryption_mode(self):
        """ Get encryption_mode value.

            Notes:
                Indicates if the system is associated with a license that allows encryption or not

                
                This attribute is named `encryptionMode` in VSD API.
                
        """
        return self._encryption_mode

    def _set_encryption_mode(self, value):
        """ Set encryption_mode value.

            Notes:
                Indicates if the system is associated with a license that allows encryption or not

                
                This attribute is named `encryptionMode` in VSD API.
                
        """
        self._encryption_mode = value

    encryption_mode = property(_get_encryption_mode, _set_encryption_mode)
    
    def _get_expiration_date(self):
        """ Get expiration_date value.

            Notes:
                Expiration date of this license

                
                This attribute is named `expirationDate` in VSD API.
                
        """
        return self._expiration_date

    def _set_expiration_date(self, value):
        """ Set expiration_date value.

            Notes:
                Expiration date of this license

                
                This attribute is named `expirationDate` in VSD API.
                
        """
        self._expiration_date = value

    expiration_date = property(_get_expiration_date, _set_expiration_date)
    
    def _get_is_cluster_license(self):
        """ Get is_cluster_license value.

            Notes:
                Indicates if the license is associated with standlone or cluster setup of VSD

                
                This attribute is named `isClusterLicense` in VSD API.
                
        """
        return self._is_cluster_license

    def _set_is_cluster_license(self, value):
        """ Set is_cluster_license value.

            Notes:
                Indicates if the license is associated with standlone or cluster setup of VSD

                
                This attribute is named `isClusterLicense` in VSD API.
                
        """
        self._is_cluster_license = value

    is_cluster_license = property(_get_is_cluster_license, _set_is_cluster_license)
    
    def _get_license(self):
        """ Get license value.

            Notes:
                Base 64 value of the license

                
        """
        return self._license

    def _set_license(self, value):
        """ Set license value.

            Notes:
                Base 64 value of the license

                
        """
        self._license = value

    license = property(_get_license, _set_license)
    
    def _get_license_encryption(self):
        """ Get license_encryption value.

            Notes:
                

                
                This attribute is named `licenseEncryption` in VSD API.
                
        """
        return self._license_encryption

    def _set_license_encryption(self, value):
        """ Set license_encryption value.

            Notes:
                

                
                This attribute is named `licenseEncryption` in VSD API.
                
        """
        self._license_encryption = value

    license_encryption = property(_get_license_encryption, _set_license_encryption)
    
    def _get_license_id(self):
        """ Get license_id value.

            Notes:
                Unique identifier of the license file

                
                This attribute is named `licenseID` in VSD API.
                
        """
        return self._license_id

    def _set_license_id(self, value):
        """ Set license_id value.

            Notes:
                Unique identifier of the license file

                
                This attribute is named `licenseID` in VSD API.
                
        """
        self._license_id = value

    license_id = property(_get_license_id, _set_license_id)
    
    def _get_license_type(self):
        """ Get license_type value.

            Notes:
                

                
                This attribute is named `licenseType` in VSD API.
                
        """
        return self._license_type

    def _set_license_type(self, value):
        """ Set license_type value.

            Notes:
                

                
                This attribute is named `licenseType` in VSD API.
                
        """
        self._license_type = value

    license_type = property(_get_license_type, _set_license_type)
    
    def _get_major_release(self):
        """ Get major_release value.

            Notes:
                Major software release associated with this license

                
                This attribute is named `majorRelease` in VSD API.
                
        """
        return self._major_release

    def _set_major_release(self, value):
        """ Set major_release value.

            Notes:
                Major software release associated with this license

                
                This attribute is named `majorRelease` in VSD API.
                
        """
        self._major_release = value

    major_release = property(_get_major_release, _set_major_release)
    
    def _get_minor_release(self):
        """ Get minor_release value.

            Notes:
                Minor software release for which this license has been issued

                
                This attribute is named `minorRelease` in VSD API.
                
        """
        return self._minor_release

    def _set_minor_release(self, value):
        """ Set minor_release value.

            Notes:
                Minor software release for which this license has been issued

                
                This attribute is named `minorRelease` in VSD API.
                
        """
        self._minor_release = value

    minor_release = property(_get_minor_release, _set_minor_release)
    
    def _get_phone(self):
        """ Get phone value.

            Notes:
                Phone number of the owner associated with the license file

                
        """
        return self._phone

    def _set_phone(self, value):
        """ Set phone value.

            Notes:
                Phone number of the owner associated with the license file

                
        """
        self._phone = value

    phone = property(_get_phone, _set_phone)
    
    def _get_product_version(self):
        """ Get product_version value.

            Notes:
                Version of the product that this license applies to

                
                This attribute is named `productVersion` in VSD API.
                
        """
        return self._product_version

    def _set_product_version(self, value):
        """ Set product_version value.

            Notes:
                Version of the product that this license applies to

                
                This attribute is named `productVersion` in VSD API.
                
        """
        self._product_version = value

    product_version = property(_get_product_version, _set_product_version)
    
    def _get_provider(self):
        """ Get provider value.

            Notes:
                Provider of the license file

                
        """
        return self._provider

    def _set_provider(self, value):
        """ Set provider value.

            Notes:
                Provider of the license file

                
        """
        self._provider = value

    provider = property(_get_provider, _set_provider)
    
    def _get_state(self):
        """ Get state value.

            Notes:
                State of the owner associated with the license file

                
        """
        return self._state

    def _set_state(self, value):
        """ Set state value.

            Notes:
                State of the owner associated with the license file

                
        """
        self._state = value

    state = property(_get_state, _set_state)
    
    def _get_street(self):
        """ Get street value.

            Notes:
                Address of the owner associated with the license file

                
        """
        return self._street

    def _set_street(self, value):
        """ Set street value.

            Notes:
                Address of the owner associated with the license file

                
        """
        self._street = value

    street = property(_get_street, _set_street)
    
    def _get_user_name(self):
        """ Get user_name value.

            Notes:
                The name of the user associated with the license

                
                This attribute is named `userName` in VSD API.
                
        """
        return self._user_name

    def _set_user_name(self, value):
        """ Set user_name value.

            Notes:
                The name of the user associated with the license

                
                This attribute is named `userName` in VSD API.
                
        """
        self._user_name = value

    user_name = property(_get_user_name, _set_user_name)
    
    def _get_zip(self):
        """ Get zip value.

            Notes:
                Zipcode of the owner associated with the license file

                
        """
        return self._zip

    def _set_zip(self, value):
        """ Set zip value.

            Notes:
                Zipcode of the owner associated with the license file

                
        """
        self._zip = value

    zip = property(_get_zip, _set_zip)
    