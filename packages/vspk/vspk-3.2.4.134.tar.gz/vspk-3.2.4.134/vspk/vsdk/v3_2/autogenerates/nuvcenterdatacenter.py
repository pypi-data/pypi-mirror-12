# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUVCenterClustersFetcher
from ..fetchers import NUVCenterVRSAddressRangesFetcher
from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUVCenterDataCenter(NURESTObject):
    """ Represents a VCenterDataCenter in the VSD

        Notes:
            VCenter DataCenters

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUVCenterDataCenter instead.
    """

    __rest_name__ = u"vcenterdatacenter"
    __resource_name__ = u"vcenterdatacenters"

    def __init__(self, **kwargs):
        """ Initializes a VCenterDataCenter instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> vcenterdatacenter = NUVCenterDataCenter(id=u'xxxx-xxx-xxx-xxx', name=u'VCenterDataCenter')
                >>> vcenterdatacenter = NUVCenterDataCenter(data=my_dict)
        """

        super(NUVCenterDataCenter, self).__init__()

        # Read/Write Attributes
        
        self._allow_data_dhcp = None
        self._allow_mgmt_dhcp = None
        self._associated_vcenter_id = None
        self._customized_script_url = None
        self._data_dns1 = None
        self._data_dns2 = None
        self._data_gateway = None
        self._data_network_portgroup = None
        self._datapath_sync_timeout = None
        self._description = None
        self._dhcp_relay_server = None
        self._flow_eviction_threshold = None
        self._metadata_server_ip = None
        self._metadata_server_listen_port = None
        self._metadata_server_port = None
        self._metadata_service_enabled = None
        self._mgmt_dns1 = None
        self._mgmt_dns2 = None
        self._mgmt_gateway = None
        self._mgmt_network_portgroup = None
        self._mtu = None
        self._multi_vmssupport = None
        self._multicast_receive_interface = None
        self._multicast_receive_interface_ip = None
        self._multicast_receive_interface_netmask = None
        self._multicast_receive_range = None
        self._multicast_send_interface = None
        self._multicast_send_interface_ip = None
        self._multicast_send_interface_netmask = None
        self._multicast_source_portgroup = None
        self._name = None
        self._network_uplink_interface = None
        self._network_uplink_interface_gateway = None
        self._network_uplink_interface_ip = None
        self._network_uplink_interface_netmask = None
        self._nfs_log_server = None
        self._nfs_mount_path = None
        self._nova_client_version = None
        self._nova_metadata_service_auth_url = None
        self._nova_metadata_service_endpoint = None
        self._nova_metadata_service_password = None
        self._nova_metadata_service_tenant = None
        self._nova_metadata_service_username = None
        self._nova_metadata_shared_secret = None
        self._nova_region_name = None
        self._ntp_server1 = None
        self._ntp_server2 = None
        self._personality = None
        self._portgroup_metadata = None
        self._primary_nuage_controller = None
        self._secondary_nuage_controller = None
        self._separate_data_network = None
        self._site_id = None
        self._static_route = None
        self._static_route_gateway = None
        self._static_route_netmask = None
        self._v_require_nuage_metadata = None
        self._vm_network_portgroup = None
        self._vrs_password = None
        self._vrs_user_name = None
        
        self.expose_attribute(local_name=u"allow_data_dhcp", remote_name=u"allowDataDHCP", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"allow_mgmt_dhcp", remote_name=u"allowMgmtDHCP", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"associated_vcenter_id", remote_name=u"associatedVCenterID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"customized_script_url", remote_name=u"customizedScriptURL", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"data_dns1", remote_name=u"dataDNS1", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"data_dns2", remote_name=u"dataDNS2", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"data_gateway", remote_name=u"dataGateway", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"data_network_portgroup", remote_name=u"dataNetworkPortgroup", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"datapath_sync_timeout", remote_name=u"datapathSyncTimeout", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"dhcp_relay_server", remote_name=u"dhcpRelayServer", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"flow_eviction_threshold", remote_name=u"flowEvictionThreshold", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"metadata_server_ip", remote_name=u"metadataServerIP", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"metadata_server_listen_port", remote_name=u"metadataServerListenPort", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"metadata_server_port", remote_name=u"metadataServerPort", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"metadata_service_enabled", remote_name=u"metadataServiceEnabled", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"mgmt_dns1", remote_name=u"mgmtDNS1", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"mgmt_dns2", remote_name=u"mgmtDNS2", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"mgmt_gateway", remote_name=u"mgmtGateway", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"mgmt_network_portgroup", remote_name=u"mgmtNetworkPortgroup", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"mtu", remote_name=u"mtu", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multi_vmssupport", remote_name=u"multiVMSsupport", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multicast_receive_interface", remote_name=u"multicastReceiveInterface", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multicast_receive_interface_ip", remote_name=u"multicastReceiveInterfaceIP", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multicast_receive_interface_netmask", remote_name=u"multicastReceiveInterfaceNetmask", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multicast_receive_range", remote_name=u"multicastReceiveRange", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multicast_send_interface", remote_name=u"multicastSendInterface", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multicast_send_interface_ip", remote_name=u"multicastSendInterfaceIP", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multicast_send_interface_netmask", remote_name=u"multicastSendInterfaceNetmask", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multicast_source_portgroup", remote_name=u"multicastSourcePortgroup", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"network_uplink_interface", remote_name=u"networkUplinkInterface", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"network_uplink_interface_gateway", remote_name=u"networkUplinkInterfaceGateway", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"network_uplink_interface_ip", remote_name=u"networkUplinkInterfaceIp", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"network_uplink_interface_netmask", remote_name=u"networkUplinkInterfaceNetmask", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nfs_log_server", remote_name=u"nfsLogServer", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nfs_mount_path", remote_name=u"nfsMountPath", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nova_client_version", remote_name=u"novaClientVersion", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nova_metadata_service_auth_url", remote_name=u"novaMetadataServiceAuthUrl", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nova_metadata_service_endpoint", remote_name=u"novaMetadataServiceEndpoint", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nova_metadata_service_password", remote_name=u"novaMetadataServicePassword", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nova_metadata_service_tenant", remote_name=u"novaMetadataServiceTenant", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nova_metadata_service_username", remote_name=u"novaMetadataServiceUsername", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nova_metadata_shared_secret", remote_name=u"novaMetadataSharedSecret", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"nova_region_name", remote_name=u"novaRegionName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ntp_server1", remote_name=u"ntpServer1", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ntp_server2", remote_name=u"ntpServer2", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"personality", remote_name=u"personality", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"portgroup_metadata", remote_name=u"portgroupMetadata", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"primary_nuage_controller", remote_name=u"primaryNuageController", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"secondary_nuage_controller", remote_name=u"secondaryNuageController", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"separate_data_network", remote_name=u"separateDataNetwork", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"site_id", remote_name=u"siteId", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"static_route", remote_name=u"staticRoute", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"static_route_gateway", remote_name=u"staticRouteGateway", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"static_route_netmask", remote_name=u"staticRouteNetmask", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"v_require_nuage_metadata", remote_name=u"vRequireNuageMetadata", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vm_network_portgroup", remote_name=u"vmNetworkPortgroup", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vrs_password", remote_name=u"vrsPassword", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vrs_user_name", remote_name=u"vrsUserName", attribute_type=str, is_required=False, is_unique=False)
        
        # Fetchers
        
        self.vcenter_clusters = NUVCenterClustersFetcher.fetcher_with_object(parent_object=self)
        
        self.vcenter_vrs_address_ranges = NUVCenterVRSAddressRangesFetcher.fetcher_with_object(parent_object=self)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_allow_data_dhcp(self):
        """ Get allow_data_dhcp value.

            Notes:
                Whether to get the Data IP for the VRS VM from DHCP or statically

                
                This attribute is named `allowDataDHCP` in VSD API.
                
        """
        return self._allow_data_dhcp

    def _set_allow_data_dhcp(self, value):
        """ Set allow_data_dhcp value.

            Notes:
                Whether to get the Data IP for the VRS VM from DHCP or statically

                
                This attribute is named `allowDataDHCP` in VSD API.
                
        """
        self._allow_data_dhcp = value

    allow_data_dhcp = property(_get_allow_data_dhcp, _set_allow_data_dhcp)
    
    def _get_allow_mgmt_dhcp(self):
        """ Get allow_mgmt_dhcp value.

            Notes:
                Whether to get the management IP for the VRS VM from DHCP or statically

                
                This attribute is named `allowMgmtDHCP` in VSD API.
                
        """
        return self._allow_mgmt_dhcp

    def _set_allow_mgmt_dhcp(self, value):
        """ Set allow_mgmt_dhcp value.

            Notes:
                Whether to get the management IP for the VRS VM from DHCP or statically

                
                This attribute is named `allowMgmtDHCP` in VSD API.
                
        """
        self._allow_mgmt_dhcp = value

    allow_mgmt_dhcp = property(_get_allow_mgmt_dhcp, _set_allow_mgmt_dhcp)
    
    def _get_associated_vcenter_id(self):
        """ Get associated_vcenter_id value.

            Notes:
                The ID of the vcenter to which this host is attached

                
                This attribute is named `associatedVCenterID` in VSD API.
                
        """
        return self._associated_vcenter_id

    def _set_associated_vcenter_id(self, value):
        """ Set associated_vcenter_id value.

            Notes:
                The ID of the vcenter to which this host is attached

                
                This attribute is named `associatedVCenterID` in VSD API.
                
        """
        self._associated_vcenter_id = value

    associated_vcenter_id = property(_get_associated_vcenter_id, _set_associated_vcenter_id)
    
    def _get_customized_script_url(self):
        """ Get customized_script_url value.

            Notes:
                To provide a URL to install a custom app on VRS

                
                This attribute is named `customizedScriptURL` in VSD API.
                
        """
        return self._customized_script_url

    def _set_customized_script_url(self, value):
        """ Set customized_script_url value.

            Notes:
                To provide a URL to install a custom app on VRS

                
                This attribute is named `customizedScriptURL` in VSD API.
                
        """
        self._customized_script_url = value

    customized_script_url = property(_get_customized_script_url, _set_customized_script_url)
    
    def _get_data_dns1(self):
        """ Get data_dns1 value.

            Notes:
                Data DNS 1

                
                This attribute is named `dataDNS1` in VSD API.
                
        """
        return self._data_dns1

    def _set_data_dns1(self, value):
        """ Set data_dns1 value.

            Notes:
                Data DNS 1

                
                This attribute is named `dataDNS1` in VSD API.
                
        """
        self._data_dns1 = value

    data_dns1 = property(_get_data_dns1, _set_data_dns1)
    
    def _get_data_dns2(self):
        """ Get data_dns2 value.

            Notes:
                Data DNS 2

                
                This attribute is named `dataDNS2` in VSD API.
                
        """
        return self._data_dns2

    def _set_data_dns2(self, value):
        """ Set data_dns2 value.

            Notes:
                Data DNS 2

                
                This attribute is named `dataDNS2` in VSD API.
                
        """
        self._data_dns2 = value

    data_dns2 = property(_get_data_dns2, _set_data_dns2)
    
    def _get_data_gateway(self):
        """ Get data_gateway value.

            Notes:
                Data Gateway

                
                This attribute is named `dataGateway` in VSD API.
                
        """
        return self._data_gateway

    def _set_data_gateway(self, value):
        """ Set data_gateway value.

            Notes:
                Data Gateway

                
                This attribute is named `dataGateway` in VSD API.
                
        """
        self._data_gateway = value

    data_gateway = property(_get_data_gateway, _set_data_gateway)
    
    def _get_data_network_portgroup(self):
        """ Get data_network_portgroup value.

            Notes:
                Data Network Port Group

                
                This attribute is named `dataNetworkPortgroup` in VSD API.
                
        """
        return self._data_network_portgroup

    def _set_data_network_portgroup(self, value):
        """ Set data_network_portgroup value.

            Notes:
                Data Network Port Group

                
                This attribute is named `dataNetworkPortgroup` in VSD API.
                
        """
        self._data_network_portgroup = value

    data_network_portgroup = property(_get_data_network_portgroup, _set_data_network_portgroup)
    
    def _get_datapath_sync_timeout(self):
        """ Get datapath_sync_timeout value.

            Notes:
                Datapath Sync Timeout

                
                This attribute is named `datapathSyncTimeout` in VSD API.
                
        """
        return self._datapath_sync_timeout

    def _set_datapath_sync_timeout(self, value):
        """ Set datapath_sync_timeout value.

            Notes:
                Datapath Sync Timeout

                
                This attribute is named `datapathSyncTimeout` in VSD API.
                
        """
        self._datapath_sync_timeout = value

    datapath_sync_timeout = property(_get_datapath_sync_timeout, _set_datapath_sync_timeout)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Description of the Datacenter

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Description of the Datacenter

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_dhcp_relay_server(self):
        """ Get dhcp_relay_server value.

            Notes:
                To provide IP address of the interface from which you will connect to the DHCP relay server

                
                This attribute is named `dhcpRelayServer` in VSD API.
                
        """
        return self._dhcp_relay_server

    def _set_dhcp_relay_server(self, value):
        """ Set dhcp_relay_server value.

            Notes:
                To provide IP address of the interface from which you will connect to the DHCP relay server

                
                This attribute is named `dhcpRelayServer` in VSD API.
                
        """
        self._dhcp_relay_server = value

    dhcp_relay_server = property(_get_dhcp_relay_server, _set_dhcp_relay_server)
    
    def _get_flow_eviction_threshold(self):
        """ Get flow_eviction_threshold value.

            Notes:
                Flow Eviction Threshold

                
                This attribute is named `flowEvictionThreshold` in VSD API.
                
        """
        return self._flow_eviction_threshold

    def _set_flow_eviction_threshold(self, value):
        """ Set flow_eviction_threshold value.

            Notes:
                Flow Eviction Threshold

                
                This attribute is named `flowEvictionThreshold` in VSD API.
                
        """
        self._flow_eviction_threshold = value

    flow_eviction_threshold = property(_get_flow_eviction_threshold, _set_flow_eviction_threshold)
    
    def _get_metadata_server_ip(self):
        """ Get metadata_server_ip value.

            Notes:
                Metadata Server IP

                
                This attribute is named `metadataServerIP` in VSD API.
                
        """
        return self._metadata_server_ip

    def _set_metadata_server_ip(self, value):
        """ Set metadata_server_ip value.

            Notes:
                Metadata Server IP

                
                This attribute is named `metadataServerIP` in VSD API.
                
        """
        self._metadata_server_ip = value

    metadata_server_ip = property(_get_metadata_server_ip, _set_metadata_server_ip)
    
    def _get_metadata_server_listen_port(self):
        """ Get metadata_server_listen_port value.

            Notes:
                Metadata Server Listen Port

                
                This attribute is named `metadataServerListenPort` in VSD API.
                
        """
        return self._metadata_server_listen_port

    def _set_metadata_server_listen_port(self, value):
        """ Set metadata_server_listen_port value.

            Notes:
                Metadata Server Listen Port

                
                This attribute is named `metadataServerListenPort` in VSD API.
                
        """
        self._metadata_server_listen_port = value

    metadata_server_listen_port = property(_get_metadata_server_listen_port, _set_metadata_server_listen_port)
    
    def _get_metadata_server_port(self):
        """ Get metadata_server_port value.

            Notes:
                Metadata Server Port

                
                This attribute is named `metadataServerPort` in VSD API.
                
        """
        return self._metadata_server_port

    def _set_metadata_server_port(self, value):
        """ Set metadata_server_port value.

            Notes:
                Metadata Server Port

                
                This attribute is named `metadataServerPort` in VSD API.
                
        """
        self._metadata_server_port = value

    metadata_server_port = property(_get_metadata_server_port, _set_metadata_server_port)
    
    def _get_metadata_service_enabled(self):
        """ Get metadata_service_enabled value.

            Notes:
                Metadata Service Enabled

                
                This attribute is named `metadataServiceEnabled` in VSD API.
                
        """
        return self._metadata_service_enabled

    def _set_metadata_service_enabled(self, value):
        """ Set metadata_service_enabled value.

            Notes:
                Metadata Service Enabled

                
                This attribute is named `metadataServiceEnabled` in VSD API.
                
        """
        self._metadata_service_enabled = value

    metadata_service_enabled = property(_get_metadata_service_enabled, _set_metadata_service_enabled)
    
    def _get_mgmt_dns1(self):
        """ Get mgmt_dns1 value.

            Notes:
                DNS server 1

                
                This attribute is named `mgmtDNS1` in VSD API.
                
        """
        return self._mgmt_dns1

    def _set_mgmt_dns1(self, value):
        """ Set mgmt_dns1 value.

            Notes:
                DNS server 1

                
                This attribute is named `mgmtDNS1` in VSD API.
                
        """
        self._mgmt_dns1 = value

    mgmt_dns1 = property(_get_mgmt_dns1, _set_mgmt_dns1)
    
    def _get_mgmt_dns2(self):
        """ Get mgmt_dns2 value.

            Notes:
                DNS server 2

                
                This attribute is named `mgmtDNS2` in VSD API.
                
        """
        return self._mgmt_dns2

    def _set_mgmt_dns2(self, value):
        """ Set mgmt_dns2 value.

            Notes:
                DNS server 2

                
                This attribute is named `mgmtDNS2` in VSD API.
                
        """
        self._mgmt_dns2 = value

    mgmt_dns2 = property(_get_mgmt_dns2, _set_mgmt_dns2)
    
    def _get_mgmt_gateway(self):
        """ Get mgmt_gateway value.

            Notes:
                Gateway for the IP address

                
                This attribute is named `mgmtGateway` in VSD API.
                
        """
        return self._mgmt_gateway

    def _set_mgmt_gateway(self, value):
        """ Set mgmt_gateway value.

            Notes:
                Gateway for the IP address

                
                This attribute is named `mgmtGateway` in VSD API.
                
        """
        self._mgmt_gateway = value

    mgmt_gateway = property(_get_mgmt_gateway, _set_mgmt_gateway)
    
    def _get_mgmt_network_portgroup(self):
        """ Get mgmt_network_portgroup value.

            Notes:
                Management Network Port group

                
                This attribute is named `mgmtNetworkPortgroup` in VSD API.
                
        """
        return self._mgmt_network_portgroup

    def _set_mgmt_network_portgroup(self, value):
        """ Set mgmt_network_portgroup value.

            Notes:
                Management Network Port group

                
                This attribute is named `mgmtNetworkPortgroup` in VSD API.
                
        """
        self._mgmt_network_portgroup = value

    mgmt_network_portgroup = property(_get_mgmt_network_portgroup, _set_mgmt_network_portgroup)
    
    def _get_mtu(self):
        """ Get mtu value.

            Notes:
                Maximum Transmission Unit for eth2 interface

                
        """
        return self._mtu

    def _set_mtu(self, value):
        """ Set mtu value.

            Notes:
                Maximum Transmission Unit for eth2 interface

                
        """
        self._mtu = value

    mtu = property(_get_mtu, _set_mtu)
    
    def _get_multi_vmssupport(self):
        """ Get multi_vmssupport value.

            Notes:
                Whether Multi VM is to be used or not

                
                This attribute is named `multiVMSsupport` in VSD API.
                
        """
        return self._multi_vmssupport

    def _set_multi_vmssupport(self, value):
        """ Set multi_vmssupport value.

            Notes:
                Whether Multi VM is to be used or not

                
                This attribute is named `multiVMSsupport` in VSD API.
                
        """
        self._multi_vmssupport = value

    multi_vmssupport = property(_get_multi_vmssupport, _set_multi_vmssupport)
    
    def _get_multicast_receive_interface(self):
        """ Get multicast_receive_interface value.

            Notes:
                Multicast Receive Interface

                
                This attribute is named `multicastReceiveInterface` in VSD API.
                
        """
        return self._multicast_receive_interface

    def _set_multicast_receive_interface(self, value):
        """ Set multicast_receive_interface value.

            Notes:
                Multicast Receive Interface

                
                This attribute is named `multicastReceiveInterface` in VSD API.
                
        """
        self._multicast_receive_interface = value

    multicast_receive_interface = property(_get_multicast_receive_interface, _set_multicast_receive_interface)
    
    def _get_multicast_receive_interface_ip(self):
        """ Get multicast_receive_interface_ip value.

            Notes:
                IP address for eth3 interface

                
                This attribute is named `multicastReceiveInterfaceIP` in VSD API.
                
        """
        return self._multicast_receive_interface_ip

    def _set_multicast_receive_interface_ip(self, value):
        """ Set multicast_receive_interface_ip value.

            Notes:
                IP address for eth3 interface

                
                This attribute is named `multicastReceiveInterfaceIP` in VSD API.
                
        """
        self._multicast_receive_interface_ip = value

    multicast_receive_interface_ip = property(_get_multicast_receive_interface_ip, _set_multicast_receive_interface_ip)
    
    def _get_multicast_receive_interface_netmask(self):
        """ Get multicast_receive_interface_netmask value.

            Notes:
                Multicast Interface netmask

                
                This attribute is named `multicastReceiveInterfaceNetmask` in VSD API.
                
        """
        return self._multicast_receive_interface_netmask

    def _set_multicast_receive_interface_netmask(self, value):
        """ Set multicast_receive_interface_netmask value.

            Notes:
                Multicast Interface netmask

                
                This attribute is named `multicastReceiveInterfaceNetmask` in VSD API.
                
        """
        self._multicast_receive_interface_netmask = value

    multicast_receive_interface_netmask = property(_get_multicast_receive_interface_netmask, _set_multicast_receive_interface_netmask)
    
    def _get_multicast_receive_range(self):
        """ Get multicast_receive_range value.

            Notes:
                Allowed Range to receive the Multicast traffic from

                
                This attribute is named `multicastReceiveRange` in VSD API.
                
        """
        return self._multicast_receive_range

    def _set_multicast_receive_range(self, value):
        """ Set multicast_receive_range value.

            Notes:
                Allowed Range to receive the Multicast traffic from

                
                This attribute is named `multicastReceiveRange` in VSD API.
                
        """
        self._multicast_receive_range = value

    multicast_receive_range = property(_get_multicast_receive_range, _set_multicast_receive_range)
    
    def _get_multicast_send_interface(self):
        """ Get multicast_send_interface value.

            Notes:
                Multicast Send Interface

                
                This attribute is named `multicastSendInterface` in VSD API.
                
        """
        return self._multicast_send_interface

    def _set_multicast_send_interface(self, value):
        """ Set multicast_send_interface value.

            Notes:
                Multicast Send Interface

                
                This attribute is named `multicastSendInterface` in VSD API.
                
        """
        self._multicast_send_interface = value

    multicast_send_interface = property(_get_multicast_send_interface, _set_multicast_send_interface)
    
    def _get_multicast_send_interface_ip(self):
        """ Get multicast_send_interface_ip value.

            Notes:
                IP address for eth3 interface

                
                This attribute is named `multicastSendInterfaceIP` in VSD API.
                
        """
        return self._multicast_send_interface_ip

    def _set_multicast_send_interface_ip(self, value):
        """ Set multicast_send_interface_ip value.

            Notes:
                IP address for eth3 interface

                
                This attribute is named `multicastSendInterfaceIP` in VSD API.
                
        """
        self._multicast_send_interface_ip = value

    multicast_send_interface_ip = property(_get_multicast_send_interface_ip, _set_multicast_send_interface_ip)
    
    def _get_multicast_send_interface_netmask(self):
        """ Get multicast_send_interface_netmask value.

            Notes:
                Multicast Interface netmask

                
                This attribute is named `multicastSendInterfaceNetmask` in VSD API.
                
        """
        return self._multicast_send_interface_netmask

    def _set_multicast_send_interface_netmask(self, value):
        """ Set multicast_send_interface_netmask value.

            Notes:
                Multicast Interface netmask

                
                This attribute is named `multicastSendInterfaceNetmask` in VSD API.
                
        """
        self._multicast_send_interface_netmask = value

    multicast_send_interface_netmask = property(_get_multicast_send_interface_netmask, _set_multicast_send_interface_netmask)
    
    def _get_multicast_source_portgroup(self):
        """ Get multicast_source_portgroup value.

            Notes:
                Multi Cast Source Port Group Name

                
                This attribute is named `multicastSourcePortgroup` in VSD API.
                
        """
        return self._multicast_source_portgroup

    def _set_multicast_source_portgroup(self, value):
        """ Set multicast_source_portgroup value.

            Notes:
                Multi Cast Source Port Group Name

                
                This attribute is named `multicastSourcePortgroup` in VSD API.
                
        """
        self._multicast_source_portgroup = value

    multicast_source_portgroup = property(_get_multicast_source_portgroup, _set_multicast_source_portgroup)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Name of the Datacenter

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Name of the Datacenter

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_network_uplink_interface(self):
        """ Get network_uplink_interface value.

            Notes:
                Network Upling Interface to support PAT/NAT with no tunnels on VRS-VM

                
                This attribute is named `networkUplinkInterface` in VSD API.
                
        """
        return self._network_uplink_interface

    def _set_network_uplink_interface(self, value):
        """ Set network_uplink_interface value.

            Notes:
                Network Upling Interface to support PAT/NAT with no tunnels on VRS-VM

                
                This attribute is named `networkUplinkInterface` in VSD API.
                
        """
        self._network_uplink_interface = value

    network_uplink_interface = property(_get_network_uplink_interface, _set_network_uplink_interface)
    
    def _get_network_uplink_interface_gateway(self):
        """ Get network_uplink_interface_gateway value.

            Notes:
                Network Uplink Interface Gateway

                
                This attribute is named `networkUplinkInterfaceGateway` in VSD API.
                
        """
        return self._network_uplink_interface_gateway

    def _set_network_uplink_interface_gateway(self, value):
        """ Set network_uplink_interface_gateway value.

            Notes:
                Network Uplink Interface Gateway

                
                This attribute is named `networkUplinkInterfaceGateway` in VSD API.
                
        """
        self._network_uplink_interface_gateway = value

    network_uplink_interface_gateway = property(_get_network_uplink_interface_gateway, _set_network_uplink_interface_gateway)
    
    def _get_network_uplink_interface_ip(self):
        """ Get network_uplink_interface_ip value.

            Notes:
                Ip Address to support PAT/NAT with no tunnels on VRS-VM

                
                This attribute is named `networkUplinkInterfaceIp` in VSD API.
                
        """
        return self._network_uplink_interface_ip

    def _set_network_uplink_interface_ip(self, value):
        """ Set network_uplink_interface_ip value.

            Notes:
                Ip Address to support PAT/NAT with no tunnels on VRS-VM

                
                This attribute is named `networkUplinkInterfaceIp` in VSD API.
                
        """
        self._network_uplink_interface_ip = value

    network_uplink_interface_ip = property(_get_network_uplink_interface_ip, _set_network_uplink_interface_ip)
    
    def _get_network_uplink_interface_netmask(self):
        """ Get network_uplink_interface_netmask value.

            Notes:
                Network Uplink Interface Netmask

                
                This attribute is named `networkUplinkInterfaceNetmask` in VSD API.
                
        """
        return self._network_uplink_interface_netmask

    def _set_network_uplink_interface_netmask(self, value):
        """ Set network_uplink_interface_netmask value.

            Notes:
                Network Uplink Interface Netmask

                
                This attribute is named `networkUplinkInterfaceNetmask` in VSD API.
                
        """
        self._network_uplink_interface_netmask = value

    network_uplink_interface_netmask = property(_get_network_uplink_interface_netmask, _set_network_uplink_interface_netmask)
    
    def _get_nfs_log_server(self):
        """ Get nfs_log_server value.

            Notes:
                IP address of NFS server to send the VRS log

                
                This attribute is named `nfsLogServer` in VSD API.
                
        """
        return self._nfs_log_server

    def _set_nfs_log_server(self, value):
        """ Set nfs_log_server value.

            Notes:
                IP address of NFS server to send the VRS log

                
                This attribute is named `nfsLogServer` in VSD API.
                
        """
        self._nfs_log_server = value

    nfs_log_server = property(_get_nfs_log_server, _set_nfs_log_server)
    
    def _get_nfs_mount_path(self):
        """ Get nfs_mount_path value.

            Notes:
                Location to mount the NFS server

                
                This attribute is named `nfsMountPath` in VSD API.
                
        """
        return self._nfs_mount_path

    def _set_nfs_mount_path(self, value):
        """ Set nfs_mount_path value.

            Notes:
                Location to mount the NFS server

                
                This attribute is named `nfsMountPath` in VSD API.
                
        """
        self._nfs_mount_path = value

    nfs_mount_path = property(_get_nfs_mount_path, _set_nfs_mount_path)
    
    def _get_nova_client_version(self):
        """ Get nova_client_version value.

            Notes:
                Nova client Version 

                
                This attribute is named `novaClientVersion` in VSD API.
                
        """
        return self._nova_client_version

    def _set_nova_client_version(self, value):
        """ Set nova_client_version value.

            Notes:
                Nova client Version 

                
                This attribute is named `novaClientVersion` in VSD API.
                
        """
        self._nova_client_version = value

    nova_client_version = property(_get_nova_client_version, _set_nova_client_version)
    
    def _get_nova_metadata_service_auth_url(self):
        """ Get nova_metadata_service_auth_url value.

            Notes:
                Nova metadata service auth url

                
                This attribute is named `novaMetadataServiceAuthUrl` in VSD API.
                
        """
        return self._nova_metadata_service_auth_url

    def _set_nova_metadata_service_auth_url(self, value):
        """ Set nova_metadata_service_auth_url value.

            Notes:
                Nova metadata service auth url

                
                This attribute is named `novaMetadataServiceAuthUrl` in VSD API.
                
        """
        self._nova_metadata_service_auth_url = value

    nova_metadata_service_auth_url = property(_get_nova_metadata_service_auth_url, _set_nova_metadata_service_auth_url)
    
    def _get_nova_metadata_service_endpoint(self):
        """ Get nova_metadata_service_endpoint value.

            Notes:
                Nova metadata service endpoint

                
                This attribute is named `novaMetadataServiceEndpoint` in VSD API.
                
        """
        return self._nova_metadata_service_endpoint

    def _set_nova_metadata_service_endpoint(self, value):
        """ Set nova_metadata_service_endpoint value.

            Notes:
                Nova metadata service endpoint

                
                This attribute is named `novaMetadataServiceEndpoint` in VSD API.
                
        """
        self._nova_metadata_service_endpoint = value

    nova_metadata_service_endpoint = property(_get_nova_metadata_service_endpoint, _set_nova_metadata_service_endpoint)
    
    def _get_nova_metadata_service_password(self):
        """ Get nova_metadata_service_password value.

            Notes:
                Nova metadata service password

                
                This attribute is named `novaMetadataServicePassword` in VSD API.
                
        """
        return self._nova_metadata_service_password

    def _set_nova_metadata_service_password(self, value):
        """ Set nova_metadata_service_password value.

            Notes:
                Nova metadata service password

                
                This attribute is named `novaMetadataServicePassword` in VSD API.
                
        """
        self._nova_metadata_service_password = value

    nova_metadata_service_password = property(_get_nova_metadata_service_password, _set_nova_metadata_service_password)
    
    def _get_nova_metadata_service_tenant(self):
        """ Get nova_metadata_service_tenant value.

            Notes:
                Nova metadata service tenant

                
                This attribute is named `novaMetadataServiceTenant` in VSD API.
                
        """
        return self._nova_metadata_service_tenant

    def _set_nova_metadata_service_tenant(self, value):
        """ Set nova_metadata_service_tenant value.

            Notes:
                Nova metadata service tenant

                
                This attribute is named `novaMetadataServiceTenant` in VSD API.
                
        """
        self._nova_metadata_service_tenant = value

    nova_metadata_service_tenant = property(_get_nova_metadata_service_tenant, _set_nova_metadata_service_tenant)
    
    def _get_nova_metadata_service_username(self):
        """ Get nova_metadata_service_username value.

            Notes:
                Nova metadata service username

                
                This attribute is named `novaMetadataServiceUsername` in VSD API.
                
        """
        return self._nova_metadata_service_username

    def _set_nova_metadata_service_username(self, value):
        """ Set nova_metadata_service_username value.

            Notes:
                Nova metadata service username

                
                This attribute is named `novaMetadataServiceUsername` in VSD API.
                
        """
        self._nova_metadata_service_username = value

    nova_metadata_service_username = property(_get_nova_metadata_service_username, _set_nova_metadata_service_username)
    
    def _get_nova_metadata_shared_secret(self):
        """ Get nova_metadata_shared_secret value.

            Notes:
                Nova metadata shared secret

                
                This attribute is named `novaMetadataSharedSecret` in VSD API.
                
        """
        return self._nova_metadata_shared_secret

    def _set_nova_metadata_shared_secret(self, value):
        """ Set nova_metadata_shared_secret value.

            Notes:
                Nova metadata shared secret

                
                This attribute is named `novaMetadataSharedSecret` in VSD API.
                
        """
        self._nova_metadata_shared_secret = value

    nova_metadata_shared_secret = property(_get_nova_metadata_shared_secret, _set_nova_metadata_shared_secret)
    
    def _get_nova_region_name(self):
        """ Get nova_region_name value.

            Notes:
                Nova region name

                
                This attribute is named `novaRegionName` in VSD API.
                
        """
        return self._nova_region_name

    def _set_nova_region_name(self, value):
        """ Set nova_region_name value.

            Notes:
                Nova region name

                
                This attribute is named `novaRegionName` in VSD API.
                
        """
        self._nova_region_name = value

    nova_region_name = property(_get_nova_region_name, _set_nova_region_name)
    
    def _get_ntp_server1(self):
        """ Get ntp_server1 value.

            Notes:
                IP of the NTP server 1

                
                This attribute is named `ntpServer1` in VSD API.
                
        """
        return self._ntp_server1

    def _set_ntp_server1(self, value):
        """ Set ntp_server1 value.

            Notes:
                IP of the NTP server 1

                
                This attribute is named `ntpServer1` in VSD API.
                
        """
        self._ntp_server1 = value

    ntp_server1 = property(_get_ntp_server1, _set_ntp_server1)
    
    def _get_ntp_server2(self):
        """ Get ntp_server2 value.

            Notes:
                IP of the NTP server 1

                
                This attribute is named `ntpServer2` in VSD API.
                
        """
        return self._ntp_server2

    def _set_ntp_server2(self, value):
        """ Set ntp_server2 value.

            Notes:
                IP of the NTP server 1

                
                This attribute is named `ntpServer2` in VSD API.
                
        """
        self._ntp_server2 = value

    ntp_server2 = property(_get_ntp_server2, _set_ntp_server2)
    
    def _get_personality(self):
        """ Get personality value.

            Notes:
                VRS/VRS-G

                
        """
        return self._personality

    def _set_personality(self, value):
        """ Set personality value.

            Notes:
                VRS/VRS-G

                
        """
        self._personality = value

    personality = property(_get_personality, _set_personality)
    
    def _get_portgroup_metadata(self):
        """ Get portgroup_metadata value.

            Notes:
                Port Group Meta data

                
                This attribute is named `portgroupMetadata` in VSD API.
                
        """
        return self._portgroup_metadata

    def _set_portgroup_metadata(self, value):
        """ Set portgroup_metadata value.

            Notes:
                Port Group Meta data

                
                This attribute is named `portgroupMetadata` in VSD API.
                
        """
        self._portgroup_metadata = value

    portgroup_metadata = property(_get_portgroup_metadata, _set_portgroup_metadata)
    
    def _get_primary_nuage_controller(self):
        """ Get primary_nuage_controller value.

            Notes:
                IP address of the primary Controller (VSC)

                
                This attribute is named `primaryNuageController` in VSD API.
                
        """
        return self._primary_nuage_controller

    def _set_primary_nuage_controller(self, value):
        """ Set primary_nuage_controller value.

            Notes:
                IP address of the primary Controller (VSC)

                
                This attribute is named `primaryNuageController` in VSD API.
                
        """
        self._primary_nuage_controller = value

    primary_nuage_controller = property(_get_primary_nuage_controller, _set_primary_nuage_controller)
    
    def _get_secondary_nuage_controller(self):
        """ Get secondary_nuage_controller value.

            Notes:
                IP address of the secondary Controller (VSC)

                
                This attribute is named `secondaryNuageController` in VSD API.
                
        """
        return self._secondary_nuage_controller

    def _set_secondary_nuage_controller(self, value):
        """ Set secondary_nuage_controller value.

            Notes:
                IP address of the secondary Controller (VSC)

                
                This attribute is named `secondaryNuageController` in VSD API.
                
        """
        self._secondary_nuage_controller = value

    secondary_nuage_controller = property(_get_secondary_nuage_controller, _set_secondary_nuage_controller)
    
    def _get_separate_data_network(self):
        """ Get separate_data_network value.

            Notes:
                Whether Data will use the management network or not

                
                This attribute is named `separateDataNetwork` in VSD API.
                
        """
        return self._separate_data_network

    def _set_separate_data_network(self, value):
        """ Set separate_data_network value.

            Notes:
                Whether Data will use the management network or not

                
                This attribute is named `separateDataNetwork` in VSD API.
                
        """
        self._separate_data_network = value

    separate_data_network = property(_get_separate_data_network, _set_separate_data_network)
    
    def _get_site_id(self):
        """ Get site_id value.

            Notes:
                Site ID field for object profiles to support VSD Geo-redundancy

                
                This attribute is named `siteId` in VSD API.
                
        """
        return self._site_id

    def _set_site_id(self, value):
        """ Set site_id value.

            Notes:
                Site ID field for object profiles to support VSD Geo-redundancy

                
                This attribute is named `siteId` in VSD API.
                
        """
        self._site_id = value

    site_id = property(_get_site_id, _set_site_id)
    
    def _get_static_route(self):
        """ Get static_route value.

            Notes:
                static route to be configured in the VRS

                
                This attribute is named `staticRoute` in VSD API.
                
        """
        return self._static_route

    def _set_static_route(self, value):
        """ Set static_route value.

            Notes:
                static route to be configured in the VRS

                
                This attribute is named `staticRoute` in VSD API.
                
        """
        self._static_route = value

    static_route = property(_get_static_route, _set_static_route)
    
    def _get_static_route_gateway(self):
        """ Get static_route_gateway value.

            Notes:
                Gateway for the static route given above

                
                This attribute is named `staticRouteGateway` in VSD API.
                
        """
        return self._static_route_gateway

    def _set_static_route_gateway(self, value):
        """ Set static_route_gateway value.

            Notes:
                Gateway for the static route given above

                
                This attribute is named `staticRouteGateway` in VSD API.
                
        """
        self._static_route_gateway = value

    static_route_gateway = property(_get_static_route_gateway, _set_static_route_gateway)
    
    def _get_static_route_netmask(self):
        """ Get static_route_netmask value.

            Notes:
                Nova region name

                
                This attribute is named `staticRouteNetmask` in VSD API.
                
        """
        return self._static_route_netmask

    def _set_static_route_netmask(self, value):
        """ Set static_route_netmask value.

            Notes:
                Nova region name

                
                This attribute is named `staticRouteNetmask` in VSD API.
                
        """
        self._static_route_netmask = value

    static_route_netmask = property(_get_static_route_netmask, _set_static_route_netmask)
    
    def _get_v_require_nuage_metadata(self):
        """ Get v_require_nuage_metadata value.

            Notes:
                Whether split-activation or not (Openstack/CloudStack)

                
                This attribute is named `vRequireNuageMetadata` in VSD API.
                
        """
        return self._v_require_nuage_metadata

    def _set_v_require_nuage_metadata(self, value):
        """ Set v_require_nuage_metadata value.

            Notes:
                Whether split-activation or not (Openstack/CloudStack)

                
                This attribute is named `vRequireNuageMetadata` in VSD API.
                
        """
        self._v_require_nuage_metadata = value

    v_require_nuage_metadata = property(_get_v_require_nuage_metadata, _set_v_require_nuage_metadata)
    
    def _get_vm_network_portgroup(self):
        """ Get vm_network_portgroup value.

            Notes:
                VM Network Port Group Name

                
                This attribute is named `vmNetworkPortgroup` in VSD API.
                
        """
        return self._vm_network_portgroup

    def _set_vm_network_portgroup(self, value):
        """ Set vm_network_portgroup value.

            Notes:
                VM Network Port Group Name

                
                This attribute is named `vmNetworkPortgroup` in VSD API.
                
        """
        self._vm_network_portgroup = value

    vm_network_portgroup = property(_get_vm_network_portgroup, _set_vm_network_portgroup)
    
    def _get_vrs_password(self):
        """ Get vrs_password value.

            Notes:
                VRS password to be used by toolbox to communicate with VRS

                
                This attribute is named `vrsPassword` in VSD API.
                
        """
        return self._vrs_password

    def _set_vrs_password(self, value):
        """ Set vrs_password value.

            Notes:
                VRS password to be used by toolbox to communicate with VRS

                
                This attribute is named `vrsPassword` in VSD API.
                
        """
        self._vrs_password = value

    vrs_password = property(_get_vrs_password, _set_vrs_password)
    
    def _get_vrs_user_name(self):
        """ Get vrs_user_name value.

            Notes:
                VRS user name to be used by toolbox to communicate with VRS

                
                This attribute is named `vrsUserName` in VSD API.
                
        """
        return self._vrs_user_name

    def _set_vrs_user_name(self, value):
        """ Set vrs_user_name value.

            Notes:
                VRS user name to be used by toolbox to communicate with VRS

                
                This attribute is named `vrsUserName` in VSD API.
                
        """
        self._vrs_user_name = value

    vrs_user_name = property(_get_vrs_user_name, _set_vrs_user_name)
    