# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject
from time import time


class NUEventLog(NURESTObject):
    """ Represents a EventLog in the VSD

        Notes:
            The API retrieves the events related to a particular entity

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUEventLog instead.
    """

    __rest_name__ = u"eventlog"
    __resource_name__ = u"eventlogs"

    def __init__(self, **kwargs):
        """ Initializes a EventLog instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> eventlog = NUEventLog(id=u'xxxx-xxx-xxx-xxx', name=u'EventLog')
                >>> eventlog = NUEventLog(data=my_dict)
        """

        super(NUEventLog, self).__init__()

        # Read/Write Attributes
        
        self._diff = None
        self._enterprise = None
        self._entities = None
        self._entity_id = None
        self._entity_parent_id = None
        self._entity_parent_type = None
        self._entity_type = None
        self._event_received_time = None
        self._type = None
        self._user = None
        
        self.expose_attribute(local_name=u"diff", remote_name=u"diff", attribute_type=object, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"enterprise", remote_name=u"enterprise", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"entities", remote_name=u"entities", attribute_type=list, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"entity_id", remote_name=u"entityID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"entity_parent_id", remote_name=u"entityParentID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"entity_parent_type", remote_name=u"entityParentType", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"entity_type", remote_name=u"entityType", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"event_received_time", remote_name=u"eventReceivedTime", attribute_type=time, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"user", remote_name=u"user", attribute_type=str, is_required=False, is_unique=False)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_diff(self):
        """ Get diff value.

            Notes:
                Holds the results of diff between two objects of same type.

                
        """
        return self._diff

    def _set_diff(self, value):
        """ Set diff value.

            Notes:
                Holds the results of diff between two objects of same type.

                
        """
        self._diff = value

    diff = property(_get_diff, _set_diff)
    
    def _get_enterprise(self):
        """ Get enterprise value.

            Notes:
                The enterprise name of the user who triggered this event.

                
        """
        return self._enterprise

    def _set_enterprise(self, value):
        """ Set enterprise value.

            Notes:
                The enterprise name of the user who triggered this event.

                
        """
        self._enterprise = value

    enterprise = property(_get_enterprise, _set_enterprise)
    
    def _get_entities(self):
        """ Get entities value.

            Notes:
                List of entities associated with the event.

                
        """
        return self._entities

    def _set_entities(self, value):
        """ Set entities value.

            Notes:
                List of entities associated with the event.

                
        """
        self._entities = value

    entities = property(_get_entities, _set_entities)
    
    def _get_entity_id(self):
        """ Get entity_id value.

            Notes:
                The entity id associated with this event.

                
                This attribute is named `entityID` in VSD API.
                
        """
        return self._entity_id

    def _set_entity_id(self, value):
        """ Set entity_id value.

            Notes:
                The entity id associated with this event.

                
                This attribute is named `entityID` in VSD API.
                
        """
        self._entity_id = value

    entity_id = property(_get_entity_id, _set_entity_id)
    
    def _get_entity_parent_id(self):
        """ Get entity_parent_id value.

            Notes:
                The entity parent id associated with this event. It can be null.

                
                This attribute is named `entityParentID` in VSD API.
                
        """
        return self._entity_parent_id

    def _set_entity_parent_id(self, value):
        """ Set entity_parent_id value.

            Notes:
                The entity parent id associated with this event. It can be null.

                
                This attribute is named `entityParentID` in VSD API.
                
        """
        self._entity_parent_id = value

    entity_parent_id = property(_get_entity_parent_id, _set_entity_parent_id)
    
    def _get_entity_parent_type(self):
        """ Get entity_parent_type value.

            Notes:
                Event parent entity type.  Generally reported against enterprise.

                
                This attribute is named `entityParentType` in VSD API.
                
        """
        return self._entity_parent_type

    def _set_entity_parent_type(self, value):
        """ Set entity_parent_type value.

            Notes:
                Event parent entity type.  Generally reported against enterprise.

                
                This attribute is named `entityParentType` in VSD API.
                
        """
        self._entity_parent_type = value

    entity_parent_type = property(_get_entity_parent_type, _set_entity_parent_type)
    
    def _get_entity_type(self):
        """ Get entity_type value.

            Notes:
                The entity type of this event. It may be Domain, VirtualMachine, etc.,

                
                This attribute is named `entityType` in VSD API.
                
        """
        return self._entity_type

    def _set_entity_type(self, value):
        """ Set entity_type value.

            Notes:
                The entity type of this event. It may be Domain, VirtualMachine, etc.,

                
                This attribute is named `entityType` in VSD API.
                
        """
        self._entity_type = value

    entity_type = property(_get_entity_type, _set_entity_type)
    
    def _get_event_received_time(self):
        """ Get event_received_time value.

            Notes:
                The time that event was received.

                
                This attribute is named `eventReceivedTime` in VSD API.
                
        """
        return self._event_received_time

    def _set_event_received_time(self, value):
        """ Set event_received_time value.

            Notes:
                The time that event was received.

                
                This attribute is named `eventReceivedTime` in VSD API.
                
        """
        self._event_received_time = value

    event_received_time = property(_get_event_received_time, _set_event_received_time)
    
    def _get_type(self):
        """ Get type value.

            Notes:
                The event type (CREATE, UPDATE or DELETE).

                
        """
        return self._type

    def _set_type(self, value):
        """ Set type value.

            Notes:
                The event type (CREATE, UPDATE or DELETE).

                
        """
        self._type = value

    type = property(_get_type, _set_type)
    
    def _get_user(self):
        """ Get user value.

            Notes:
                The authenticated user who triggered this event.

                
        """
        return self._user

    def _set_user(self, value):
        """ Set user value.

            Notes:
                The authenticated user who triggered this event.

                
        """
        self._user = value

    user = property(_get_user, _set_user)
    