# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUVSDComponent(NURESTObject):
    """ Represents a VSDComponent in the VSD

        Notes:
            System Monitoring details for components of VSD system

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUVSDComponent instead.
    """

    __rest_name__ = u"component"
    __resource_name__ = u"components"

    def __init__(self, **kwargs):
        """ Initializes a VSDComponent instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> vsdcomponent = NUVSDComponent(id=u'xxxx-xxx-xxx-xxx', name=u'VSDComponent')
                >>> vsdcomponent = NUVSDComponent(data=my_dict)
        """

        super(NUVSDComponent, self).__init__()

        # Read/Write Attributes
        
        self._address = None
        self._description = None
        self._location = None
        self._management_ip = None
        self._name = None
        self._product_version = None
        self._status = None
        self._type = None
        
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"location", remote_name=u"location", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"management_ip", remote_name=u"managementIP", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"product_version", remote_name=u"productVersion", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str, is_required=False, is_unique=False, choices=[u'ADMIN_DOWN', u'DOWN', u'UP'])
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=str, is_required=False, is_unique=False, choices=[u'EJABBERD', u'JBOSS', u'MEDIATOR', u'PERCONA', u'STATSCOLLECTOR', u'STATSSERVER', u'TCA'])
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_address(self):
        """ Get address value.

            Notes:
                An optional IP to access this component.

                
        """
        return self._address

    def _set_address(self, value):
        """ Set address value.

            Notes:
                An optional IP to access this component.

                
        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Description of the entity.

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Description of the entity.

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_location(self):
        """ Get location value.

            Notes:
                Identifies the entity to be associated with a location.

                
        """
        return self._location

    def _set_location(self, value):
        """ Set location value.

            Notes:
                Identifies the entity to be associated with a location.

                
        """
        self._location = value

    location = property(_get_location, _set_location)
    
    def _get_management_ip(self):
        """ Get management_ip value.

            Notes:
                An optional management IP to log into this component.

                
                This attribute is named `managementIP` in VSD API.
                
        """
        return self._management_ip

    def _set_management_ip(self, value):
        """ Set management_ip value.

            Notes:
                An optional management IP to log into this component.

                
                This attribute is named `managementIP` in VSD API.
                
        """
        self._management_ip = value

    management_ip = property(_get_management_ip, _set_management_ip)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Identifies the entity with a name.

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Identifies the entity with a name.

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_product_version(self):
        """ Get product_version value.

            Notes:
                Product version supported by this entity.

                
                This attribute is named `productVersion` in VSD API.
                
        """
        return self._product_version

    def _set_product_version(self, value):
        """ Set product_version value.

            Notes:
                Product version supported by this entity.

                
                This attribute is named `productVersion` in VSD API.
                
        """
        self._product_version = value

    product_version = property(_get_product_version, _set_product_version)
    
    def _get_status(self):
        """ Get status value.

            Notes:
                Current status of the entity. Possible values are UP, DOWN, ADMIN_DOWN, .

                
        """
        return self._status

    def _set_status(self, value):
        """ Set status value.

            Notes:
                Current status of the entity. Possible values are UP, DOWN, ADMIN_DOWN, .

                
        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_type(self):
        """ Get type value.

            Notes:
                Type of the component Possible values are JBOSS, MEDIATOR, PERCONA, EJABBERD, TCA, STATSCOLLECTOR, STATSSERVER, .

                
        """
        return self._type

    def _set_type(self, value):
        """ Set type value.

            Notes:
                Type of the component Possible values are JBOSS, MEDIATOR, PERCONA, EJABBERD, TCA, STATSCOLLECTOR, STATSSERVER, .

                
        """
        self._type = value

    type = property(_get_type, _set_type)
    