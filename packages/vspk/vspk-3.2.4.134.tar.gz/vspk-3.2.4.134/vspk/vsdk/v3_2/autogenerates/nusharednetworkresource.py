# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUAddressRangesFetcher
from ..fetchers import NUDHCPOptionsFetcher
from ..fetchers import NUEnterprisePermissionsFetcher
from ..fetchers import NUStaticRoutesFetcher
from ..fetchers import NUVPNConnectionsFetcher
from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUSharedNetworkResource(NURESTObject):
    """ Represents a SharedNetworkResource in the VSD

        Notes:
            This defines shared infrastructure resources that are created by user with CSPROOT role. These resources can be used by all the enterprises in the data center for various purposes. Examples of  shared resources are public subnet, floating subnet, public L2 domain etc.

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUSharedNetworkResource instead.
    """

    __rest_name__ = u"sharednetworkresource"
    __resource_name__ = u"sharednetworkresources"

    def __init__(self, **kwargs):
        """ Initializes a SharedNetworkResource instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> sharednetworkresource = NUSharedNetworkResource(id=u'xxxx-xxx-xxx-xxx', name=u'SharedNetworkResource')
                >>> sharednetworkresource = NUSharedNetworkResource(data=my_dict)
        """

        super(NUSharedNetworkResource, self).__init__()

        # Read/Write Attributes
        
        self._access_restriction_enabled = None
        self._address = None
        self._back_haul_route_distinguisher = None
        self._back_haul_route_target = None
        self._back_haul_vnid = None
        self._description = None
        self._dhcp_managed = None
        self._domain_route_distinguisher = None
        self._domain_route_target = None
        self._ecmp_count = None
        self._gateway = None
        self._name = None
        self._netmask = None
        self._shared_resource_parent_id = None
        self._type = None
        self._underlay = None
        self._uplink_gw_vlan_attachment_id = None
        self._uplink_interface_ip = None
        self._uplink_interface_mac = None
        self._uplink_vport_name = None
        self._vn_id = None
        
        self.expose_attribute(local_name=u"access_restriction_enabled", remote_name=u"accessRestrictionEnabled", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"back_haul_route_distinguisher", remote_name=u"backHaulRouteDistinguisher", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"back_haul_route_target", remote_name=u"backHaulRouteTarget", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"back_haul_vnid", remote_name=u"backHaulVNID", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"dhcp_managed", remote_name=u"DHCPManaged", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"domain_route_distinguisher", remote_name=u"domainRouteDistinguisher", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"domain_route_target", remote_name=u"domainRouteTarget", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ecmp_count", remote_name=u"ECMPCount", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"shared_resource_parent_id", remote_name=u"sharedResourceParentID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"underlay", remote_name=u"underlay", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"uplink_gw_vlan_attachment_id", remote_name=u"uplinkGWVlanAttachmentID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"uplink_interface_ip", remote_name=u"uplinkInterfaceIP", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"uplink_interface_mac", remote_name=u"uplinkInterfaceMAC", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"uplink_vport_name", remote_name=u"uplinkVPortName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"vn_id", remote_name=u"vnID", attribute_type=long, is_required=False, is_unique=False)
        
        # Fetchers
        
        self.address_ranges = NUAddressRangesFetcher.fetcher_with_object(parent_object=self)
        
        self.dhcp_options = NUDHCPOptionsFetcher.fetcher_with_object(parent_object=self)
        
        self.enterprise_permissions = NUEnterprisePermissionsFetcher.fetcher_with_object(parent_object=self)
        
        self.static_routes = NUStaticRoutesFetcher.fetcher_with_object(parent_object=self)
        
        self.vpn_connections = NUVPNConnectionsFetcher.fetcher_with_object(parent_object=self)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_access_restriction_enabled(self):
        """ Get access_restriction_enabled value.

            Notes:
                Boolean indicates that this shared network resource is avaiable to everyone by default or not

                
                This attribute is named `accessRestrictionEnabled` in VSD API.
                
        """
        return self._access_restriction_enabled

    def _set_access_restriction_enabled(self, value):
        """ Set access_restriction_enabled value.

            Notes:
                Boolean indicates that this shared network resource is avaiable to everyone by default or not

                
                This attribute is named `accessRestrictionEnabled` in VSD API.
                
        """
        self._access_restriction_enabled = value

    access_restriction_enabled = property(_get_access_restriction_enabled, _set_access_restriction_enabled)
    
    def _get_address(self):
        """ Get address value.

            Notes:
                Address configured on the shared resource

                
        """
        return self._address

    def _set_address(self, value):
        """ Set address value.

            Notes:
                Address configured on the shared resource

                
        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_back_haul_route_distinguisher(self):
        """ Get back_haul_route_distinguisher value.

            Notes:
                backHaulRouteDistinguisher of the Shared Resource

                
                This attribute is named `backHaulRouteDistinguisher` in VSD API.
                
        """
        return self._back_haul_route_distinguisher

    def _set_back_haul_route_distinguisher(self, value):
        """ Set back_haul_route_distinguisher value.

            Notes:
                backHaulRouteDistinguisher of the Shared Resource

                
                This attribute is named `backHaulRouteDistinguisher` in VSD API.
                
        """
        self._back_haul_route_distinguisher = value

    back_haul_route_distinguisher = property(_get_back_haul_route_distinguisher, _set_back_haul_route_distinguisher)
    
    def _get_back_haul_route_target(self):
        """ Get back_haul_route_target value.

            Notes:
                backHaulRouteTarget of the Shared Resource

                
                This attribute is named `backHaulRouteTarget` in VSD API.
                
        """
        return self._back_haul_route_target

    def _set_back_haul_route_target(self, value):
        """ Set back_haul_route_target value.

            Notes:
                backHaulRouteTarget of the Shared Resource

                
                This attribute is named `backHaulRouteTarget` in VSD API.
                
        """
        self._back_haul_route_target = value

    back_haul_route_target = property(_get_back_haul_route_target, _set_back_haul_route_target)
    
    def _get_back_haul_vnid(self):
        """ Get back_haul_vnid value.

            Notes:
                backHaulVNID of the Shared Resource

                
                This attribute is named `backHaulVNID` in VSD API.
                
        """
        return self._back_haul_vnid

    def _set_back_haul_vnid(self, value):
        """ Set back_haul_vnid value.

            Notes:
                backHaulVNID of the Shared Resource

                
                This attribute is named `backHaulVNID` in VSD API.
                
        """
        self._back_haul_vnid = value

    back_haul_vnid = property(_get_back_haul_vnid, _set_back_haul_vnid)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Description of the shared resource

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Description of the shared resource

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_dhcp_managed(self):
        """ Get dhcp_managed value.

            Notes:
                true if DHCP is enabled else it is false. This value is always true for network resource of type PUBLIC or FLOATING.

                
                This attribute is named `DHCPManaged` in VSD API.
                
        """
        return self._dhcp_managed

    def _set_dhcp_managed(self, value):
        """ Set dhcp_managed value.

            Notes:
                true if DHCP is enabled else it is false. This value is always true for network resource of type PUBLIC or FLOATING.

                
                This attribute is named `DHCPManaged` in VSD API.
                
        """
        self._dhcp_managed = value

    dhcp_managed = property(_get_dhcp_managed, _set_dhcp_managed)
    
    def _get_domain_route_distinguisher(self):
        """ Get domain_route_distinguisher value.

            Notes:
                Route distinguisher configured on the shared resource

                
                This attribute is named `domainRouteDistinguisher` in VSD API.
                
        """
        return self._domain_route_distinguisher

    def _set_domain_route_distinguisher(self, value):
        """ Set domain_route_distinguisher value.

            Notes:
                Route distinguisher configured on the shared resource

                
                This attribute is named `domainRouteDistinguisher` in VSD API.
                
        """
        self._domain_route_distinguisher = value

    domain_route_distinguisher = property(_get_domain_route_distinguisher, _set_domain_route_distinguisher)
    
    def _get_domain_route_target(self):
        """ Get domain_route_target value.

            Notes:
                Route target configured on the shared resource

                
                This attribute is named `domainRouteTarget` in VSD API.
                
        """
        return self._domain_route_target

    def _set_domain_route_target(self, value):
        """ Set domain_route_target value.

            Notes:
                Route target configured on the shared resource

                
                This attribute is named `domainRouteTarget` in VSD API.
                
        """
        self._domain_route_target = value

    domain_route_target = property(_get_domain_route_target, _set_domain_route_target)
    
    def _get_ecmp_count(self):
        """ Get ecmp_count value.

            Notes:
                Domain specific Equal-cost multi-path routing count, ECMPCount = 1 means no ECMP

                
                This attribute is named `ECMPCount` in VSD API.
                
        """
        return self._ecmp_count

    def _set_ecmp_count(self, value):
        """ Set ecmp_count value.

            Notes:
                Domain specific Equal-cost multi-path routing count, ECMPCount = 1 means no ECMP

                
                This attribute is named `ECMPCount` in VSD API.
                
        """
        self._ecmp_count = value

    ecmp_count = property(_get_ecmp_count, _set_ecmp_count)
    
    def _get_gateway(self):
        """ Get gateway value.

            Notes:
                Gatemask configured on the shared resource

                
        """
        return self._gateway

    def _set_gateway(self, value):
        """ Set gateway value.

            Notes:
                Gatemask configured on the shared resource

                
        """
        self._gateway = value

    gateway = property(_get_gateway, _set_gateway)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Name of the shared resource. Valid characters are alphabets, numbers, space and hyphen( - ).

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Name of the shared resource. Valid characters are alphabets, numbers, space and hyphen( - ).

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_netmask(self):
        """ Get netmask value.

            Notes:
                Netmask configured on the shared resource

                
        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set netmask value.

            Notes:
                Netmask configured on the shared resource

                
        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    
    def _get_shared_resource_parent_id(self):
        """ Get shared_resource_parent_id value.

            Notes:
                Parent ID of the floating IP subnet to which this FIP subnet must be attached. If empty it will be created in a new domain.

                
                This attribute is named `sharedResourceParentID` in VSD API.
                
        """
        return self._shared_resource_parent_id

    def _set_shared_resource_parent_id(self, value):
        """ Set shared_resource_parent_id value.

            Notes:
                Parent ID of the floating IP subnet to which this FIP subnet must be attached. If empty it will be created in a new domain.

                
                This attribute is named `sharedResourceParentID` in VSD API.
                
        """
        self._shared_resource_parent_id = value

    shared_resource_parent_id = property(_get_shared_resource_parent_id, _set_shared_resource_parent_id)
    
    def _get_type(self):
        """ Get type value.

            Notes:
                Type of the shared resource. This is an enum with possible values PUBLIC/FLOATING/L2DOMAIN/UPLINK_SUBNET

                
        """
        return self._type

    def _set_type(self, value):
        """ Set type value.

            Notes:
                Type of the shared resource. This is an enum with possible values PUBLIC/FLOATING/L2DOMAIN/UPLINK_SUBNET

                
        """
        self._type = value

    type = property(_get_type, _set_type)
    
    def _get_underlay(self):
        """ Get underlay value.

            Notes:
                Indicates whether this shared subnet is in underlay or not.

                
        """
        return self._underlay

    def _set_underlay(self, value):
        """ Set underlay value.

            Notes:
                Indicates whether this shared subnet is in underlay or not.

                
        """
        self._underlay = value

    underlay = property(_get_underlay, _set_underlay)
    
    def _get_uplink_gw_vlan_attachment_id(self):
        """ Get uplink_gw_vlan_attachment_id value.

            Notes:
                VLAN ID to which this vport must be attached

                
                This attribute is named `uplinkGWVlanAttachmentID` in VSD API.
                
        """
        return self._uplink_gw_vlan_attachment_id

    def _set_uplink_gw_vlan_attachment_id(self, value):
        """ Set uplink_gw_vlan_attachment_id value.

            Notes:
                VLAN ID to which this vport must be attached

                
                This attribute is named `uplinkGWVlanAttachmentID` in VSD API.
                
        """
        self._uplink_gw_vlan_attachment_id = value

    uplink_gw_vlan_attachment_id = property(_get_uplink_gw_vlan_attachment_id, _set_uplink_gw_vlan_attachment_id)
    
    def _get_uplink_interface_ip(self):
        """ Get uplink_interface_ip value.

            Notes:
                IP address of the host interface

                
                This attribute is named `uplinkInterfaceIP` in VSD API.
                
        """
        return self._uplink_interface_ip

    def _set_uplink_interface_ip(self, value):
        """ Set uplink_interface_ip value.

            Notes:
                IP address of the host interface

                
                This attribute is named `uplinkInterfaceIP` in VSD API.
                
        """
        self._uplink_interface_ip = value

    uplink_interface_ip = property(_get_uplink_interface_ip, _set_uplink_interface_ip)
    
    def _get_uplink_interface_mac(self):
        """ Get uplink_interface_mac value.

            Notes:
                MAC address of the host interface

                
                This attribute is named `uplinkInterfaceMAC` in VSD API.
                
        """
        return self._uplink_interface_mac

    def _set_uplink_interface_mac(self, value):
        """ Set uplink_interface_mac value.

            Notes:
                MAC address of the host interface

                
                This attribute is named `uplinkInterfaceMAC` in VSD API.
                
        """
        self._uplink_interface_mac = value

    uplink_interface_mac = property(_get_uplink_interface_mac, _set_uplink_interface_mac)
    
    def _get_uplink_vport_name(self):
        """ Get uplink_vport_name value.

            Notes:
                Name of the uplink vport

                
                This attribute is named `uplinkVPortName` in VSD API.
                
        """
        return self._uplink_vport_name

    def _set_uplink_vport_name(self, value):
        """ Set uplink_vport_name value.

            Notes:
                Name of the uplink vport

                
                This attribute is named `uplinkVPortName` in VSD API.
                
        """
        self._uplink_vport_name = value

    uplink_vport_name = property(_get_uplink_vport_name, _set_uplink_vport_name)
    
    def _get_vn_id(self):
        """ Get vn_id value.

            Notes:
                VNID of the Shared Resource

                
                This attribute is named `vnID` in VSD API.
                
        """
        return self._vn_id

    def _set_vn_id(self, value):
        """ Set vn_id value.

            Notes:
                VNID of the Shared Resource

                
                This attribute is named `vnID` in VSD API.
                
        """
        self._vn_id = value

    vn_id = property(_get_vn_id, _set_vn_id)
    