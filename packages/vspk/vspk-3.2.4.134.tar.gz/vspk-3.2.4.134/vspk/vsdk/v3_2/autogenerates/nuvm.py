# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUVMResyncsFetcher
from ..fetchers import NUVMInterfacesFetcher
from ..fetchers import NUVRSsFetcher
from ..fetchers import NUMetadatasFetcher
from bambou import NURESTObject


class NUVM(NURESTObject):
    """ Represents a VM in the VSD

        Notes:
            Read only API that can retrieve the VMs associated with a domain, zone or subnet for mediation created VM's for REST created  VM's you need to set the additional proxy user header in http request : X-Nuage-ProxyUservalue of the header has to be either :1) enterpriseName@UserName (example : Alcatel Lucent@bob), or 2) external ID of user in VSD, typically is UUID generally decided by the CMS tool in questionUser needs to have CMS privileges to use proxy user header

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUVM instead.
    """

    __rest_name__ = u"vm"
    __resource_name__ = u"vms"

    def __init__(self, **kwargs):
        """ Initializes a VM instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> vm = NUVM(id=u'xxxx-xxx-xxx-xxx', name=u'VM')
                >>> vm = NUVM(data=my_dict)
        """

        super(NUVM, self).__init__()

        # Read/Write Attributes
        
        self._app_name = None
        self._delete_expiry = None
        self._delete_mode = None
        self._domain_ids = None
        self._enterprise_id = None
        self._enterprise_name = None
        self._hypervisor_ip = None
        self._interfaces = None
        self._l2_domain_ids = None
        self._name = None
        self._reason_type = None
        self._resync_info = None
        self._site_identifier = None
        self._status = None
        self._subnet_ids = None
        self._user_id = None
        self._user_name = None
        self._uuid = None
        self._vrsid = None
        self._zone_ids = None
        
        self.expose_attribute(local_name=u"app_name", remote_name=u"appName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"delete_expiry", remote_name=u"deleteExpiry", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"delete_mode", remote_name=u"deleteMode", attribute_type=str, is_required=False, is_unique=False, choices=[u'TIMER'])
        self.expose_attribute(local_name=u"domain_ids", remote_name=u"domainIDs", attribute_type=list, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"enterprise_name", remote_name=u"enterpriseName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"hypervisor_ip", remote_name=u"hypervisorIP", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"interfaces", remote_name=u"interfaces", attribute_type=list, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"l2_domain_ids", remote_name=u"l2DomainIDs", attribute_type=list, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"reason_type", remote_name=u"reasonType", attribute_type=str, is_required=False, is_unique=False, choices=[u'BLOCKED_LAST', u'BLOCKED_UNKNOWN', u'CRASHED_LAST', u'CRASHED_UNKNOWN', u'NOSTATE_LAST', u'NOSTATE_UNKNOWN', u'PAUSED_DUMP', u'PAUSED_FROM_SNAPSHOT', u'PAUSED_IOERROR', u'PAUSED_LAST', u'PAUSED_MIGRATION', u'PAUSED_SAVE', u'PAUSED_SHUTTING_DOWN', u'PAUSED_UNKNOWN', u'PAUSED_USER', u'PAUSED_WATCHDOG', u'RUNNING_BOOTED', u'RUNNING_FROM_SNAPSHOT', u'RUNNING_LAST', u'RUNNING_MIGRATED', u'RUNNING_MIGRATION_CANCELED', u'RUNNING_RESTORED', u'RUNNING_SAVE_CANCELED', u'RUNNING_UNKNOWN', u'RUNNING_UNPAUSED', u'SHUTDOWN_LAST', u'SHUTDOWN_UNKNOWN', u'SHUTDOWN_USER', u'SHUTOFF_CRASHED', u'SHUTOFF_DESTROYED', u'SHUTOFF_FAILED', u'SHUTOFF_FROM_SNAPSHOT', u'SHUTOFF_LAST', u'SHUTOFF_MIGRATED', u'SHUTOFF_SAVED', u'SHUTOFF_SHUTDOWN', u'SHUTOFF_UNKNOWN', u'UNKNOWN'])
        self.expose_attribute(local_name=u"resync_info", remote_name=u"resyncInfo", attribute_type=object, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"site_identifier", remote_name=u"siteIdentifier", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str, is_required=False, is_unique=False, choices=[u'BLOCKED', u'CRASHED', u'DELETE_PENDING', u'INIT', u'LAST', u'NOSTATE', u'PAUSED', u'RUNNING', u'SHUTDOWN', u'SHUTOFF', u'UNKNOWN', u'UNREACHABLE'])
        self.expose_attribute(local_name=u"subnet_ids", remote_name=u"subnetIDs", attribute_type=list, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"user_id", remote_name=u"userID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"user_name", remote_name=u"userName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"uuid", remote_name=u"UUID", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"vrsid", remote_name=u"VRSID", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"zone_ids", remote_name=u"zoneIDs", attribute_type=list, is_required=False, is_unique=False)
        
        # Fetchers
        
        self.alarms = NUAlarmsFetcher.fetcher_with_object(parent_object=self)
        
        self.event_logs = NUEventLogsFetcher.fetcher_with_object(parent_object=self)
        
        self.vm_resyncs = NUVMResyncsFetcher.fetcher_with_object(parent_object=self)
        
        self.vm_interfaces = NUVMInterfacesFetcher.fetcher_with_object(parent_object=self)
        
        self.vrss = NUVRSsFetcher.fetcher_with_object(parent_object=self)
        
        
        self.metadata = NUMetadatasFetcher.fetcher_with_object(parent_object=self)
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_app_name(self):
        """ Get app_name value.

            Notes:
                Application name that this VM belongs to

                
                This attribute is named `appName` in VSD API.
                
        """
        return self._app_name

    def _set_app_name(self, value):
        """ Set app_name value.

            Notes:
                Application name that this VM belongs to

                
                This attribute is named `appName` in VSD API.
                
        """
        self._app_name = value

    app_name = property(_get_app_name, _set_app_name)
    
    def _get_delete_expiry(self):
        """ Get delete_expiry value.

            Notes:
                reflects the  VM Deletion expiry timer in secs , deleteMode needs to be non-null value for deleteExpiry to be taken in to effect. CMS created VM's will always have deleteMode set to TIMER

                
                This attribute is named `deleteExpiry` in VSD API.
                
        """
        return self._delete_expiry

    def _set_delete_expiry(self, value):
        """ Set delete_expiry value.

            Notes:
                reflects the  VM Deletion expiry timer in secs , deleteMode needs to be non-null value for deleteExpiry to be taken in to effect. CMS created VM's will always have deleteMode set to TIMER

                
                This attribute is named `deleteExpiry` in VSD API.
                
        """
        self._delete_expiry = value

    delete_expiry = property(_get_delete_expiry, _set_delete_expiry)
    
    def _get_delete_mode(self):
        """ Get delete_mode value.

            Notes:
                reflects the mode of VM Deletion -  TIMER  Possible values are TIMER, .

                
                This attribute is named `deleteMode` in VSD API.
                
        """
        return self._delete_mode

    def _set_delete_mode(self, value):
        """ Set delete_mode value.

            Notes:
                reflects the mode of VM Deletion -  TIMER  Possible values are TIMER, .

                
                This attribute is named `deleteMode` in VSD API.
                
        """
        self._delete_mode = value

    delete_mode = property(_get_delete_mode, _set_delete_mode)
    
    def _get_domain_ids(self):
        """ Get domain_ids value.

            Notes:
                Array of IDs of the domain that the VM is connected to

                
                This attribute is named `domainIDs` in VSD API.
                
        """
        return self._domain_ids

    def _set_domain_ids(self, value):
        """ Set domain_ids value.

            Notes:
                Array of IDs of the domain that the VM is connected to

                
                This attribute is named `domainIDs` in VSD API.
                
        """
        self._domain_ids = value

    domain_ids = property(_get_domain_ids, _set_domain_ids)
    
    def _get_enterprise_id(self):
        """ Get enterprise_id value.

            Notes:
                ID of the enterprise that this VM belongs to

                
                This attribute is named `enterpriseID` in VSD API.
                
        """
        return self._enterprise_id

    def _set_enterprise_id(self, value):
        """ Set enterprise_id value.

            Notes:
                ID of the enterprise that this VM belongs to

                
                This attribute is named `enterpriseID` in VSD API.
                
        """
        self._enterprise_id = value

    enterprise_id = property(_get_enterprise_id, _set_enterprise_id)
    
    def _get_enterprise_name(self):
        """ Get enterprise_name value.

            Notes:
                Name of the enterprise that this VM belongs to

                
                This attribute is named `enterpriseName` in VSD API.
                
        """
        return self._enterprise_name

    def _set_enterprise_name(self, value):
        """ Set enterprise_name value.

            Notes:
                Name of the enterprise that this VM belongs to

                
                This attribute is named `enterpriseName` in VSD API.
                
        """
        self._enterprise_name = value

    enterprise_name = property(_get_enterprise_name, _set_enterprise_name)
    
    def _get_hypervisor_ip(self):
        """ Get hypervisor_ip value.

            Notes:
                IP address of the hypervisor that this VM is currently running in

                
                This attribute is named `hypervisorIP` in VSD API.
                
        """
        return self._hypervisor_ip

    def _set_hypervisor_ip(self, value):
        """ Set hypervisor_ip value.

            Notes:
                IP address of the hypervisor that this VM is currently running in

                
                This attribute is named `hypervisorIP` in VSD API.
                
        """
        self._hypervisor_ip = value

    hypervisor_ip = property(_get_hypervisor_ip, _set_hypervisor_ip)
    
    def _get_interfaces(self):
        """ Get interfaces value.

            Notes:
                List of VM interfaces associated with the VM

                
        """
        return self._interfaces

    def _set_interfaces(self, value):
        """ Set interfaces value.

            Notes:
                List of VM interfaces associated with the VM

                
        """
        self._interfaces = value

    interfaces = property(_get_interfaces, _set_interfaces)
    
    def _get_l2_domain_ids(self):
        """ Get l2_domain_ids value.

            Notes:
                Array of IDs of the l2 domain that the VM is connected to

                
                This attribute is named `l2DomainIDs` in VSD API.
                
        """
        return self._l2_domain_ids

    def _set_l2_domain_ids(self, value):
        """ Set l2_domain_ids value.

            Notes:
                Array of IDs of the l2 domain that the VM is connected to

                
                This attribute is named `l2DomainIDs` in VSD API.
                
        """
        self._l2_domain_ids = value

    l2_domain_ids = property(_get_l2_domain_ids, _set_l2_domain_ids)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Name of the VM

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Name of the VM

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_reason_type(self):
        """ Get reason_type value.

            Notes:
                Reason of the event associated with the VM - UNKNOWN, NOSTATE_UNKNOWN, NOSTATE_LAST, RUNNING_UNKNOWN, RUNNING_BOOTED, RUNNING_MIGRATED, RUNNING_RESTORED, RUNNING_FROM_SNAPSHOT, RUNNING_UNPAUSED, RUNNING_MIGRATION_CANCELED, RUNNING_SAVE_CANCELED, RUNNING_LAST, BLOCKED_UNKNOWN, BLOCKED_LAST, PAUSED_UNKNOWN, PAUSED_USER, PAUSED_MIGRATION, PAUSED_SAVE, PAUSED_DUMP, PAUSED_IOERROR, PAUSED_WATCHDOG, PAUSED_FROM_SNAPSHOT, PAUSED_SHUTTING_DOWN, PAUSED_LAST, SHUTDOWN_UNKNOWN, SHUTDOWN_USER, SHUTDOWN_LAST, SHUTOFF_UNKNOWN, SHUTOFF_SHUTDOWN, SHUTOFF_DESTROYED, SHUTOFF_CRASHED, SHUTOFF_MIGRATED, SHUTOFF_SAVED, SHUTOFF_FAILED,SHUTOFF_FROM_SNAPSHOT, SHUTOFF_LAST, CRASHED_UNKNOWN, CRASHED_LAST Possible values are UNKNOWN, NOSTATE_UNKNOWN, NOSTATE_LAST, RUNNING_UNKNOWN, RUNNING_BOOTED, RUNNING_MIGRATED, RUNNING_RESTORED, RUNNING_FROM_SNAPSHOT, RUNNING_UNPAUSED, RUNNING_MIGRATION_CANCELED, RUNNING_SAVE_CANCELED, RUNNING_LAST, BLOCKED_UNKNOWN, BLOCKED_LAST, PAUSED_UNKNOWN, PAUSED_USER, PAUSED_MIGRATION, PAUSED_SAVE, PAUSED_DUMP, PAUSED_IOERROR, PAUSED_WATCHDOG, PAUSED_FROM_SNAPSHOT, PAUSED_SHUTTING_DOWN, PAUSED_LAST, SHUTDOWN_UNKNOWN, SHUTDOWN_USER, SHUTDOWN_LAST, SHUTOFF_UNKNOWN, SHUTOFF_SHUTDOWN, SHUTOFF_DESTROYED, SHUTOFF_CRASHED, SHUTOFF_MIGRATED, SHUTOFF_SAVED, SHUTOFF_FAILED, SHUTOFF_FROM_SNAPSHOT, SHUTOFF_LAST, CRASHED_UNKNOWN, CRASHED_LAST, .

                
                This attribute is named `reasonType` in VSD API.
                
        """
        return self._reason_type

    def _set_reason_type(self, value):
        """ Set reason_type value.

            Notes:
                Reason of the event associated with the VM - UNKNOWN, NOSTATE_UNKNOWN, NOSTATE_LAST, RUNNING_UNKNOWN, RUNNING_BOOTED, RUNNING_MIGRATED, RUNNING_RESTORED, RUNNING_FROM_SNAPSHOT, RUNNING_UNPAUSED, RUNNING_MIGRATION_CANCELED, RUNNING_SAVE_CANCELED, RUNNING_LAST, BLOCKED_UNKNOWN, BLOCKED_LAST, PAUSED_UNKNOWN, PAUSED_USER, PAUSED_MIGRATION, PAUSED_SAVE, PAUSED_DUMP, PAUSED_IOERROR, PAUSED_WATCHDOG, PAUSED_FROM_SNAPSHOT, PAUSED_SHUTTING_DOWN, PAUSED_LAST, SHUTDOWN_UNKNOWN, SHUTDOWN_USER, SHUTDOWN_LAST, SHUTOFF_UNKNOWN, SHUTOFF_SHUTDOWN, SHUTOFF_DESTROYED, SHUTOFF_CRASHED, SHUTOFF_MIGRATED, SHUTOFF_SAVED, SHUTOFF_FAILED,SHUTOFF_FROM_SNAPSHOT, SHUTOFF_LAST, CRASHED_UNKNOWN, CRASHED_LAST Possible values are UNKNOWN, NOSTATE_UNKNOWN, NOSTATE_LAST, RUNNING_UNKNOWN, RUNNING_BOOTED, RUNNING_MIGRATED, RUNNING_RESTORED, RUNNING_FROM_SNAPSHOT, RUNNING_UNPAUSED, RUNNING_MIGRATION_CANCELED, RUNNING_SAVE_CANCELED, RUNNING_LAST, BLOCKED_UNKNOWN, BLOCKED_LAST, PAUSED_UNKNOWN, PAUSED_USER, PAUSED_MIGRATION, PAUSED_SAVE, PAUSED_DUMP, PAUSED_IOERROR, PAUSED_WATCHDOG, PAUSED_FROM_SNAPSHOT, PAUSED_SHUTTING_DOWN, PAUSED_LAST, SHUTDOWN_UNKNOWN, SHUTDOWN_USER, SHUTDOWN_LAST, SHUTOFF_UNKNOWN, SHUTOFF_SHUTDOWN, SHUTOFF_DESTROYED, SHUTOFF_CRASHED, SHUTOFF_MIGRATED, SHUTOFF_SAVED, SHUTOFF_FAILED, SHUTOFF_FROM_SNAPSHOT, SHUTOFF_LAST, CRASHED_UNKNOWN, CRASHED_LAST, .

                
                This attribute is named `reasonType` in VSD API.
                
        """
        self._reason_type = value

    reason_type = property(_get_reason_type, _set_reason_type)
    
    def _get_resync_info(self):
        """ Get resync_info value.

            Notes:
                Information of the status of the resync operation of a VM

                
                This attribute is named `resyncInfo` in VSD API.
                
        """
        return self._resync_info

    def _set_resync_info(self, value):
        """ Set resync_info value.

            Notes:
                Information of the status of the resync operation of a VM

                
                This attribute is named `resyncInfo` in VSD API.
                
        """
        self._resync_info = value

    resync_info = property(_get_resync_info, _set_resync_info)
    
    def _get_site_identifier(self):
        """ Get site_identifier value.

            Notes:
                This property specifies the site the VM belongs to, for Geo-redundancy.

                
                This attribute is named `siteIdentifier` in VSD API.
                
        """
        return self._site_identifier

    def _set_site_identifier(self, value):
        """ Set site_identifier value.

            Notes:
                This property specifies the site the VM belongs to, for Geo-redundancy.

                
                This attribute is named `siteIdentifier` in VSD API.
                
        """
        self._site_identifier = value

    site_identifier = property(_get_site_identifier, _set_site_identifier)
    
    def _get_status(self):
        """ Get status value.

            Notes:
                Status of the VM - UNKNOWN, NOSTATE, RUNNING, BLOCKED, PAUSED, SHUTDOWN, SHUTOFF, CRASHED, LAST, UNREACHABLE, INIT, DELETE_PENDING Possible values are UNKNOWN, NOSTATE, RUNNING, BLOCKED, PAUSED, SHUTDOWN, SHUTOFF, CRASHED, LAST, UNREACHABLE, INIT, DELETE_PENDING, .

                
        """
        return self._status

    def _set_status(self, value):
        """ Set status value.

            Notes:
                Status of the VM - UNKNOWN, NOSTATE, RUNNING, BLOCKED, PAUSED, SHUTDOWN, SHUTOFF, CRASHED, LAST, UNREACHABLE, INIT, DELETE_PENDING Possible values are UNKNOWN, NOSTATE, RUNNING, BLOCKED, PAUSED, SHUTDOWN, SHUTOFF, CRASHED, LAST, UNREACHABLE, INIT, DELETE_PENDING, .

                
        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_subnet_ids(self):
        """ Get subnet_ids value.

            Notes:
                Array of IDs of the subnets that the VM is connected to

                
                This attribute is named `subnetIDs` in VSD API.
                
        """
        return self._subnet_ids

    def _set_subnet_ids(self, value):
        """ Set subnet_ids value.

            Notes:
                Array of IDs of the subnets that the VM is connected to

                
                This attribute is named `subnetIDs` in VSD API.
                
        """
        self._subnet_ids = value

    subnet_ids = property(_get_subnet_ids, _set_subnet_ids)
    
    def _get_user_id(self):
        """ Get user_id value.

            Notes:
                ID of the user that created this VM

                
                This attribute is named `userID` in VSD API.
                
        """
        return self._user_id

    def _set_user_id(self, value):
        """ Set user_id value.

            Notes:
                ID of the user that created this VM

                
                This attribute is named `userID` in VSD API.
                
        """
        self._user_id = value

    user_id = property(_get_user_id, _set_user_id)
    
    def _get_user_name(self):
        """ Get user_name value.

            Notes:
                Username of the user that created this VM

                
                This attribute is named `userName` in VSD API.
                
        """
        return self._user_name

    def _set_user_name(self, value):
        """ Set user_name value.

            Notes:
                Username of the user that created this VM

                
                This attribute is named `userName` in VSD API.
                
        """
        self._user_name = value

    user_name = property(_get_user_name, _set_user_name)
    
    def _get_uuid(self):
        """ Get uuid value.

            Notes:
                UUID of the VM

                
                This attribute is named `UUID` in VSD API.
                
        """
        return self._uuid

    def _set_uuid(self, value):
        """ Set uuid value.

            Notes:
                UUID of the VM

                
                This attribute is named `UUID` in VSD API.
                
        """
        self._uuid = value

    uuid = property(_get_uuid, _set_uuid)
    
    def _get_vrsid(self):
        """ Get vrsid value.

            Notes:
                Id of the VRS that this VM is attached to.

                
                This attribute is named `VRSID` in VSD API.
                
        """
        return self._vrsid

    def _set_vrsid(self, value):
        """ Set vrsid value.

            Notes:
                Id of the VRS that this VM is attached to.

                
                This attribute is named `VRSID` in VSD API.
                
        """
        self._vrsid = value

    vrsid = property(_get_vrsid, _set_vrsid)
    
    def _get_zone_ids(self):
        """ Get zone_ids value.

            Notes:
                Array of IDs of the zone that this VM is attached to

                
                This attribute is named `zoneIDs` in VSD API.
                
        """
        return self._zone_ids

    def _set_zone_ids(self, value):
        """ Set zone_ids value.

            Notes:
                Array of IDs of the zone that this VM is attached to

                
                This attribute is named `zoneIDs` in VSD API.
                
        """
        self._zone_ids = value

    zone_ids = property(_get_zone_ids, _set_zone_ids)
    