# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



from bambou import NURESTObject


class NUApplicationService(NURESTObject):
    """ Represents a ApplicationService in the VSD

        Notes:
            Represents a networking communication service.

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUApplicationService instead.
    """

    __rest_name__ = u"applicationservice"
    __resource_name__ = u"applicationservices"

    def __init__(self, **kwargs):
        """ Initializes a ApplicationService instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> applicationservice = NUApplicationService(id=u'xxxx-xxx-xxx-xxx', name=u'ApplicationService')
                >>> applicationservice = NUApplicationService(data=my_dict)
        """

        super(NUApplicationService, self).__init__()

        # Read/Write Attributes
        
        self._description = None
        self._destination_port = None
        self._direction = None
        self._dscp = None
        self._ether_type = None
        self._name = None
        self._protocol = None
        self._source_port = None
        
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"destination_port", remote_name=u"destinationPort", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"direction", remote_name=u"direction", attribute_type=str, is_required=True, is_unique=False, choices=[u'REFLEXIVE', u'UNIDIRECTIONAL'])
        self.expose_attribute(local_name=u"dscp", remote_name=u"DSCP", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"ether_type", remote_name=u"etherType", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"protocol", remote_name=u"protocol", attribute_type=str, is_required=True, is_unique=False)
        self.expose_attribute(local_name=u"source_port", remote_name=u"sourcePort", attribute_type=str, is_required=True, is_unique=False)
        
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Description of the application service.

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Description of the application service.

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_destination_port(self):
        """ Get destination_port value.

            Notes:
                The destination port to be matched if protocol is UDP or TCP. Value should be either * or single port number or a port range.

                
                This attribute is named `destinationPort` in VSD API.
                
        """
        return self._destination_port

    def _set_destination_port(self, value):
        """ Set destination_port value.

            Notes:
                The destination port to be matched if protocol is UDP or TCP. Value should be either * or single port number or a port range.

                
                This attribute is named `destinationPort` in VSD API.
                
        """
        self._destination_port = value

    destination_port = property(_get_destination_port, _set_destination_port)
    
    def _get_direction(self):
        """ Get direction value.

            Notes:
                Direction of the service. Default is UNIDIRECTIONAL. Possible values are UNIDIRECTIONAL, REFLEXIVE, .

                
        """
        return self._direction

    def _set_direction(self, value):
        """ Set direction value.

            Notes:
                Direction of the service. Default is UNIDIRECTIONAL. Possible values are UNIDIRECTIONAL, REFLEXIVE, .

                
        """
        self._direction = value

    direction = property(_get_direction, _set_direction)
    
    def _get_dscp(self):
        """ Get dscp value.

            Notes:
                DSCP match condition to be set in the rule. It is either * or from 0-63. Required for etherType 0x0800

                
                This attribute is named `DSCP` in VSD API.
                
        """
        return self._dscp

    def _set_dscp(self, value):
        """ Set dscp value.

            Notes:
                DSCP match condition to be set in the rule. It is either * or from 0-63. Required for etherType 0x0800

                
                This attribute is named `DSCP` in VSD API.
                
        """
        self._dscp = value

    dscp = property(_get_dscp, _set_dscp)
    
    def _get_ether_type(self):
        """ Get ether_type value.

            Notes:
                Ether type of the packet to be matched. Ether type can be * or a valid hexadecimal value

                
                This attribute is named `etherType` in VSD API.
                
        """
        return self._ether_type

    def _set_ether_type(self, value):
        """ Set ether_type value.

            Notes:
                Ether type of the packet to be matched. Ether type can be * or a valid hexadecimal value

                
                This attribute is named `etherType` in VSD API.
                
        """
        self._ether_type = value

    ether_type = property(_get_ether_type, _set_ether_type)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Name of the application service.

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Name of the application service.

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_protocol(self):
        """ Get protocol value.

            Notes:
                Protocol that must be matched.  Needs to be 6 (TCP) or 17 (UDP)

                
        """
        return self._protocol

    def _set_protocol(self, value):
        """ Set protocol value.

            Notes:
                Protocol that must be matched.  Needs to be 6 (TCP) or 17 (UDP)

                
        """
        self._protocol = value

    protocol = property(_get_protocol, _set_protocol)
    
    def _get_source_port(self):
        """ Get source_port value.

            Notes:
                Source port to be matched if protocol is UDP or TCP. Value can be either * or single port number or a port range.

                
                This attribute is named `sourcePort` in VSD API.
                
        """
        return self._source_port

    def _set_source_port(self, value):
        """ Set source_port value.

            Notes:
                Source port to be matched if protocol is UDP or TCP. Value can be either * or single port number or a port range.

                
                This attribute is named `sourcePort` in VSD API.
                
        """
        self._source_port = value

    source_port = property(_get_source_port, _set_source_port)
    