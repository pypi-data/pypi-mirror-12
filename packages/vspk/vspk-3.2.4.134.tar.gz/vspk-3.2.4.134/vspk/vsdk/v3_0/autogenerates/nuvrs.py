# -*- coding: utf-8 -*-
#
# Copyright (c) 2015, Alcatel-Lucent Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its contributors
#       may be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUHSCsFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUMonitoringPortsFetcher
from ..fetchers import NUMultiNICVPortsFetcher
from ..fetchers import NUVMsFetcher
from ..fetchers import NUVPortsFetcher
from ..fetchers import NUVSCsFetcher

from bambou import NURESTObject


class NUVRS(NURESTObject):
    """ Represents a VRS in the VSD

        Notes:
            System Monitoring details for VRS connected to VSC or HSC

        Warning:
            This file has been autogenerated. You should never change it.
            Override vsdk.NUVRS instead.
    """

    __rest_name__ = u"vrs"
    __resource_name__ = u"vrss"

    def __init__(self, **kwargs):
        """ Initializes a VRS instance

            Notes:
                You can specify all parameters while calling this methods.
                A special argument named `data` will enable you to load the
                object from a Python dictionary

            Examples:
                >>> vrs = NUVRS(id=u'xxxx-xxx-xxx-xxx', name=u'VRS')
                >>> vrs = NUVRS(data=my_dict)
        """

        super(NUVRS, self).__init__()

        # Read/Write Attributes
        
        self._address = None
        self._average_cpuusage = None
        self._average_memory_usage = None
        self._cluster_node_role = None
        self._current_cpuusage = None
        self._current_memory_usage = None
        self._db_synced = None
        self._description = None
        self._disks = None
        self._dynamic = None
        self._hypervisor_connection_state = None
        self._hypervisor_identifier = None
        self._hypervisor_name = None
        self._hypervisor_type = None
        self._jsonrpc_connection_state = None
        self._last_event_name = None
        self._last_event_object = None
        self._last_event_timestamp = None
        self._last_state_change = None
        self._location = None
        self._management_ip = None
        self._messages = None
        self._multi_nic_vport_enabled = None
        self._name = None
        self._number_of_bridge_interfaces = None
        self._number_of_host_interfaces = None
        self._number_of_virtual_machines = None
        self._parent_ids = None
        self._peak_cpuusage = None
        self._peak_memory_usage = None
        self._peer = None
        self._personality = None
        self._product_version = None
        self._role = None
        self._status = None
        self._uptime = None
        
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"average_cpuusage", remote_name=u"averageCPUUsage", attribute_type=float, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"average_memory_usage", remote_name=u"averageMemoryUsage", attribute_type=float, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"cluster_node_role", remote_name=u"clusterNodeRole", attribute_type=str, is_required=False, is_unique=False, choices=[u'NONE', u'PRIMARY', u'SECONDARY'])
        self.expose_attribute(local_name=u"current_cpuusage", remote_name=u"currentCPUUsage", attribute_type=float, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"current_memory_usage", remote_name=u"currentMemoryUsage", attribute_type=float, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"db_synced", remote_name=u"dbSynced", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"disks", remote_name=u"disks", attribute_type=list, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"dynamic", remote_name=u"dynamic", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"hypervisor_connection_state", remote_name=u"hypervisorConnectionState", attribute_type=str, is_required=False, is_unique=False, choices=[u'ADMIN_DOWN', u'DOWN', u'UP'])
        self.expose_attribute(local_name=u"hypervisor_identifier", remote_name=u"hypervisorIdentifier", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"hypervisor_name", remote_name=u"hypervisorName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"hypervisor_type", remote_name=u"hypervisorType", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"jsonrpc_connection_state", remote_name=u"JSONRPCConnectionState", attribute_type=str, is_required=False, is_unique=False, choices=[u'ADMIN_DOWN', u'DOWN', u'UP'])
        self.expose_attribute(local_name=u"last_event_name", remote_name=u"lastEventName", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"last_event_object", remote_name=u"lastEventObject", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"last_event_timestamp", remote_name=u"lastEventTimestamp", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"last_state_change", remote_name=u"lastStateChange", attribute_type=long, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"location", remote_name=u"location", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"management_ip", remote_name=u"managementIP", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"messages", remote_name=u"messages", attribute_type=list, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"multi_nic_vport_enabled", remote_name=u"multiNICVPortEnabled", attribute_type=bool, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"number_of_bridge_interfaces", remote_name=u"numberOfBridgeInterfaces", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"number_of_host_interfaces", remote_name=u"numberOfHostInterfaces", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"number_of_virtual_machines", remote_name=u"numberOfVirtualMachines", attribute_type=int, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"parent_ids", remote_name=u"parentIDs", attribute_type=list, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"peak_cpuusage", remote_name=u"peakCPUUsage", attribute_type=float, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"peak_memory_usage", remote_name=u"peakMemoryUsage", attribute_type=float, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"peer", remote_name=u"peer", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"personality", remote_name=u"personality", attribute_type=str, is_required=False, is_unique=False, choices=[u'HARDWARE_VTEP', u'NONE', u'NSG', u'VRS', u'VRSG'])
        self.expose_attribute(local_name=u"product_version", remote_name=u"productVersion", attribute_type=str, is_required=False, is_unique=False)
        self.expose_attribute(local_name=u"role", remote_name=u"role", attribute_type=str, is_required=False, is_unique=False, choices=[u'MASTER', u'NONE', u'SLAVE'])
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str, is_required=False, is_unique=False, choices=[u'ADMIN_DOWN', u'DOWN', u'UP'])
        self.expose_attribute(local_name=u"uptime", remote_name=u"uptime", attribute_type=long, is_required=False, is_unique=False)
        
        # Fetchers
        
        self.alarms = NUAlarmsFetcher.fetcher_with_object(parent_object=self)
        
        self.event_logs = NUEventLogsFetcher.fetcher_with_object(parent_object=self)
        
        self.hscs = NUHSCsFetcher.fetcher_with_object(parent_object=self)
        
        self.jobs = NUJobsFetcher.fetcher_with_object(parent_object=self)
        
        self.monitoring_ports = NUMonitoringPortsFetcher.fetcher_with_object(parent_object=self)
        
        self.multi_nic_vports = NUMultiNICVPortsFetcher.fetcher_with_object(parent_object=self)
        
        self.vms = NUVMsFetcher.fetcher_with_object(parent_object=self)
        
        self.vports = NUVPortsFetcher.fetcher_with_object(parent_object=self)
        
        self.vscs = NUVSCsFetcher.fetcher_with_object(parent_object=self)
        
        

        self._compute_args(**kwargs)

    # Properties
    
    def _get_address(self):
        """ Get address value.

            Notes:
                The IP of the VRS entity

                
        """
        return self._address

    def _set_address(self, value):
        """ Set address value.

            Notes:
                The IP of the VRS entity

                
        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_average_cpuusage(self):
        """ Get average_cpuusage value.

            Notes:
                Average CPU usage percentage.

                
                This attribute is named `averageCPUUsage` in VSD API.
                
        """
        return self._average_cpuusage

    def _set_average_cpuusage(self, value):
        """ Set average_cpuusage value.

            Notes:
                Average CPU usage percentage.

                
                This attribute is named `averageCPUUsage` in VSD API.
                
        """
        self._average_cpuusage = value

    average_cpuusage = property(_get_average_cpuusage, _set_average_cpuusage)
    
    def _get_average_memory_usage(self):
        """ Get average_memory_usage value.

            Notes:
                Average memory usage percentage.

                
                This attribute is named `averageMemoryUsage` in VSD API.
                
        """
        return self._average_memory_usage

    def _set_average_memory_usage(self, value):
        """ Set average_memory_usage value.

            Notes:
                Average memory usage percentage.

                
                This attribute is named `averageMemoryUsage` in VSD API.
                
        """
        self._average_memory_usage = value

    average_memory_usage = property(_get_average_memory_usage, _set_average_memory_usage)
    
    def _get_cluster_node_role(self):
        """ Get cluster_node_role value.

            Notes:
                Indicate that the controller associated is primary, secondary or unknown. Possible values are PRIMARY, SECONDARY, NONE, .

                
                This attribute is named `clusterNodeRole` in VSD API.
                
        """
        return self._cluster_node_role

    def _set_cluster_node_role(self, value):
        """ Set cluster_node_role value.

            Notes:
                Indicate that the controller associated is primary, secondary or unknown. Possible values are PRIMARY, SECONDARY, NONE, .

                
                This attribute is named `clusterNodeRole` in VSD API.
                
        """
        self._cluster_node_role = value

    cluster_node_role = property(_get_cluster_node_role, _set_cluster_node_role)
    
    def _get_current_cpuusage(self):
        """ Get current_cpuusage value.

            Notes:
                Current CPU usage percentage.

                
                This attribute is named `currentCPUUsage` in VSD API.
                
        """
        return self._current_cpuusage

    def _set_current_cpuusage(self, value):
        """ Set current_cpuusage value.

            Notes:
                Current CPU usage percentage.

                
                This attribute is named `currentCPUUsage` in VSD API.
                
        """
        self._current_cpuusage = value

    current_cpuusage = property(_get_current_cpuusage, _set_current_cpuusage)
    
    def _get_current_memory_usage(self):
        """ Get current_memory_usage value.

            Notes:
                Current memory usage percentage.

                
                This attribute is named `currentMemoryUsage` in VSD API.
                
        """
        return self._current_memory_usage

    def _set_current_memory_usage(self, value):
        """ Set current_memory_usage value.

            Notes:
                Current memory usage percentage.

                
                This attribute is named `currentMemoryUsage` in VSD API.
                
        """
        self._current_memory_usage = value

    current_memory_usage = property(_get_current_memory_usage, _set_current_memory_usage)
    
    def _get_db_synced(self):
        """ Get db_synced value.

            Notes:
                Flag to indicate if the ovs database is synced between the NSG pair part of a redundant group

                
                This attribute is named `dbSynced` in VSD API.
                
        """
        return self._db_synced

    def _set_db_synced(self, value):
        """ Set db_synced value.

            Notes:
                Flag to indicate if the ovs database is synced between the NSG pair part of a redundant group

                
                This attribute is named `dbSynced` in VSD API.
                
        """
        self._db_synced = value

    db_synced = property(_get_db_synced, _set_db_synced)
    
    def _get_description(self):
        """ Get description value.

            Notes:
                Description of the entity.

                
        """
        return self._description

    def _set_description(self, value):
        """ Set description value.

            Notes:
                Description of the entity.

                
        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_disks(self):
        """ Get disks value.

            Notes:
                Set of disk usage details.

                
        """
        return self._disks

    def _set_disks(self, value):
        """ Set disks value.

            Notes:
                Set of disk usage details.

                
        """
        self._disks = value

    disks = property(_get_disks, _set_disks)
    
    def _get_dynamic(self):
        """ Get dynamic value.

            Notes:
                Flag to indicate it is dynamically configured or not.

                
        """
        return self._dynamic

    def _set_dynamic(self, value):
        """ Set dynamic value.

            Notes:
                Flag to indicate it is dynamically configured or not.

                
        """
        self._dynamic = value

    dynamic = property(_get_dynamic, _set_dynamic)
    
    def _get_hypervisor_connection_state(self):
        """ Get hypervisor_connection_state value.

            Notes:
                The VRS connection state with the hypervisor. Possible values are UP, DOWN, ADMIN_DOWN, .

                
                This attribute is named `hypervisorConnectionState` in VSD API.
                
        """
        return self._hypervisor_connection_state

    def _set_hypervisor_connection_state(self, value):
        """ Set hypervisor_connection_state value.

            Notes:
                The VRS connection state with the hypervisor. Possible values are UP, DOWN, ADMIN_DOWN, .

                
                This attribute is named `hypervisorConnectionState` in VSD API.
                
        """
        self._hypervisor_connection_state = value

    hypervisor_connection_state = property(_get_hypervisor_connection_state, _set_hypervisor_connection_state)
    
    def _get_hypervisor_identifier(self):
        """ Get hypervisor_identifier value.

            Notes:
                The hypervisor IP (or name) associated with the VRS.

                
                This attribute is named `hypervisorIdentifier` in VSD API.
                
        """
        return self._hypervisor_identifier

    def _set_hypervisor_identifier(self, value):
        """ Set hypervisor_identifier value.

            Notes:
                The hypervisor IP (or name) associated with the VRS.

                
                This attribute is named `hypervisorIdentifier` in VSD API.
                
        """
        self._hypervisor_identifier = value

    hypervisor_identifier = property(_get_hypervisor_identifier, _set_hypervisor_identifier)
    
    def _get_hypervisor_name(self):
        """ Get hypervisor_name value.

            Notes:
                The hypervisor name associated with the VRS.

                
                This attribute is named `hypervisorName` in VSD API.
                
        """
        return self._hypervisor_name

    def _set_hypervisor_name(self, value):
        """ Set hypervisor_name value.

            Notes:
                The hypervisor name associated with the VRS.

                
                This attribute is named `hypervisorName` in VSD API.
                
        """
        self._hypervisor_name = value

    hypervisor_name = property(_get_hypervisor_name, _set_hypervisor_name)
    
    def _get_hypervisor_type(self):
        """ Get hypervisor_type value.

            Notes:
                The hypervisor type associated with the VRS.

                
                This attribute is named `hypervisorType` in VSD API.
                
        """
        return self._hypervisor_type

    def _set_hypervisor_type(self, value):
        """ Set hypervisor_type value.

            Notes:
                The hypervisor type associated with the VRS.

                
                This attribute is named `hypervisorType` in VSD API.
                
        """
        self._hypervisor_type = value

    hypervisor_type = property(_get_hypervisor_type, _set_hypervisor_type)
    
    def _get_jsonrpc_connection_state(self):
        """ Get jsonrpc_connection_state value.

            Notes:
                The current JSON RPC connection status. Possible values are UP, DOWN, ADMIN_DOWN, .

                
                This attribute is named `JSONRPCConnectionState` in VSD API.
                
        """
        return self._jsonrpc_connection_state

    def _set_jsonrpc_connection_state(self, value):
        """ Set jsonrpc_connection_state value.

            Notes:
                The current JSON RPC connection status. Possible values are UP, DOWN, ADMIN_DOWN, .

                
                This attribute is named `JSONRPCConnectionState` in VSD API.
                
        """
        self._jsonrpc_connection_state = value

    jsonrpc_connection_state = property(_get_jsonrpc_connection_state, _set_jsonrpc_connection_state)
    
    def _get_last_event_name(self):
        """ Get last_event_name value.

            Notes:
                The last event name from the hypervisor.

                
                This attribute is named `lastEventName` in VSD API.
                
        """
        return self._last_event_name

    def _set_last_event_name(self, value):
        """ Set last_event_name value.

            Notes:
                The last event name from the hypervisor.

                
                This attribute is named `lastEventName` in VSD API.
                
        """
        self._last_event_name = value

    last_event_name = property(_get_last_event_name, _set_last_event_name)
    
    def _get_last_event_object(self):
        """ Get last_event_object value.

            Notes:
                The last event object (including metadata) from the hypervisor.

                
                This attribute is named `lastEventObject` in VSD API.
                
        """
        return self._last_event_object

    def _set_last_event_object(self, value):
        """ Set last_event_object value.

            Notes:
                The last event object (including metadata) from the hypervisor.

                
                This attribute is named `lastEventObject` in VSD API.
                
        """
        self._last_event_object = value

    last_event_object = property(_get_last_event_object, _set_last_event_object)
    
    def _get_last_event_timestamp(self):
        """ Get last_event_timestamp value.

            Notes:
                The last event timestamp from the hypervisor.

                
                This attribute is named `lastEventTimestamp` in VSD API.
                
        """
        return self._last_event_timestamp

    def _set_last_event_timestamp(self, value):
        """ Set last_event_timestamp value.

            Notes:
                The last event timestamp from the hypervisor.

                
                This attribute is named `lastEventTimestamp` in VSD API.
                
        """
        self._last_event_timestamp = value

    last_event_timestamp = property(_get_last_event_timestamp, _set_last_event_timestamp)
    
    def _get_last_state_change(self):
        """ Get last_state_change value.

            Notes:
                Last state change timestamp (in millis).

                
                This attribute is named `lastStateChange` in VSD API.
                
        """
        return self._last_state_change

    def _set_last_state_change(self, value):
        """ Set last_state_change value.

            Notes:
                Last state change timestamp (in millis).

                
                This attribute is named `lastStateChange` in VSD API.
                
        """
        self._last_state_change = value

    last_state_change = property(_get_last_state_change, _set_last_state_change)
    
    def _get_location(self):
        """ Get location value.

            Notes:
                Identifies the entity to be associated with a location.

                
        """
        return self._location

    def _set_location(self, value):
        """ Set location value.

            Notes:
                Identifies the entity to be associated with a location.

                
        """
        self._location = value

    location = property(_get_location, _set_location)
    
    def _get_management_ip(self):
        """ Get management_ip value.

            Notes:
                The management IP of the VRS entity

                
                This attribute is named `managementIP` in VSD API.
                
        """
        return self._management_ip

    def _set_management_ip(self, value):
        """ Set management_ip value.

            Notes:
                The management IP of the VRS entity

                
                This attribute is named `managementIP` in VSD API.
                
        """
        self._management_ip = value

    management_ip = property(_get_management_ip, _set_management_ip)
    
    def _get_messages(self):
        """ Get messages value.

            Notes:
                An array of degraded messages.

                
        """
        return self._messages

    def _set_messages(self, value):
        """ Set messages value.

            Notes:
                An array of degraded messages.

                
        """
        self._messages = value

    messages = property(_get_messages, _set_messages)
    
    def _get_multi_nic_vport_enabled(self):
        """ Get multi_nic_vport_enabled value.

            Notes:
                VRS is in Multi-NIC VPORT Mode

                
                This attribute is named `multiNICVPortEnabled` in VSD API.
                
        """
        return self._multi_nic_vport_enabled

    def _set_multi_nic_vport_enabled(self, value):
        """ Set multi_nic_vport_enabled value.

            Notes:
                VRS is in Multi-NIC VPORT Mode

                
                This attribute is named `multiNICVPortEnabled` in VSD API.
                
        """
        self._multi_nic_vport_enabled = value

    multi_nic_vport_enabled = property(_get_multi_nic_vport_enabled, _set_multi_nic_vport_enabled)
    
    def _get_name(self):
        """ Get name value.

            Notes:
                Identifies the entity with a name.

                
        """
        return self._name

    def _set_name(self, value):
        """ Set name value.

            Notes:
                Identifies the entity with a name.

                
        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_number_of_bridge_interfaces(self):
        """ Get number_of_bridge_interfaces value.

            Notes:
                Number of bridge interfaces defined in this VRS.

                
                This attribute is named `numberOfBridgeInterfaces` in VSD API.
                
        """
        return self._number_of_bridge_interfaces

    def _set_number_of_bridge_interfaces(self, value):
        """ Set number_of_bridge_interfaces value.

            Notes:
                Number of bridge interfaces defined in this VRS.

                
                This attribute is named `numberOfBridgeInterfaces` in VSD API.
                
        """
        self._number_of_bridge_interfaces = value

    number_of_bridge_interfaces = property(_get_number_of_bridge_interfaces, _set_number_of_bridge_interfaces)
    
    def _get_number_of_host_interfaces(self):
        """ Get number_of_host_interfaces value.

            Notes:
                Number of host interfaces defined in this VRS.

                
                This attribute is named `numberOfHostInterfaces` in VSD API.
                
        """
        return self._number_of_host_interfaces

    def _set_number_of_host_interfaces(self, value):
        """ Set number_of_host_interfaces value.

            Notes:
                Number of host interfaces defined in this VRS.

                
                This attribute is named `numberOfHostInterfaces` in VSD API.
                
        """
        self._number_of_host_interfaces = value

    number_of_host_interfaces = property(_get_number_of_host_interfaces, _set_number_of_host_interfaces)
    
    def _get_number_of_virtual_machines(self):
        """ Get number_of_virtual_machines value.

            Notes:
                Number of VMs defined in this VRS.

                
                This attribute is named `numberOfVirtualMachines` in VSD API.
                
        """
        return self._number_of_virtual_machines

    def _set_number_of_virtual_machines(self, value):
        """ Set number_of_virtual_machines value.

            Notes:
                Number of VMs defined in this VRS.

                
                This attribute is named `numberOfVirtualMachines` in VSD API.
                
        """
        self._number_of_virtual_machines = value

    number_of_virtual_machines = property(_get_number_of_virtual_machines, _set_number_of_virtual_machines)
    
    def _get_parent_ids(self):
        """ Get parent_ids value.

            Notes:
                Holds VRS controllers ids

                
                This attribute is named `parentIDs` in VSD API.
                
        """
        return self._parent_ids

    def _set_parent_ids(self, value):
        """ Set parent_ids value.

            Notes:
                Holds VRS controllers ids

                
                This attribute is named `parentIDs` in VSD API.
                
        """
        self._parent_ids = value

    parent_ids = property(_get_parent_ids, _set_parent_ids)
    
    def _get_peak_cpuusage(self):
        """ Get peak_cpuusage value.

            Notes:
                Peek CPU usage percentage.

                
                This attribute is named `peakCPUUsage` in VSD API.
                
        """
        return self._peak_cpuusage

    def _set_peak_cpuusage(self, value):
        """ Set peak_cpuusage value.

            Notes:
                Peek CPU usage percentage.

                
                This attribute is named `peakCPUUsage` in VSD API.
                
        """
        self._peak_cpuusage = value

    peak_cpuusage = property(_get_peak_cpuusage, _set_peak_cpuusage)
    
    def _get_peak_memory_usage(self):
        """ Get peak_memory_usage value.

            Notes:
                Peek memory usage percentage.

                
                This attribute is named `peakMemoryUsage` in VSD API.
                
        """
        return self._peak_memory_usage

    def _set_peak_memory_usage(self, value):
        """ Set peak_memory_usage value.

            Notes:
                Peek memory usage percentage.

                
                This attribute is named `peakMemoryUsage` in VSD API.
                
        """
        self._peak_memory_usage = value

    peak_memory_usage = property(_get_peak_memory_usage, _set_peak_memory_usage)
    
    def _get_peer(self):
        """ Get peer value.

            Notes:
                The redundant peer id for the current VRS.

                
        """
        return self._peer

    def _set_peer(self, value):
        """ Set peer value.

            Notes:
                The redundant peer id for the current VRS.

                
        """
        self._peer = value

    peer = property(_get_peer, _set_peer)
    
    def _get_personality(self):
        """ Get personality value.

            Notes:
                VRS personality. Possible values are VRSG, VRS, NSG, NONE, HARDWARE_VTEP, .

                
        """
        return self._personality

    def _set_personality(self, value):
        """ Set personality value.

            Notes:
                VRS personality. Possible values are VRSG, VRS, NSG, NONE, HARDWARE_VTEP, .

                
        """
        self._personality = value

    personality = property(_get_personality, _set_personality)
    
    def _get_product_version(self):
        """ Get product_version value.

            Notes:
                Product version supported by this entity.

                
                This attribute is named `productVersion` in VSD API.
                
        """
        return self._product_version

    def _set_product_version(self, value):
        """ Set product_version value.

            Notes:
                Product version supported by this entity.

                
                This attribute is named `productVersion` in VSD API.
                
        """
        self._product_version = value

    product_version = property(_get_product_version, _set_product_version)
    
    def _get_role(self):
        """ Get role value.

            Notes:
                Flag to indicate that VRS-G redundancy state (active/standby/standalone).  Only applicable for gateways. Possible values are MASTER, SLAVE, NONE, .

                
        """
        return self._role

    def _set_role(self, value):
        """ Set role value.

            Notes:
                Flag to indicate that VRS-G redundancy state (active/standby/standalone).  Only applicable for gateways. Possible values are MASTER, SLAVE, NONE, .

                
        """
        self._role = value

    role = property(_get_role, _set_role)
    
    def _get_status(self):
        """ Get status value.

            Notes:
                Computed status of the entity. Possible values are UP, DOWN, ADMIN_DOWN, .

                
        """
        return self._status

    def _set_status(self, value):
        """ Set status value.

            Notes:
                Computed status of the entity. Possible values are UP, DOWN, ADMIN_DOWN, .

                
        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_uptime(self):
        """ Get uptime value.

            Notes:
                How long the VRS was up.

                
        """
        return self._uptime

    def _set_uptime(self, value):
        """ Set uptime value.

            Notes:
                How long the VRS was up.

                
        """
        self._uptime = value

    uptime = property(_get_uptime, _set_uptime)
    