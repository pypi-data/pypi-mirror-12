/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
class {
    //this can be either a FORA string, or a FORA vector of UInt8
    member @m;
    
    //required because the AttributeError clause in the PyObjectBase mixin masks the
    //generated version of this attribute.
    ...(`Member, `@m) { @m };

    __class__: StrType;

    //helper function to allow clients to format this for writing to s3.
    //this will eventually be replaced with a more generic model of data import/export
    @pyfora_string_as_paged_vec_of_char: (
        match (@m) with ({String}) { @m.dataAsVector.paged } (...) { @m.paged }
        );

    static @string_size_limit: 100000;
    """Construct a string from a FORA string or a vector of char, ensuring that we obey 
    the constraint that strings over the @string_size_limit should be held as Vectors.
    """
    static @makestring: 
    fun({String} s) {
            if (size(s) > @string_size_limit)
                return PyString(s.dataAsVector)
            else
                return PyString(s) 
            }
        (s) {
            if (size(s) > @string_size_limit)
                return PyString(s)
            else
                return PyString(s.dataAsString)
            };

    operator[]
    (PyInt(...) p) {
        self[p.@m]
        }
    ({Int64} ix) {
        if (ix < -size(@m) or ix >= size(@m))
            throw IndexError(PyString("string index out of range"))        

        if (ix == -1)
            return @makestring(@m[ix, ])
        else
            return @makestring(@m[ix, ix + 1]);
        }
    (PyInt(ix1), PyInt(ix2), _ ix3) {
        if (ix1.@m < 0 and ix3 is not nothing and ix3.@m > 1)
            ix1 = PyInt(max(ix1.@m, size(@m) * -1));

        if (ix1.@m > size(@m) - 1 and ix3 is not nothing and ix3.@m < -1)
            ix1 = PyInt(size(@m) - 1)

        if(ix3 is nothing)
            return @makestring(@m[ix1.@m, ix2.@m])
        else 
            {
            if(ix3.@m == 0) 
                throw ValueError(PyString("slice step cannot be zero"))
            return @makestring(@m[ix1.@m, ix2.@m, ix3.@m]);
            }
        }
    
    (PyTuple(other)) {
        //Assert we're dealing with a length two tuple
        let ix1 = other.@m[0].@m
        let ix2 = other.@m[1].@m
        @makestring(@m[ix1, ix2]);
        };

    __len__: PyBoundMethod(self, fun(self) {
        PyInt(Int64(size(self.@m)))
        });

    __str__: PyBoundMethod(self, fun(self) {
        self
        });

    __pyfora_ord__: PyBoundMethod(self, fun(self) {
        PyInt(Int64(self.@m[0]))
        });

    convert(Bool _) { size(self.@m) > 0 };

    operator match(PyString _) { (self,) };

    operator iterator() { 
        for ix in sequence(size(@m))
            yield self[PyInt(ix)]
        };

    __pyfora_generator__: PyBoundMethod(self, fun(self) {
        return IteratorAsGenerator(self)
        });

    __cmp__: PyBoundMethod(self, fun(self, PyString(other)) {
        let minIx = (size(@m) <<< size(other.@m))

        let ix = 0
        while (ix < minIx)
            if (@m[ix] < other.@m[ix])
                return PyInt(-1)
                else
            if (@m[ix] > other.@m[ix])
                return PyInt(1)
            else
                ix = ix + 1


        if (size(@m) < size(other.@m))
            return PyInt(-1)
            else
        if (size(@m) > size(other.@m))
            return PyInt(1)
        return PyInt(0)
        });

    //Arithmetic operators
    __add__: PyBoundMethod(self, fun(self, PyString(other)) {
        match (@m, other.@m) with 
            ({String}, {String}) { @makestring(@m + other.@m) }
            ({String}, _) { PyString(@m.dataAsVector + other.@m) }
            (_, {String}) { PyString(@m + other.@m.dataAsVector) }
            (_, _) { PyString(@m + other.@m) }
        });

    __mul__: PyBoundMethod(self, fun(self, PyInt(other)) {
        PyString(@m * other.@m)
        });

    //Comparison operators
    __lt__: PyBoundMethod(self, fun(self, PyString(other)) {
        PyBool(self.__cmp__(other).@m < 0)
        }
        (self, _) {
        PyBool(false)
        });

    __gt__: PyBoundMethod(self, fun(self, PyString(other)) {
        PyBool(self.__cmp__(other).@m > 0)
        }
        (self, _) {
        PyBool(true)
        });

    //Equality operators
    __eq__: PyBoundMethod(self, fun(self, PyString(other)) {
        PyBool(self.__cmp__(other).@m == 0)
        }
        (self, _) {
        PyBool(false)
        });

    __ne__: PyBoundMethod(self, fun(self, PyString(other)) {
        PyBool(self.__cmp__(other).@m != 0)
        }
        (self, _) {
        PyBool(true)
        });

    mixin PyObjectBase;
    };

