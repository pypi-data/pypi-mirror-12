========
pyodesys
========

.. image:: http://hera.physchem.kth.se:8080/github.com/bjodah/pyodesys/status.svg?branch=master
   :target: http://hera.physchem.kth.se:8080/github.com/bjodah/pyodesys
   :alt: Build status
.. image:: https://img.shields.io/pypi/v/pyodesys.svg
   :target: https://pypi.python.org/pypi/pyodesys
   :alt: PyPI version
.. image:: https://img.shields.io/pypi/l/pyodesys.svg
   :target: https://github.com/bjodah/pyodesys/blob/master/LICENSE
   :alt: License

`pyodesys <https://github.com/bjodah/pyodesys>`_ provides a straightforward way
of numerically integrating systems of ordinary differential equations. It unifies
the interface of several libraries. It also provides a convenience class for 
representing and integrating ODE systems defined by `SymPy <http://www.sympy.org>`_
expressions.

The numerical integration is perfomed using eiher:

- `scipy.integrate.ode <http://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.ode.html>`_
- `pygslodeiv2 <https://github.com/bjodah/pygslodeiv2>`_
- `pyodeint <https://github.com/bjodah/pyodeint>`_
- `pycvodes <https://github.com/bjodah/pycvodes>`_


Note that implicit steppers which require a user supplied
callback for calculating the jacobian is provided automatically by pyodesys.

Documentation
-------------
Autogenerated API documentation is found here: `<https://bjodah.github.com/pyodesys>`_

Installation
------------
Simplest way to install pyodesys and its (optional) dependencies is to use the `conda package manager <http://conda.pydata.org/docs/>`_:

::

   $ conda install -c bjodah pyodesys pytest
   $ python -m pytest --pyargs pyodesys

Optional requirements not listed in requirements.txt:

- pygslodeiv2
- pyodeint
- pycvodes

Source distribution is available here:
`<https://pypi.python.org/pypi/pyodesys>`_

Example
-------
The classic van der Pol oscillator (see `examples/van_der_pol.py <examples/van_der_pol.py>`_)

.. code:: python

   >>> import sympy as sp
   >>> import numpy as np
   >>> from pyodesys import SymbolicSys
   >>> mu = 1.0
   >>> y = sp.symarray('y', 2)
   >>> f = [y[1], -y[0] + mu*y[1]*(1 - y[0]**2)]
   >>> odesys = SymbolicSys(zip(y, f))
   >>> out = odesys.integrate('odeint', 10, [1, 0])  # use pyodeint
   >>> import matplotlib.pyplot as plt
   >>> plt.plot(out[:, 0], out[:, 1:])  # doctest: +SKIP


.. image:: https://raw.githubusercontent.com/bjodah/pyodesys/master/examples/van_der_pol.png


License
-------
The source code is Open Source and is released under the simplified 2-clause BSD license. See `LICENSE <LICENSE>`_ for further details.
Contributors are welcome to suggest improvements at https://github.com/bjodah/pyodesys

Author
------
Bj√∂rn I. Dahlgren, contact:

- gmail address: bjodah
- kth.se address: bda
