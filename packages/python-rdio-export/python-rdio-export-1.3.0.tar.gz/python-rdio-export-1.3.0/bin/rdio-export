#!/usr/bin/python

import argparse
import codecs
import csv
import locale
import os
import sys

from ConfigParser import ConfigParser, NoOptionError

from rdio_export import __version__
from rdio_export.exporter import RdioExporter

# Stash stdout
raw_stdout = sys.stdout

# Wrap stdout with the preferred encoding to properly pipe unicode
sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout) 

def uprint(msg, newline=True, quiet=False):
    """
    Unbuffered print.
    """
    if not quiet:
        sys.stdout.write("%s%s" % (msg, "\n" if newline else ''))
        sys.stdout.flush()

def print_csv(exporter, user):
    fieldnames = ['artist', 'album', 'url',]
    writer = csv.DictWriter(raw_stdout, fieldnames=fieldnames)
    writer.writeheader()
    for t in exporter.collection(user):
        row = {}
        row['artist'] = t.get('artist').encode('utf-8')
        row['album'] = t.get('name').encode('utf-8')
        row['url'] = t.get('shortUrl')
        writer.writerow(row)

def print_md(exporter, user):
    # Iterate over the user's collection, grouped by artist
    last_artist = None
    last_album = None
    for t in exporter.collection(user):
        artist = t.get('artist')
        album = t.get('album')

        # Group by artist
        if artist != last_artist:
            uprint("\n## %s" % artist)

            # Update the last artist
            last_artist = artist

        # Group by album
        if album != last_album:

            uprint("### %s" % album)

            # Update the last album
            last_album = album

        uprint('  - %s' % t.get('name'))

def get_user(exporter, email, username):
    if email:
        user = exporter.get_user(email=email)
        if not user:
            parser.error('User not found with email %s' % email)
    elif username:
        user = exporter.get_user(username=username)
        if not user:
            parser.error('User not found with username %s' % username)
    else:
        parser.error('User not found, --email or --username required')

    return user

def main():
    # Create our parser
    global parser
    parser = argparse.ArgumentParser(prog='rdio-export',
            description='Export an Rdio collection')

    # Set up our command-line arguments
    parser.add_argument('-i', '--id',
            help='your Rdio client id')
    parser.add_argument('-s', '--secret',
            help='your Rdio client secret')
    parser.add_argument('-e', '--email',
            help='the email of the Rdio user to fetch')
    parser.add_argument('-u', '--username',
            help='the username of the Rdio user to fetch')
    parser.add_argument('-f', '--format', choices=['md', 'csv'], default='md',
            help='output format (default is md)')
    parser.add_argument('--quiet', action='store_true',
            help='suppress all output except errors')
    parser.add_argument('--version', action='version',
            version='%(prog)s {v}'.format(v=__version__))

    # Get our arguments
    args = parser.parse_args()

    # Set the global quiet setting
    global quiet
    quiet = args.quiet

    # Load authentication from global config
    config = ConfigParser()
    config.read(os.path.join(os.path.expanduser('~'), '.rdioconfig'))

    rdio_client_id = ""
    rdio_client_secret = ""

    if config.has_section('Rdio'):
        try:
            rdio_client_id = config.get('Rdio', 'rdioClientId')
            rdio_client_secret = config.get('Rdio', 'rdioClientSecret')
        except NoOptionError:
            pass

    # Load authentication from env
    rdio_client_id = os.environ.get('RDIO_CLIENT_ID', rdio_client_id)
    rdio_client_secret = os.environ.get('RDIO_CLIENT_SECRET', rdio_client_secret)

    # Load authentication from the command-line
    if args.id:
        rdio_client_id = args.id
    if args.secret:
        rdio_client_secret = args.secret

    # Throw an error if authentication is missing
    if not all((rdio_client_id, rdio_client_secret)):
        parser.error('Missing required client id or secret!')

    # Create our exporter
    exporter = RdioExporter(client_id=rdio_client_id, client_secret=rdio_client_secret)

    user = get_user(exporter, args.email, args.username)
    uprint('Fetching collection for %s' % user.get('username'))

    if args.format == 'csv':
        print_csv(exporter, user)
    else:
        print_md(exporter, user)

if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit()
