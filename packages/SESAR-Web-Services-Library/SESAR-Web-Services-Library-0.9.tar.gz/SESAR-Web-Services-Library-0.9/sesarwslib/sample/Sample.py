#!/usr/bin/env python
# -*- coding: utf-8 -*-

#

#
# Command line options:
#   ('-o', 'sesarwslib/sample/Sample.py')
#
# Command line arguments:
#   sesarwslib/sample/sample.xsd
#
# Command line:
#   /usr/local/bin/generateDS.py -o "sesarwslib/sample/Sample.py" sesarwslib/sample/sample.xsd
#
# Current working directory (os.getcwd()):
#   SESAR-Web-Services-Lib
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class samples(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sample=None):
        self.original_tagname_ = None
        if sample is None:
            self.sample = []
        else:
            self.sample = sample
    def factory(*args_, **kwargs_):
        if samples.subclass:
            return samples.subclass(*args_, **kwargs_)
        else:
            return samples(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sample(self): return self.sample
    def set_sample(self, sample): self.sample = sample
    def add_sample(self, value): self.sample.append(value)
    def insert_sample_at(self, index, value): self.sample.insert(index, value)
    def replace_sample_at(self, index, value): self.sample[index] = value
    def hasContent_(self):
        if (
            self.sample
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='samples', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='samples')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='samples', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='samples'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='samples', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for sample_ in self.sample:
            sample_.export(outfile, level, namespace_, name_='sample', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sample':
            obj_ = sampleType.factory()
            obj_.build(child_)
            self.sample.append(obj_)
            obj_.original_tagname_ = 'sample'
# end class samples


class sample_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if sample_type.subclass:
            return sample_type.subclass(*args_, **kwargs_)
        else:
            return sample_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='sample_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sample_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='sample_type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sample_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sample_type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class sample_type


class user_code(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if user_code.subclass:
            return user_code.subclass(*args_, **kwargs_)
        else:
            return user_code(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='user_code', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='user_code')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='user_code', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='user_code'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='user_code', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class user_code


class name(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if name.subclass:
            return name.subclass(*args_, **kwargs_)
        else:
            return name(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='name', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='name')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='name', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='name'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='name', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class name


class material(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if material.subclass:
            return material.subclass(*args_, **kwargs_)
        else:
            return material(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='material', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='material')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='material', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='material'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='material', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class material


class igsn(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if igsn.subclass:
            return igsn.subclass(*args_, **kwargs_)
        else:
            return igsn(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='igsn', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='igsn')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='igsn', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='igsn'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='igsn', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class igsn


class parent_igsn(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if parent_igsn.subclass:
            return parent_igsn.subclass(*args_, **kwargs_)
        else:
            return parent_igsn(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='parent_igsn', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='parent_igsn')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='parent_igsn', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='parent_igsn'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='parent_igsn', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class parent_igsn


class publish_date(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if publish_date.subclass:
            return publish_date.subclass(*args_, **kwargs_)
        else:
            return publish_date(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='publish_date', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='publish_date')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='publish_date', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='publish_date'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='publish_date', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class publish_date


class classification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if classification.subclass:
            return classification.subclass(*args_, **kwargs_)
        else:
            return classification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='classification', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='classification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='classification', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='classification'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='classification', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class classification


class field_name(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if field_name.subclass:
            return field_name.subclass(*args_, **kwargs_)
        else:
            return field_name(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='field_name', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='field_name')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='field_name', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='field_name'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='field_name', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class field_name


class description(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if description.subclass:
            return description.subclass(*args_, **kwargs_)
        else:
            return description(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='description', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='description')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='description', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='description'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='description', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class description


class age_min(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if age_min.subclass:
            return age_min.subclass(*args_, **kwargs_)
        else:
            return age_min(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='age_min', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='age_min')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='age_min', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='age_min'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='age_min', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class age_min


class age_max(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if age_max.subclass:
            return age_max.subclass(*args_, **kwargs_)
        else:
            return age_max(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='age_max', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='age_max')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='age_max', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='age_max'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='age_max', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class age_max


class age_unit(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if age_unit.subclass:
            return age_unit.subclass(*args_, **kwargs_)
        else:
            return age_unit(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='age_unit', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='age_unit')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='age_unit', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='age_unit'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='age_unit', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class age_unit


class geological_age(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if geological_age.subclass:
            return geological_age.subclass(*args_, **kwargs_)
        else:
            return geological_age(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='geological_age', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='geological_age')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='geological_age', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='geological_age'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='geological_age', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class geological_age


class geological_unit(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if geological_unit.subclass:
            return geological_unit.subclass(*args_, **kwargs_)
        else:
            return geological_unit(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='geological_unit', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='geological_unit')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='geological_unit', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='geological_unit'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='geological_unit', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class geological_unit


class collection_method(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if collection_method.subclass:
            return collection_method.subclass(*args_, **kwargs_)
        else:
            return collection_method(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='collection_method', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='collection_method')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='collection_method', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='collection_method'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='collection_method', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class collection_method


class collection_method_descr(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if collection_method_descr.subclass:
            return collection_method_descr.subclass(*args_, **kwargs_)
        else:
            return collection_method_descr(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='collection_method_descr', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='collection_method_descr')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='collection_method_descr', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='collection_method_descr'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='collection_method_descr', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class collection_method_descr


class size(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if size.subclass:
            return size.subclass(*args_, **kwargs_)
        else:
            return size(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='size', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='size')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='size', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='size'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='size', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class size


class size_unit(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if size_unit.subclass:
            return size_unit.subclass(*args_, **kwargs_)
        else:
            return size_unit(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='size_unit', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='size_unit')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='size_unit', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='size_unit'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='size_unit', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class size_unit


class sample_comment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if sample_comment.subclass:
            return sample_comment.subclass(*args_, **kwargs_)
        else:
            return sample_comment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='sample_comment', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sample_comment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='sample_comment', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sample_comment'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sample_comment', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class sample_comment


class latitude(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if latitude.subclass:
            return latitude.subclass(*args_, **kwargs_)
        else:
            return latitude(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='latitude', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='latitude')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='latitude', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='latitude'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='latitude', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class latitude


class longitude(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if longitude.subclass:
            return longitude.subclass(*args_, **kwargs_)
        else:
            return longitude(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='longitude', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='longitude')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='longitude', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='longitude'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='longitude', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class longitude


class latitude_end(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if latitude_end.subclass:
            return latitude_end.subclass(*args_, **kwargs_)
        else:
            return latitude_end(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='latitude_end', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='latitude_end')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='latitude_end', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='latitude_end'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='latitude_end', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class latitude_end


class longitude_end(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if longitude_end.subclass:
            return longitude_end.subclass(*args_, **kwargs_)
        else:
            return longitude_end(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='longitude_end', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='longitude_end')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='longitude_end', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='longitude_end'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='longitude_end', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class longitude_end


class elevation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if elevation.subclass:
            return elevation.subclass(*args_, **kwargs_)
        else:
            return elevation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='elevation', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='elevation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='elevation', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='elevation'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='elevation', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class elevation


class elevation_end(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if elevation_end.subclass:
            return elevation_end.subclass(*args_, **kwargs_)
        else:
            return elevation_end(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='elevation_end', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='elevation_end')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='elevation_end', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='elevation_end'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='elevation_end', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class elevation_end


class elevation_unit(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if elevation_unit.subclass:
            return elevation_unit.subclass(*args_, **kwargs_)
        else:
            return elevation_unit(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='elevation_unit', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='elevation_unit')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='elevation_unit', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='elevation_unit'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='elevation_unit', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class elevation_unit


class primary_location_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if primary_location_type.subclass:
            return primary_location_type.subclass(*args_, **kwargs_)
        else:
            return primary_location_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='primary_location_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='primary_location_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='primary_location_type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='primary_location_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='primary_location_type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class primary_location_type


class primary_location_name(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if primary_location_name.subclass:
            return primary_location_name.subclass(*args_, **kwargs_)
        else:
            return primary_location_name(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='primary_location_name', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='primary_location_name')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='primary_location_name', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='primary_location_name'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='primary_location_name', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class primary_location_name


class location_description(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if location_description.subclass:
            return location_description.subclass(*args_, **kwargs_)
        else:
            return location_description(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='location_description', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='location_description')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='location_description', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='location_description'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='location_description', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class location_description


class locality(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if locality.subclass:
            return locality.subclass(*args_, **kwargs_)
        else:
            return locality(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='locality', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='locality')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='locality', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='locality'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='locality', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class locality


class locality_description(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if locality_description.subclass:
            return locality_description.subclass(*args_, **kwargs_)
        else:
            return locality_description(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='locality_description', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='locality_description')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='locality_description', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='locality_description'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='locality_description', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class locality_description


class country(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if country.subclass:
            return country.subclass(*args_, **kwargs_)
        else:
            return country(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='country', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='country')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='country', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='country'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='country', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class country


class province(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if province.subclass:
            return province.subclass(*args_, **kwargs_)
        else:
            return province(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='province', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='province')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='province', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='province'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='province', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class province


class county(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if county.subclass:
            return county.subclass(*args_, **kwargs_)
        else:
            return county(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='county', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='county')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='county', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='county'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='county', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class county


class city(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if city.subclass:
            return city.subclass(*args_, **kwargs_)
        else:
            return city(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='city', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='city')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='city', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='city'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='city', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class city


class cruise_field_prgrm(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if cruise_field_prgrm.subclass:
            return cruise_field_prgrm.subclass(*args_, **kwargs_)
        else:
            return cruise_field_prgrm(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cruise_field_prgrm', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cruise_field_prgrm')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cruise_field_prgrm', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cruise_field_prgrm'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cruise_field_prgrm', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class cruise_field_prgrm


class platform_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if platform_type.subclass:
            return platform_type.subclass(*args_, **kwargs_)
        else:
            return platform_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='platform_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='platform_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='platform_type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='platform_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='platform_type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class platform_type


class platform_name(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if platform_name.subclass:
            return platform_name.subclass(*args_, **kwargs_)
        else:
            return platform_name(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='platform_name', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='platform_name')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='platform_name', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='platform_name'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='platform_name', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class platform_name


class platform_descr(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if platform_descr.subclass:
            return platform_descr.subclass(*args_, **kwargs_)
        else:
            return platform_descr(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='platform_descr', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='platform_descr')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='platform_descr', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='platform_descr'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='platform_descr', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class platform_descr


class collector(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if collector.subclass:
            return collector.subclass(*args_, **kwargs_)
        else:
            return collector(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='collector', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='collector')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='collector', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='collector'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='collector', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class collector


class collector_detail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if collector_detail.subclass:
            return collector_detail.subclass(*args_, **kwargs_)
        else:
            return collector_detail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='collector_detail', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='collector_detail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='collector_detail', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='collector_detail'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='collector_detail', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class collector_detail


class collection_date_precision(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if collection_date_precision.subclass:
            return collection_date_precision.subclass(*args_, **kwargs_)
        else:
            return collection_date_precision(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='collection_date_precision', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='collection_date_precision')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='collection_date_precision', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='collection_date_precision'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='collection_date_precision', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class collection_date_precision


class current_archive(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if current_archive.subclass:
            return current_archive.subclass(*args_, **kwargs_)
        else:
            return current_archive(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='current_archive', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='current_archive')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='current_archive', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='current_archive'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='current_archive', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class current_archive


class current_archive_contact(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if current_archive_contact.subclass:
            return current_archive_contact.subclass(*args_, **kwargs_)
        else:
            return current_archive_contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='current_archive_contact', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='current_archive_contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='current_archive_contact', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='current_archive_contact'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='current_archive_contact', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class current_archive_contact


class original_archive(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if original_archive.subclass:
            return original_archive.subclass(*args_, **kwargs_)
        else:
            return original_archive(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='original_archive', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='original_archive')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='original_archive', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='original_archive'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='original_archive', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class original_archive


class original_archive_contact(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if original_archive_contact.subclass:
            return original_archive_contact.subclass(*args_, **kwargs_)
        else:
            return original_archive_contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='original_archive_contact', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='original_archive_contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='original_archive_contact', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='original_archive_contact'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='original_archive_contact', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class original_archive_contact


class depth_scale(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if depth_scale.subclass:
            return depth_scale.subclass(*args_, **kwargs_)
        else:
            return depth_scale(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='depth_scale', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='depth_scale')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='depth_scale', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='depth_scale'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='depth_scale', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class depth_scale


class navigation_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if navigation_type.subclass:
            return navigation_type.subclass(*args_, **kwargs_)
        else:
            return navigation_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='navigation_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='navigation_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='navigation_type', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='navigation_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='navigation_type', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class navigation_type


class launch_platform_name(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if launch_platform_name.subclass:
            return launch_platform_name.subclass(*args_, **kwargs_)
        else:
            return launch_platform_name(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='launch_platform_name', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='launch_platform_name')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='launch_platform_name', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='launch_platform_name'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='launch_platform_name', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class launch_platform_name


class other_names(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if other_names.subclass:
            return other_names.subclass(*args_, **kwargs_)
        else:
            return other_names(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='other_names', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='other_names')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='other_names', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='other_names'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='other_names', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class other_names


class sampleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, user_code=None, sample_type=None, name=None, material=None, igsn=None, parent_igsn=None, is_private=None, publish_date=None, classification=None, field_name=None, description=None, age_min=None, age_max=None, age_unit=None, geological_age=None, geological_unit=None, collection_method=None, collection_method_descr=None, size=None, size_unit=None, sample_comment=None, latitude=None, longitude=None, latitude_end=None, longitude_end=None, elevation=None, elevation_end=None, elevation_unit=None, primary_location_type=None, primary_location_name=None, location_description=None, locality=None, locality_description=None, country=None, province=None, county=None, city=None, cruise_field_prgrm=None, platform_type=None, platform_name=None, platform_descr=None, collector=None, collector_detail=None, collection_start_date=None, collection_end_date=None, collection_date_precision=None, current_archive=None, current_archive_contact=None, original_archive=None, original_archive_contact=None, depth_min=None, depth_max=None, depth_scale=None, other_names=None, navigation_type=None, launch_platform_name=None):
        self.original_tagname_ = None
        self.user_code = user_code
        self.validate_user_code(self.user_code)
        self.sample_type = sample_type
        self.validate_sample_type(self.sample_type)
        self.name = name
        self.validate_name(self.name)
        self.material = material
        self.validate_material(self.material)
        self.igsn = igsn
        self.validate_igsn(self.igsn)
        self.parent_igsn = parent_igsn
        self.validate_parent_igsn(self.parent_igsn)
        self.is_private = is_private
        self.publish_date = publish_date
        self.validate_publish_date(self.publish_date)
        self.classification = classification
        self.validate_classification(self.classification)
        self.field_name = field_name
        self.validate_field_name(self.field_name)
        self.description = description
        self.validate_description(self.description)
        self.age_min = age_min
        self.validate_age_min(self.age_min)
        self.age_max = age_max
        self.validate_age_max(self.age_max)
        self.age_unit = age_unit
        self.validate_age_unit(self.age_unit)
        self.geological_age = geological_age
        self.validate_geological_age(self.geological_age)
        self.geological_unit = geological_unit
        self.validate_geological_unit(self.geological_unit)
        self.collection_method = collection_method
        self.validate_collection_method(self.collection_method)
        self.collection_method_descr = collection_method_descr
        self.validate_collection_method_descr(self.collection_method_descr)
        self.size = size
        self.validate_size(self.size)
        self.size_unit = size_unit
        self.validate_size_unit(self.size_unit)
        self.sample_comment = sample_comment
        self.validate_sample_comment(self.sample_comment)
        self.latitude = latitude
        self.validate_latitude(self.latitude)
        self.longitude = longitude
        self.validate_longitude(self.longitude)
        self.latitude_end = latitude_end
        self.validate_latitude_end(self.latitude_end)
        self.longitude_end = longitude_end
        self.validate_longitude_end(self.longitude_end)
        self.elevation = elevation
        self.validate_elevation(self.elevation)
        self.elevation_end = elevation_end
        self.validate_elevation_end(self.elevation_end)
        self.elevation_unit = elevation_unit
        self.validate_elevation_unit(self.elevation_unit)
        self.primary_location_type = primary_location_type
        self.validate_primary_location_type(self.primary_location_type)
        self.primary_location_name = primary_location_name
        self.validate_primary_location_name(self.primary_location_name)
        self.location_description = location_description
        self.validate_location_description(self.location_description)
        self.locality = locality
        self.validate_locality(self.locality)
        self.locality_description = locality_description
        self.validate_locality_description(self.locality_description)
        self.country = country
        self.validate_country(self.country)
        self.province = province
        self.validate_province(self.province)
        self.county = county
        self.validate_county(self.county)
        self.city = city
        self.validate_city(self.city)
        self.cruise_field_prgrm = cruise_field_prgrm
        self.validate_cruise_field_prgrm(self.cruise_field_prgrm)
        self.platform_type = platform_type
        self.validate_platform_type(self.platform_type)
        self.platform_name = platform_name
        self.validate_platform_name(self.platform_name)
        self.platform_descr = platform_descr
        self.validate_platform_descr(self.platform_descr)
        self.collector = collector
        self.validate_collector(self.collector)
        self.collector_detail = collector_detail
        self.validate_collector_detail(self.collector_detail)
        if isinstance(collection_start_date, basestring):
            initvalue_ = datetime_.datetime.strptime(collection_start_date, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = collection_start_date
        self.collection_start_date = initvalue_
        if isinstance(collection_end_date, basestring):
            initvalue_ = datetime_.datetime.strptime(collection_end_date, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = collection_end_date
        self.collection_end_date = initvalue_
        self.collection_date_precision = collection_date_precision
        self.validate_collection_date_precision(self.collection_date_precision)
        self.current_archive = current_archive
        self.validate_current_archive(self.current_archive)
        self.current_archive_contact = current_archive_contact
        self.validate_current_archive_contact(self.current_archive_contact)
        self.original_archive = original_archive
        self.validate_original_archive(self.original_archive)
        self.original_archive_contact = original_archive_contact
        self.validate_original_archive_contact(self.original_archive_contact)
        self.depth_min = depth_min
        self.depth_max = depth_max
        self.depth_scale = depth_scale
        self.validate_depth_scale(self.depth_scale)
        if other_names is None:
            self.other_names = []
        else:
            self.other_names = other_names
        self.navigation_type = navigation_type
        self.validate_navigation_type(self.navigation_type)
        self.launch_platform_name = launch_platform_name
        self.validate_launch_platform_name(self.launch_platform_name)
    def factory(*args_, **kwargs_):
        if sampleType.subclass:
            return sampleType.subclass(*args_, **kwargs_)
        else:
            return sampleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_user_code(self): return self.user_code
    def set_user_code(self, user_code): self.user_code = user_code
    def get_sample_type(self): return self.sample_type
    def set_sample_type(self, sample_type): self.sample_type = sample_type
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_material(self): return self.material
    def set_material(self, material): self.material = material
    def get_igsn(self): return self.igsn
    def set_igsn(self, igsn): self.igsn = igsn
    def get_parent_igsn(self): return self.parent_igsn
    def set_parent_igsn(self, parent_igsn): self.parent_igsn = parent_igsn
    def get_is_private(self): return self.is_private
    def set_is_private(self, is_private): self.is_private = is_private
    def get_publish_date(self): return self.publish_date
    def set_publish_date(self, publish_date): self.publish_date = publish_date
    def get_classification(self): return self.classification
    def set_classification(self, classification): self.classification = classification
    def get_field_name(self): return self.field_name
    def set_field_name(self, field_name): self.field_name = field_name
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_age_min(self): return self.age_min
    def set_age_min(self, age_min): self.age_min = age_min
    def get_age_max(self): return self.age_max
    def set_age_max(self, age_max): self.age_max = age_max
    def get_age_unit(self): return self.age_unit
    def set_age_unit(self, age_unit): self.age_unit = age_unit
    def get_geological_age(self): return self.geological_age
    def set_geological_age(self, geological_age): self.geological_age = geological_age
    def get_geological_unit(self): return self.geological_unit
    def set_geological_unit(self, geological_unit): self.geological_unit = geological_unit
    def get_collection_method(self): return self.collection_method
    def set_collection_method(self, collection_method): self.collection_method = collection_method
    def get_collection_method_descr(self): return self.collection_method_descr
    def set_collection_method_descr(self, collection_method_descr): self.collection_method_descr = collection_method_descr
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def get_size_unit(self): return self.size_unit
    def set_size_unit(self, size_unit): self.size_unit = size_unit
    def get_sample_comment(self): return self.sample_comment
    def set_sample_comment(self, sample_comment): self.sample_comment = sample_comment
    def get_latitude(self): return self.latitude
    def set_latitude(self, latitude): self.latitude = latitude
    def get_longitude(self): return self.longitude
    def set_longitude(self, longitude): self.longitude = longitude
    def get_latitude_end(self): return self.latitude_end
    def set_latitude_end(self, latitude_end): self.latitude_end = latitude_end
    def get_longitude_end(self): return self.longitude_end
    def set_longitude_end(self, longitude_end): self.longitude_end = longitude_end
    def get_elevation(self): return self.elevation
    def set_elevation(self, elevation): self.elevation = elevation
    def get_elevation_end(self): return self.elevation_end
    def set_elevation_end(self, elevation_end): self.elevation_end = elevation_end
    def get_elevation_unit(self): return self.elevation_unit
    def set_elevation_unit(self, elevation_unit): self.elevation_unit = elevation_unit
    def get_primary_location_type(self): return self.primary_location_type
    def set_primary_location_type(self, primary_location_type): self.primary_location_type = primary_location_type
    def get_primary_location_name(self): return self.primary_location_name
    def set_primary_location_name(self, primary_location_name): self.primary_location_name = primary_location_name
    def get_location_description(self): return self.location_description
    def set_location_description(self, location_description): self.location_description = location_description
    def get_locality(self): return self.locality
    def set_locality(self, locality): self.locality = locality
    def get_locality_description(self): return self.locality_description
    def set_locality_description(self, locality_description): self.locality_description = locality_description
    def get_country(self): return self.country
    def set_country(self, country): self.country = country
    def get_province(self): return self.province
    def set_province(self, province): self.province = province
    def get_county(self): return self.county
    def set_county(self, county): self.county = county
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_cruise_field_prgrm(self): return self.cruise_field_prgrm
    def set_cruise_field_prgrm(self, cruise_field_prgrm): self.cruise_field_prgrm = cruise_field_prgrm
    def get_platform_type(self): return self.platform_type
    def set_platform_type(self, platform_type): self.platform_type = platform_type
    def get_platform_name(self): return self.platform_name
    def set_platform_name(self, platform_name): self.platform_name = platform_name
    def get_platform_descr(self): return self.platform_descr
    def set_platform_descr(self, platform_descr): self.platform_descr = platform_descr
    def get_collector(self): return self.collector
    def set_collector(self, collector): self.collector = collector
    def get_collector_detail(self): return self.collector_detail
    def set_collector_detail(self, collector_detail): self.collector_detail = collector_detail
    def get_collection_start_date(self): return self.collection_start_date
    def set_collection_start_date(self, collection_start_date): self.collection_start_date = collection_start_date
    def get_collection_end_date(self): return self.collection_end_date
    def set_collection_end_date(self, collection_end_date): self.collection_end_date = collection_end_date
    def get_collection_date_precision(self): return self.collection_date_precision
    def set_collection_date_precision(self, collection_date_precision): self.collection_date_precision = collection_date_precision
    def get_current_archive(self): return self.current_archive
    def set_current_archive(self, current_archive): self.current_archive = current_archive
    def get_current_archive_contact(self): return self.current_archive_contact
    def set_current_archive_contact(self, current_archive_contact): self.current_archive_contact = current_archive_contact
    def get_original_archive(self): return self.original_archive
    def set_original_archive(self, original_archive): self.original_archive = original_archive
    def get_original_archive_contact(self): return self.original_archive_contact
    def set_original_archive_contact(self, original_archive_contact): self.original_archive_contact = original_archive_contact
    def get_depth_min(self): return self.depth_min
    def set_depth_min(self, depth_min): self.depth_min = depth_min
    def get_depth_max(self): return self.depth_max
    def set_depth_max(self, depth_max): self.depth_max = depth_max
    def get_depth_scale(self): return self.depth_scale
    def set_depth_scale(self, depth_scale): self.depth_scale = depth_scale
    def get_other_names(self): return self.other_names
    def set_other_names(self, other_names): self.other_names = other_names
    def add_other_names(self, value): self.other_names.append(value)
    def insert_other_names_at(self, index, value): self.other_names.insert(index, value)
    def replace_other_names_at(self, index, value): self.other_names[index] = value
    def get_navigation_type(self): return self.navigation_type
    def set_navigation_type(self, navigation_type): self.navigation_type = navigation_type
    def get_launch_platform_name(self): return self.launch_platform_name
    def set_launch_platform_name(self, launch_platform_name): self.launch_platform_name = launch_platform_name
    def validate_user_code(self, value):
        # Validate type user_code, a restriction on xs:token.
        pass
    def validate_sample_type(self, value):
        # Validate type sample_type, a restriction on xs:token.
        pass
    def validate_name(self, value):
        # Validate type name, a restriction on xs:token.
        pass
    def validate_material(self, value):
        # Validate type material, a restriction on xs:token.
        pass
    def validate_igsn(self, value):
        # Validate type igsn, a restriction on xs:token.
        pass
    def validate_parent_igsn(self, value):
        # Validate type parent_igsn, a restriction on xs:token.
        pass
    def validate_publish_date(self, value):
        # Validate type publish_date, a restriction on xs:token.
        pass
    def validate_classification(self, value):
        # Validate type classification, a restriction on xs:token.
        pass
    def validate_field_name(self, value):
        # Validate type field_name, a restriction on xs:token.
        pass
    def validate_description(self, value):
        # Validate type description, a restriction on xs:token.
        pass
    def validate_age_min(self, value):
        # Validate type age_min, a restriction on xs:decimal.
        pass
    def validate_age_max(self, value):
        # Validate type age_max, a restriction on xs:decimal.
        pass
    def validate_age_unit(self, value):
        # Validate type age_unit, a restriction on xs:token.
        pass
    def validate_geological_age(self, value):
        # Validate type geological_age, a restriction on xs:token.
        pass
    def validate_geological_unit(self, value):
        # Validate type geological_unit, a restriction on xs:token.
        pass
    def validate_collection_method(self, value):
        # Validate type collection_method, a restriction on xs:token.
        pass
    def validate_collection_method_descr(self, value):
        # Validate type collection_method_descr, a restriction on xs:token.
        pass
    def validate_size(self, value):
        # Validate type size, a restriction on xs:token.
        pass
    def validate_size_unit(self, value):
        # Validate type size_unit, a restriction on xs:token.
        pass
    def validate_sample_comment(self, value):
        # Validate type sample_comment, a restriction on xs:token.
        pass
    def validate_latitude(self, value):
        # Validate type latitude, a restriction on xs:decimal.
        pass
    def validate_longitude(self, value):
        # Validate type longitude, a restriction on xs:decimal.
        pass
    def validate_latitude_end(self, value):
        # Validate type latitude_end, a restriction on xs:decimal.
        pass
    def validate_longitude_end(self, value):
        # Validate type longitude_end, a restriction on xs:decimal.
        pass
    def validate_elevation(self, value):
        # Validate type elevation, a restriction on xs:decimal.
        pass
    def validate_elevation_end(self, value):
        # Validate type elevation_end, a restriction on xs:decimal.
        pass
    def validate_elevation_unit(self, value):
        # Validate type elevation_unit, a restriction on xs:token.
        pass
    def validate_primary_location_type(self, value):
        # Validate type primary_location_type, a restriction on xs:token.
        pass
    def validate_primary_location_name(self, value):
        # Validate type primary_location_name, a restriction on xs:token.
        pass
    def validate_location_description(self, value):
        # Validate type location_description, a restriction on xs:token.
        pass
    def validate_locality(self, value):
        # Validate type locality, a restriction on xs:token.
        pass
    def validate_locality_description(self, value):
        # Validate type locality_description, a restriction on xs:token.
        pass
    def validate_country(self, value):
        # Validate type country, a restriction on xs:token.
        pass
    def validate_province(self, value):
        # Validate type province, a restriction on xs:token.
        pass
    def validate_county(self, value):
        # Validate type county, a restriction on xs:token.
        pass
    def validate_city(self, value):
        # Validate type city, a restriction on xs:token.
        pass
    def validate_cruise_field_prgrm(self, value):
        # Validate type cruise_field_prgrm, a restriction on xs:token.
        pass
    def validate_platform_type(self, value):
        # Validate type platform_type, a restriction on xs:token.
        pass
    def validate_platform_name(self, value):
        # Validate type platform_name, a restriction on xs:token.
        pass
    def validate_platform_descr(self, value):
        # Validate type platform_descr, a restriction on xs:token.
        pass
    def validate_collector(self, value):
        # Validate type collector, a restriction on xs:token.
        pass
    def validate_collector_detail(self, value):
        # Validate type collector_detail, a restriction on xs:token.
        pass
    def validate_collection_date_precision(self, value):
        # Validate type collection_date_precision, a restriction on xs:token.
        pass
    def validate_current_archive(self, value):
        # Validate type current_archive, a restriction on xs:token.
        pass
    def validate_current_archive_contact(self, value):
        # Validate type current_archive_contact, a restriction on xs:token.
        pass
    def validate_original_archive(self, value):
        # Validate type original_archive, a restriction on xs:token.
        pass
    def validate_original_archive_contact(self, value):
        # Validate type original_archive_contact, a restriction on xs:token.
        pass
    def validate_depth_scale(self, value):
        # Validate type depth_scale, a restriction on xs:token.
        pass
    def validate_other_names(self, value):
        # Validate type other_names, a restriction on xs:token.
        pass
    def validate_navigation_type(self, value):
        # Validate type navigation_type, a restriction on xs:token.
        pass
    def validate_launch_platform_name(self, value):
        # Validate type launch_platform_name, a restriction on xs:token.
        pass
    def hasContent_(self):
        if (
            self.user_code is not None or
            self.sample_type is not None or
            self.name is not None or
            self.material is not None or
            self.igsn is not None or
            self.parent_igsn is not None or
            self.is_private is not None or
            self.publish_date is not None or
            self.classification is not None or
            self.field_name is not None or
            self.description is not None or
            self.age_min is not None or
            self.age_max is not None or
            self.age_unit is not None or
            self.geological_age is not None or
            self.geological_unit is not None or
            self.collection_method is not None or
            self.collection_method_descr is not None or
            self.size is not None or
            self.size_unit is not None or
            self.sample_comment is not None or
            self.latitude is not None or
            self.longitude is not None or
            self.latitude_end is not None or
            self.longitude_end is not None or
            self.elevation is not None or
            self.elevation_end is not None or
            self.elevation_unit is not None or
            self.primary_location_type is not None or
            self.primary_location_name is not None or
            self.location_description is not None or
            self.locality is not None or
            self.locality_description is not None or
            self.country is not None or
            self.province is not None or
            self.county is not None or
            self.city is not None or
            self.cruise_field_prgrm is not None or
            self.platform_type is not None or
            self.platform_name is not None or
            self.platform_descr is not None or
            self.collector is not None or
            self.collector_detail is not None or
            self.collection_start_date is not None or
            self.collection_end_date is not None or
            self.collection_date_precision is not None or
            self.current_archive is not None or
            self.current_archive_contact is not None or
            self.original_archive is not None or
            self.original_archive_contact is not None or
            self.depth_min is not None or
            self.depth_max is not None or
            self.depth_scale is not None or
            self.other_names or
            self.navigation_type is not None or
            self.launch_platform_name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='sampleType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sampleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='sampleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sampleType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sampleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.user_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%suser_code>%s</%suser_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.user_code).encode(ExternalEncoding), input_name='user_code'), namespace_, eol_))
        if self.sample_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssample_type>%s</%ssample_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.sample_type).encode(ExternalEncoding), input_name='sample_type'), namespace_, eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
        if self.material is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smaterial>%s</%smaterial>%s' % (namespace_, self.gds_format_string(quote_xml(self.material).encode(ExternalEncoding), input_name='material'), namespace_, eol_))
        if self.igsn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sigsn>%s</%sigsn>%s' % (namespace_, self.gds_format_string(quote_xml(self.igsn).encode(ExternalEncoding), input_name='igsn'), namespace_, eol_))
        if self.parent_igsn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparent_igsn>%s</%sparent_igsn>%s' % (namespace_, self.gds_format_string(quote_xml(self.parent_igsn).encode(ExternalEncoding), input_name='parent_igsn'), namespace_, eol_))
        if self.is_private is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sis_private>%s</%sis_private>%s' % (namespace_, self.gds_format_integer(self.is_private, input_name='is_private'), namespace_, eol_))
        if self.publish_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spublish_date>%s</%spublish_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.publish_date).encode(ExternalEncoding), input_name='publish_date'), namespace_, eol_))
        if self.classification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclassification>%s</%sclassification>%s' % (namespace_, self.gds_format_string(quote_xml(self.classification).encode(ExternalEncoding), input_name='classification'), namespace_, eol_))
        if self.field_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfield_name>%s</%sfield_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.field_name).encode(ExternalEncoding), input_name='field_name'), namespace_, eol_))
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespace_, self.gds_format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_, eol_))
        if self.age_min is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sage_min>%s</%sage_min>%s' % (namespace_, self.gds_format_float(self.age_min, input_name='age_min'), namespace_, eol_))
        if self.age_max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sage_max>%s</%sage_max>%s' % (namespace_, self.gds_format_float(self.age_max, input_name='age_max'), namespace_, eol_))
        if self.age_unit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sage_unit>%s</%sage_unit>%s' % (namespace_, self.gds_format_string(quote_xml(self.age_unit).encode(ExternalEncoding), input_name='age_unit'), namespace_, eol_))
        if self.geological_age is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeological_age>%s</%sgeological_age>%s' % (namespace_, self.gds_format_string(quote_xml(self.geological_age).encode(ExternalEncoding), input_name='geological_age'), namespace_, eol_))
        if self.geological_unit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeological_unit>%s</%sgeological_unit>%s' % (namespace_, self.gds_format_string(quote_xml(self.geological_unit).encode(ExternalEncoding), input_name='geological_unit'), namespace_, eol_))
        if self.collection_method is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scollection_method>%s</%scollection_method>%s' % (namespace_, self.gds_format_string(quote_xml(self.collection_method).encode(ExternalEncoding), input_name='collection_method'), namespace_, eol_))
        if self.collection_method_descr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scollection_method_descr>%s</%scollection_method_descr>%s' % (namespace_, self.gds_format_string(quote_xml(self.collection_method_descr).encode(ExternalEncoding), input_name='collection_method_descr'), namespace_, eol_))
        if self.size is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssize>%s</%ssize>%s' % (namespace_, self.gds_format_string(quote_xml(self.size).encode(ExternalEncoding), input_name='size'), namespace_, eol_))
        if self.size_unit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssize_unit>%s</%ssize_unit>%s' % (namespace_, self.gds_format_string(quote_xml(self.size_unit).encode(ExternalEncoding), input_name='size_unit'), namespace_, eol_))
        if self.sample_comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssample_comment>%s</%ssample_comment>%s' % (namespace_, self.gds_format_string(quote_xml(self.sample_comment).encode(ExternalEncoding), input_name='sample_comment'), namespace_, eol_))
        if self.latitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slatitude>%s</%slatitude>%s' % (namespace_, self.gds_format_float(self.latitude, input_name='latitude'), namespace_, eol_))
        if self.longitude is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slongitude>%s</%slongitude>%s' % (namespace_, self.gds_format_float(self.longitude, input_name='longitude'), namespace_, eol_))
        if self.latitude_end is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slatitude_end>%s</%slatitude_end>%s' % (namespace_, self.gds_format_float(self.latitude_end, input_name='latitude_end'), namespace_, eol_))
        if self.longitude_end is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slongitude_end>%s</%slongitude_end>%s' % (namespace_, self.gds_format_float(self.longitude_end, input_name='longitude_end'), namespace_, eol_))
        if self.elevation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%selevation>%s</%selevation>%s' % (namespace_, self.gds_format_float(self.elevation, input_name='elevation'), namespace_, eol_))
        if self.elevation_end is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%selevation_end>%s</%selevation_end>%s' % (namespace_, self.gds_format_float(self.elevation_end, input_name='elevation_end'), namespace_, eol_))
        if self.elevation_unit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%selevation_unit>%s</%selevation_unit>%s' % (namespace_, self.gds_format_string(quote_xml(self.elevation_unit).encode(ExternalEncoding), input_name='elevation_unit'), namespace_, eol_))
        if self.primary_location_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprimary_location_type>%s</%sprimary_location_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.primary_location_type).encode(ExternalEncoding), input_name='primary_location_type'), namespace_, eol_))
        if self.primary_location_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprimary_location_name>%s</%sprimary_location_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.primary_location_name).encode(ExternalEncoding), input_name='primary_location_name'), namespace_, eol_))
        if self.location_description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slocation_description>%s</%slocation_description>%s' % (namespace_, self.gds_format_string(quote_xml(self.location_description).encode(ExternalEncoding), input_name='location_description'), namespace_, eol_))
        if self.locality is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slocality>%s</%slocality>%s' % (namespace_, self.gds_format_string(quote_xml(self.locality).encode(ExternalEncoding), input_name='locality'), namespace_, eol_))
        if self.locality_description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slocality_description>%s</%slocality_description>%s' % (namespace_, self.gds_format_string(quote_xml(self.locality_description).encode(ExternalEncoding), input_name='locality_description'), namespace_, eol_))
        if self.country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountry>%s</%scountry>%s' % (namespace_, self.gds_format_string(quote_xml(self.country).encode(ExternalEncoding), input_name='country'), namespace_, eol_))
        if self.province is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprovince>%s</%sprovince>%s' % (namespace_, self.gds_format_string(quote_xml(self.province).encode(ExternalEncoding), input_name='province'), namespace_, eol_))
        if self.county is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scounty>%s</%scounty>%s' % (namespace_, self.gds_format_string(quote_xml(self.county).encode(ExternalEncoding), input_name='county'), namespace_, eol_))
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespace_, self.gds_format_string(quote_xml(self.city).encode(ExternalEncoding), input_name='city'), namespace_, eol_))
        if self.cruise_field_prgrm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scruise_field_prgrm>%s</%scruise_field_prgrm>%s' % (namespace_, self.gds_format_string(quote_xml(self.cruise_field_prgrm).encode(ExternalEncoding), input_name='cruise_field_prgrm'), namespace_, eol_))
        if self.platform_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splatform_type>%s</%splatform_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.platform_type).encode(ExternalEncoding), input_name='platform_type'), namespace_, eol_))
        if self.platform_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splatform_name>%s</%splatform_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.platform_name).encode(ExternalEncoding), input_name='platform_name'), namespace_, eol_))
        if self.platform_descr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splatform_descr>%s</%splatform_descr>%s' % (namespace_, self.gds_format_string(quote_xml(self.platform_descr).encode(ExternalEncoding), input_name='platform_descr'), namespace_, eol_))
        if self.collector is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scollector>%s</%scollector>%s' % (namespace_, self.gds_format_string(quote_xml(self.collector).encode(ExternalEncoding), input_name='collector'), namespace_, eol_))
        if self.collector_detail is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scollector_detail>%s</%scollector_detail>%s' % (namespace_, self.gds_format_string(quote_xml(self.collector_detail).encode(ExternalEncoding), input_name='collector_detail'), namespace_, eol_))
        if self.collection_start_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scollection_start_date>%s</%scollection_start_date>%s' % (namespace_, self.gds_format_datetime(self.collection_start_date, input_name='collection_start_date'), namespace_, eol_))
        if self.collection_end_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scollection_end_date>%s</%scollection_end_date>%s' % (namespace_, self.gds_format_datetime(self.collection_end_date, input_name='collection_end_date'), namespace_, eol_))
        if self.collection_date_precision is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scollection_date_precision>%s</%scollection_date_precision>%s' % (namespace_, self.gds_format_string(quote_xml(self.collection_date_precision).encode(ExternalEncoding), input_name='collection_date_precision'), namespace_, eol_))
        if self.current_archive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scurrent_archive>%s</%scurrent_archive>%s' % (namespace_, self.gds_format_string(quote_xml(self.current_archive).encode(ExternalEncoding), input_name='current_archive'), namespace_, eol_))
        if self.current_archive_contact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scurrent_archive_contact>%s</%scurrent_archive_contact>%s' % (namespace_, self.gds_format_string(quote_xml(self.current_archive_contact).encode(ExternalEncoding), input_name='current_archive_contact'), namespace_, eol_))
        if self.original_archive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginal_archive>%s</%soriginal_archive>%s' % (namespace_, self.gds_format_string(quote_xml(self.original_archive).encode(ExternalEncoding), input_name='original_archive'), namespace_, eol_))
        if self.original_archive_contact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginal_archive_contact>%s</%soriginal_archive_contact>%s' % (namespace_, self.gds_format_string(quote_xml(self.original_archive_contact).encode(ExternalEncoding), input_name='original_archive_contact'), namespace_, eol_))
        if self.depth_min is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepth_min>%s</%sdepth_min>%s' % (namespace_, self.gds_format_float(self.depth_min, input_name='depth_min'), namespace_, eol_))
        if self.depth_max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepth_max>%s</%sdepth_max>%s' % (namespace_, self.gds_format_float(self.depth_max, input_name='depth_max'), namespace_, eol_))
        if self.depth_scale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepth_scale>%s</%sdepth_scale>%s' % (namespace_, self.gds_format_string(quote_xml(self.depth_scale).encode(ExternalEncoding), input_name='depth_scale'), namespace_, eol_))
        for other_names_ in self.other_names:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sother_names>%s</%sother_names>%s' % (namespace_, self.gds_format_string(quote_xml(other_names_).encode(ExternalEncoding), input_name='other_names'), namespace_, eol_))
        if self.navigation_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snavigation_type>%s</%snavigation_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.navigation_type).encode(ExternalEncoding), input_name='navigation_type'), namespace_, eol_))
        if self.launch_platform_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slaunch_platform_name>%s</%slaunch_platform_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.launch_platform_name).encode(ExternalEncoding), input_name='launch_platform_name'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'user_code':
            user_code_ = child_.text
            user_code_ = re_.sub(String_cleanup_pat_, " ", user_code_).strip()
            user_code_ = self.gds_validate_string(user_code_, node, 'user_code')
            self.user_code = user_code_
            # validate type user_code
            self.validate_user_code(self.user_code)
        elif nodeName_ == 'sample_type':
            sample_type_ = child_.text
            sample_type_ = re_.sub(String_cleanup_pat_, " ", sample_type_).strip()
            sample_type_ = self.gds_validate_string(sample_type_, node, 'sample_type')
            self.sample_type = sample_type_
            # validate type sample_type
            self.validate_sample_type(self.sample_type)
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = re_.sub(String_cleanup_pat_, " ", name_).strip()
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
            # validate type name
            self.validate_name(self.name)
        elif nodeName_ == 'material':
            material_ = child_.text
            material_ = re_.sub(String_cleanup_pat_, " ", material_).strip()
            material_ = self.gds_validate_string(material_, node, 'material')
            self.material = material_
            # validate type material
            self.validate_material(self.material)
        elif nodeName_ == 'igsn':
            igsn_ = child_.text
            igsn_ = re_.sub(String_cleanup_pat_, " ", igsn_).strip()
            igsn_ = self.gds_validate_string(igsn_, node, 'igsn')
            self.igsn = igsn_
            # validate type igsn
            self.validate_igsn(self.igsn)
        elif nodeName_ == 'parent_igsn':
            parent_igsn_ = child_.text
            parent_igsn_ = re_.sub(String_cleanup_pat_, " ", parent_igsn_).strip()
            parent_igsn_ = self.gds_validate_string(parent_igsn_, node, 'parent_igsn')
            self.parent_igsn = parent_igsn_
            # validate type parent_igsn
            self.validate_parent_igsn(self.parent_igsn)
        elif nodeName_ == 'is_private':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'is_private')
            self.is_private = ival_
        elif nodeName_ == 'publish_date':
            publish_date_ = child_.text
            publish_date_ = re_.sub(String_cleanup_pat_, " ", publish_date_).strip()
            publish_date_ = self.gds_validate_string(publish_date_, node, 'publish_date')
            self.publish_date = publish_date_
            # validate type publish_date
            self.validate_publish_date(self.publish_date)
        elif nodeName_ == 'classification':
            classification_ = child_.text
            classification_ = re_.sub(String_cleanup_pat_, " ", classification_).strip()
            classification_ = self.gds_validate_string(classification_, node, 'classification')
            self.classification = classification_
            # validate type classification
            self.validate_classification(self.classification)
        elif nodeName_ == 'field_name':
            field_name_ = child_.text
            field_name_ = re_.sub(String_cleanup_pat_, " ", field_name_).strip()
            field_name_ = self.gds_validate_string(field_name_, node, 'field_name')
            self.field_name = field_name_
            # validate type field_name
            self.validate_field_name(self.field_name)
        elif nodeName_ == 'description':
            description_ = child_.text
            description_ = re_.sub(String_cleanup_pat_, " ", description_).strip()
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
            # validate type description
            self.validate_description(self.description)
        elif nodeName_ == 'age_min':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'age_min')
            self.age_min = fval_
            # validate type age_min
            self.validate_age_min(self.age_min)
        elif nodeName_ == 'age_max':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'age_max')
            self.age_max = fval_
            # validate type age_max
            self.validate_age_max(self.age_max)
        elif nodeName_ == 'age_unit':
            age_unit_ = child_.text
            age_unit_ = re_.sub(String_cleanup_pat_, " ", age_unit_).strip()
            age_unit_ = self.gds_validate_string(age_unit_, node, 'age_unit')
            self.age_unit = age_unit_
            # validate type age_unit
            self.validate_age_unit(self.age_unit)
        elif nodeName_ == 'geological_age':
            geological_age_ = child_.text
            geological_age_ = re_.sub(String_cleanup_pat_, " ", geological_age_).strip()
            geological_age_ = self.gds_validate_string(geological_age_, node, 'geological_age')
            self.geological_age = geological_age_
            # validate type geological_age
            self.validate_geological_age(self.geological_age)
        elif nodeName_ == 'geological_unit':
            geological_unit_ = child_.text
            geological_unit_ = re_.sub(String_cleanup_pat_, " ", geological_unit_).strip()
            geological_unit_ = self.gds_validate_string(geological_unit_, node, 'geological_unit')
            self.geological_unit = geological_unit_
            # validate type geological_unit
            self.validate_geological_unit(self.geological_unit)
        elif nodeName_ == 'collection_method':
            collection_method_ = child_.text
            collection_method_ = re_.sub(String_cleanup_pat_, " ", collection_method_).strip()
            collection_method_ = self.gds_validate_string(collection_method_, node, 'collection_method')
            self.collection_method = collection_method_
            # validate type collection_method
            self.validate_collection_method(self.collection_method)
        elif nodeName_ == 'collection_method_descr':
            collection_method_descr_ = child_.text
            collection_method_descr_ = re_.sub(String_cleanup_pat_, " ", collection_method_descr_).strip()
            collection_method_descr_ = self.gds_validate_string(collection_method_descr_, node, 'collection_method_descr')
            self.collection_method_descr = collection_method_descr_
            # validate type collection_method_descr
            self.validate_collection_method_descr(self.collection_method_descr)
        elif nodeName_ == 'size':
            size_ = child_.text
            size_ = re_.sub(String_cleanup_pat_, " ", size_).strip()
            size_ = self.gds_validate_string(size_, node, 'size')
            self.size = size_
            # validate type size
            self.validate_size(self.size)
        elif nodeName_ == 'size_unit':
            size_unit_ = child_.text
            size_unit_ = re_.sub(String_cleanup_pat_, " ", size_unit_).strip()
            size_unit_ = self.gds_validate_string(size_unit_, node, 'size_unit')
            self.size_unit = size_unit_
            # validate type size_unit
            self.validate_size_unit(self.size_unit)
        elif nodeName_ == 'sample_comment':
            sample_comment_ = child_.text
            sample_comment_ = re_.sub(String_cleanup_pat_, " ", sample_comment_).strip()
            sample_comment_ = self.gds_validate_string(sample_comment_, node, 'sample_comment')
            self.sample_comment = sample_comment_
            # validate type sample_comment
            self.validate_sample_comment(self.sample_comment)
        elif nodeName_ == 'latitude':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'latitude')
            self.latitude = fval_
            # validate type latitude
            self.validate_latitude(self.latitude)
        elif nodeName_ == 'longitude':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'longitude')
            self.longitude = fval_
            # validate type longitude
            self.validate_longitude(self.longitude)
        elif nodeName_ == 'latitude_end':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'latitude_end')
            self.latitude_end = fval_
            # validate type latitude_end
            self.validate_latitude_end(self.latitude_end)
        elif nodeName_ == 'longitude_end':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'longitude_end')
            self.longitude_end = fval_
            # validate type longitude_end
            self.validate_longitude_end(self.longitude_end)
        elif nodeName_ == 'elevation':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'elevation')
            self.elevation = fval_
            # validate type elevation
            self.validate_elevation(self.elevation)
        elif nodeName_ == 'elevation_end':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'elevation_end')
            self.elevation_end = fval_
            # validate type elevation_end
            self.validate_elevation_end(self.elevation_end)
        elif nodeName_ == 'elevation_unit':
            elevation_unit_ = child_.text
            elevation_unit_ = re_.sub(String_cleanup_pat_, " ", elevation_unit_).strip()
            elevation_unit_ = self.gds_validate_string(elevation_unit_, node, 'elevation_unit')
            self.elevation_unit = elevation_unit_
            # validate type elevation_unit
            self.validate_elevation_unit(self.elevation_unit)
        elif nodeName_ == 'primary_location_type':
            primary_location_type_ = child_.text
            primary_location_type_ = re_.sub(String_cleanup_pat_, " ", primary_location_type_).strip()
            primary_location_type_ = self.gds_validate_string(primary_location_type_, node, 'primary_location_type')
            self.primary_location_type = primary_location_type_
            # validate type primary_location_type
            self.validate_primary_location_type(self.primary_location_type)
        elif nodeName_ == 'primary_location_name':
            primary_location_name_ = child_.text
            primary_location_name_ = re_.sub(String_cleanup_pat_, " ", primary_location_name_).strip()
            primary_location_name_ = self.gds_validate_string(primary_location_name_, node, 'primary_location_name')
            self.primary_location_name = primary_location_name_
            # validate type primary_location_name
            self.validate_primary_location_name(self.primary_location_name)
        elif nodeName_ == 'location_description':
            location_description_ = child_.text
            location_description_ = re_.sub(String_cleanup_pat_, " ", location_description_).strip()
            location_description_ = self.gds_validate_string(location_description_, node, 'location_description')
            self.location_description = location_description_
            # validate type location_description
            self.validate_location_description(self.location_description)
        elif nodeName_ == 'locality':
            locality_ = child_.text
            locality_ = re_.sub(String_cleanup_pat_, " ", locality_).strip()
            locality_ = self.gds_validate_string(locality_, node, 'locality')
            self.locality = locality_
            # validate type locality
            self.validate_locality(self.locality)
        elif nodeName_ == 'locality_description':
            locality_description_ = child_.text
            locality_description_ = re_.sub(String_cleanup_pat_, " ", locality_description_).strip()
            locality_description_ = self.gds_validate_string(locality_description_, node, 'locality_description')
            self.locality_description = locality_description_
            # validate type locality_description
            self.validate_locality_description(self.locality_description)
        elif nodeName_ == 'country':
            country_ = child_.text
            country_ = re_.sub(String_cleanup_pat_, " ", country_).strip()
            country_ = self.gds_validate_string(country_, node, 'country')
            self.country = country_
            # validate type country
            self.validate_country(self.country)
        elif nodeName_ == 'province':
            province_ = child_.text
            province_ = re_.sub(String_cleanup_pat_, " ", province_).strip()
            province_ = self.gds_validate_string(province_, node, 'province')
            self.province = province_
            # validate type province
            self.validate_province(self.province)
        elif nodeName_ == 'county':
            county_ = child_.text
            county_ = re_.sub(String_cleanup_pat_, " ", county_).strip()
            county_ = self.gds_validate_string(county_, node, 'county')
            self.county = county_
            # validate type county
            self.validate_county(self.county)
        elif nodeName_ == 'city':
            city_ = child_.text
            city_ = re_.sub(String_cleanup_pat_, " ", city_).strip()
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
            # validate type city
            self.validate_city(self.city)
        elif nodeName_ == 'cruise_field_prgrm':
            cruise_field_prgrm_ = child_.text
            cruise_field_prgrm_ = re_.sub(String_cleanup_pat_, " ", cruise_field_prgrm_).strip()
            cruise_field_prgrm_ = self.gds_validate_string(cruise_field_prgrm_, node, 'cruise_field_prgrm')
            self.cruise_field_prgrm = cruise_field_prgrm_
            # validate type cruise_field_prgrm
            self.validate_cruise_field_prgrm(self.cruise_field_prgrm)
        elif nodeName_ == 'platform_type':
            platform_type_ = child_.text
            platform_type_ = re_.sub(String_cleanup_pat_, " ", platform_type_).strip()
            platform_type_ = self.gds_validate_string(platform_type_, node, 'platform_type')
            self.platform_type = platform_type_
            # validate type platform_type
            self.validate_platform_type(self.platform_type)
        elif nodeName_ == 'platform_name':
            platform_name_ = child_.text
            platform_name_ = re_.sub(String_cleanup_pat_, " ", platform_name_).strip()
            platform_name_ = self.gds_validate_string(platform_name_, node, 'platform_name')
            self.platform_name = platform_name_
            # validate type platform_name
            self.validate_platform_name(self.platform_name)
        elif nodeName_ == 'platform_descr':
            platform_descr_ = child_.text
            platform_descr_ = re_.sub(String_cleanup_pat_, " ", platform_descr_).strip()
            platform_descr_ = self.gds_validate_string(platform_descr_, node, 'platform_descr')
            self.platform_descr = platform_descr_
            # validate type platform_descr
            self.validate_platform_descr(self.platform_descr)
        elif nodeName_ == 'collector':
            collector_ = child_.text
            collector_ = re_.sub(String_cleanup_pat_, " ", collector_).strip()
            collector_ = self.gds_validate_string(collector_, node, 'collector')
            self.collector = collector_
            # validate type collector
            self.validate_collector(self.collector)
        elif nodeName_ == 'collector_detail':
            collector_detail_ = child_.text
            collector_detail_ = re_.sub(String_cleanup_pat_, " ", collector_detail_).strip()
            collector_detail_ = self.gds_validate_string(collector_detail_, node, 'collector_detail')
            self.collector_detail = collector_detail_
            # validate type collector_detail
            self.validate_collector_detail(self.collector_detail)
        elif nodeName_ == 'collection_start_date':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.collection_start_date = dval_
        elif nodeName_ == 'collection_end_date':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.collection_end_date = dval_
        elif nodeName_ == 'collection_date_precision':
            collection_date_precision_ = child_.text
            collection_date_precision_ = re_.sub(String_cleanup_pat_, " ", collection_date_precision_).strip()
            collection_date_precision_ = self.gds_validate_string(collection_date_precision_, node, 'collection_date_precision')
            self.collection_date_precision = collection_date_precision_
            # validate type collection_date_precision
            self.validate_collection_date_precision(self.collection_date_precision)
        elif nodeName_ == 'current_archive':
            current_archive_ = child_.text
            current_archive_ = re_.sub(String_cleanup_pat_, " ", current_archive_).strip()
            current_archive_ = self.gds_validate_string(current_archive_, node, 'current_archive')
            self.current_archive = current_archive_
            # validate type current_archive
            self.validate_current_archive(self.current_archive)
        elif nodeName_ == 'current_archive_contact':
            current_archive_contact_ = child_.text
            current_archive_contact_ = re_.sub(String_cleanup_pat_, " ", current_archive_contact_).strip()
            current_archive_contact_ = self.gds_validate_string(current_archive_contact_, node, 'current_archive_contact')
            self.current_archive_contact = current_archive_contact_
            # validate type current_archive_contact
            self.validate_current_archive_contact(self.current_archive_contact)
        elif nodeName_ == 'original_archive':
            original_archive_ = child_.text
            original_archive_ = re_.sub(String_cleanup_pat_, " ", original_archive_).strip()
            original_archive_ = self.gds_validate_string(original_archive_, node, 'original_archive')
            self.original_archive = original_archive_
            # validate type original_archive
            self.validate_original_archive(self.original_archive)
        elif nodeName_ == 'original_archive_contact':
            original_archive_contact_ = child_.text
            original_archive_contact_ = re_.sub(String_cleanup_pat_, " ", original_archive_contact_).strip()
            original_archive_contact_ = self.gds_validate_string(original_archive_contact_, node, 'original_archive_contact')
            self.original_archive_contact = original_archive_contact_
            # validate type original_archive_contact
            self.validate_original_archive_contact(self.original_archive_contact)
        elif nodeName_ == 'depth_min':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'depth_min')
            self.depth_min = fval_
        elif nodeName_ == 'depth_max':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'depth_max')
            self.depth_max = fval_
        elif nodeName_ == 'depth_scale':
            depth_scale_ = child_.text
            depth_scale_ = re_.sub(String_cleanup_pat_, " ", depth_scale_).strip()
            depth_scale_ = self.gds_validate_string(depth_scale_, node, 'depth_scale')
            self.depth_scale = depth_scale_
            # validate type depth_scale
            self.validate_depth_scale(self.depth_scale)
        elif nodeName_ == 'other_names':
            other_names_ = child_.text
            other_names_ = re_.sub(String_cleanup_pat_, " ", other_names_).strip()
            other_names_ = self.gds_validate_string(other_names_, node, 'other_names')
            self.other_names.append(other_names_)
            # validate type other_names
            self.validate_other_names(self.other_names[-1])
        elif nodeName_ == 'navigation_type':
            navigation_type_ = child_.text
            navigation_type_ = re_.sub(String_cleanup_pat_, " ", navigation_type_).strip()
            navigation_type_ = self.gds_validate_string(navigation_type_, node, 'navigation_type')
            self.navigation_type = navigation_type_
            # validate type navigation_type
            self.validate_navigation_type(self.navigation_type)
        elif nodeName_ == 'launch_platform_name':
            launch_platform_name_ = child_.text
            launch_platform_name_ = re_.sub(String_cleanup_pat_, " ", launch_platform_name_).strip()
            launch_platform_name_ = self.gds_validate_string(launch_platform_name_, node, 'launch_platform_name')
            self.launch_platform_name = launch_platform_name_
            # validate type launch_platform_name
            self.validate_launch_platform_name(self.launch_platform_name)
# end class sampleType


GDSClassesMapping = {
    'sample': sampleType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'samples'
        rootClass = samples
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'samples'
        rootClass = samples
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'samples'
        rootClass = samples
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'samples'
        rootClass = samples
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from Sample import *\n\n')
        sys.stdout.write('import Sample as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "age_max",
    "age_min",
    "age_unit",
    "city",
    "classification",
    "collection_date_precision",
    "collection_method",
    "collection_method_descr",
    "collector",
    "collector_detail",
    "country",
    "county",
    "cruise_field_prgrm",
    "current_archive",
    "current_archive_contact",
    "depth_scale",
    "description",
    "elevation",
    "elevation_end",
    "elevation_unit",
    "field_name",
    "geological_age",
    "geological_unit",
    "igsn",
    "latitude",
    "latitude_end",
    "launch_platform_name",
    "locality",
    "locality_description",
    "location_description",
    "longitude",
    "longitude_end",
    "material",
    "name",
    "navigation_type",
    "original_archive",
    "original_archive_contact",
    "other_names",
    "parent_igsn",
    "platform_descr",
    "platform_name",
    "platform_type",
    "primary_location_name",
    "primary_location_type",
    "province",
    "publish_date",
    "sampleType",
    "sample_comment",
    "sample_type",
    "samples",
    "size",
    "size_unit",
    "user_code"
]
