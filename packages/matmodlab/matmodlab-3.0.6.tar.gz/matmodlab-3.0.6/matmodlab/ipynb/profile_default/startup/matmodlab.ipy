# -*- python -*-
from __future__ import print_function
import os
import sys
from os.path import dirname, realpath, join
from IPython.core import magic_arguments
from IPython.utils.warn import warn, error
from IPython.core.magic import Magics, magics_class, line_magic

magic_gui_arg = magic_arguments.argument('plot', nargs='?',
        help='Name of the plotting tool to use (bokeh, matplotlib)')

@magics_class
class MatmodlabMagics(Magics):

    @line_magic
    @magic_arguments.magic_arguments()
    @magic_arguments.argument('--no-style', action='store_true', default=None,
                              help='Do not load style file')
    @magic_gui_arg
    def matmodlab(self, line='', cache=[0, 0]):
        """matmodlab line magic"""
        args = magic_arguments.parse_argstring(self.matmodlab, line)

        d = os.getenv('MATMODLAB', '')
        if d or d not in sys.path:
            sys.path.insert(0, d)
        from matmodlab.constants import BOKEH, MATPLOTLIB

        if not args.plot:
            try:
                import bokeh
                args.plot = BOKEH
            except ImportError:
                args.plot = MATPLOTLIB

        if args.plot == BOKEH:
            try:
                import bokeh
            except ImportError:
                error('bokeh not imported')
                args.plot = None
        elif args.plot == MATPLOTLIB:
            try:
                import matplotlib
            except ImportError:
                error('matplotlib not imported')
                args.plot = None
        else:
            error('unknown matmodlab argument %s' % args.plot)
            args.plot = None

        # Key imports
        user_ns = {}
        s = ('import os\n'
             'import re\n'
             'import sys\n'
             'import logging\n'
             'import random\n'
             'import numpy\n'
             'np = numpy\n'
             'from matmodlab import *\n'
             'from numpy import *\n'
             'from numpy.linalg import inv, det\n'
             'from matmodlab.utils.numerix import *\n'
             'from matmodlab.utils.fileio import loadfile\n'
             'from matmodlab.fitting import *\n'
             'from matmodlab.utils.plotting import *\n'
            )

        # load the plotting back end
        if args.plot == 'bokeh':
            if not cache[0]:
                s += ('from bokeh.plotting import *\n'
                      'init_from_matmodlab_magic("bokeh")\n')
                cache[0] += 1

        elif args.plot == 'matplotlib':
            s += ('import matplotlib\n'
                  'from matplotlib import pylab, mlab, pyplot\n'
                  'plt = pyplot\n'
                  'from matplotlib.pylab import *\n'
                  'init_from_matmodlab_magic("matplotlib")\n')
        s += ('try:\n'
              '    mc_init_notebook(plot_lib="{0}", i=0)\n'.format(args.plot))
        s += ('except:\n'
              '    print("mcgen not loaded")\n')

        # Load the matplotlib colors for use in other plots
        c = ['blue', 'red', 'purple', 'green', 'orange', 'hotpink', 'cyan',
             'magenta', 'chocolate', 'yellow', 'black', 'dodgerblue', 'darkred',
             'darkviolet', 'darkgreen', 'orangered', 'teal', 'darkslategray',
             'royalblue', 'crimson', 'seagreen', 'plum', 'darkgoldenrod',
             'midnightblue', 'darkolivegreen', 'darkmagenta', 'darkorchid',
             'darkturquoise', 'lime', 'turquoise', 'darkcyan', 'maroon']
	s += 'COLORS = {0}\n'.format(c)
	s += ('def get_color(i=None, rand=False, _i=[0], reset=False):\n'
	      '    if reset:\n'
	      '        _i[0] = 0\n'
	      '        return\n'
	      '    if rand:\n'
	      '        color = COLORS[random.randint(0, len(COLORS)-1)]\n'
	      '    else:\n'
	      '        if i is None:\n'
	      '            i = _i[0]\n'
	      '            _i[0] += 1\n'
	      '        color = COLORS[i % (len(COLORS) - 1)]\n'
	      '    return color.lower()\n')

        exec(s, user_ns)

        # warn about clobbered names
        ignored = set(['__builtins__'])
        both = set(user_ns).intersection(self.shell.user_ns).difference(ignored)
        clobbered = [name for name in both
                     if self.shell.user_ns[name] is not user_ns[name] ]

        # warn about clobbered names
        print ('Populating the interactive namespace '
               'from matmodlab and %s' % args.plot)
        if 'MasterCurve' not in user_ns:
            print("mcgen not imported")
        if clobbered and not cache[1]:
            warn('matmodlab import has clobbered these variables: %s'  % clobbered)

        self.shell.user_ns.update(user_ns)

        cache[1] += 1

# In order to actually use these magics, you must register them with a
# running IPython.  This code must be placed in a file that is loaded once
# IPython is up and running:
ip = get_ipython()

# You can register the class itself without instantiating it.  IPython will
# call the default constructor on it.
ip.register_magics(MatmodlabMagics)
