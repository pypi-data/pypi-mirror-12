#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Python interface to posix_fadvise()
# Copyright (C) Chris Lamb <chris@chris-lamb.co.uk>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import re
import sys
import fadvise

from optparse import OptionParser

usage = """
    %prog [options] [FILE]..
"""

def main():
    parser = OptionParser(usage=usage.rstrip())

    advice = (
        ('w', fadvise.willneed),
        ('s', fadvise.sequential),
        ('d', fadvise.dontneed),
        ('r', fadvise.random),
        ('o', fadvise.noreuse),
        ('n', fadvise.normal),
    )

    for opt, fn in advice:
        help = fn.__doc__
        for regex in (r'^\s*', r'(?<=\s)\s*', r'\.\s*$'):
            help = re.sub(regex, '', help)
        parser.add_option(
            '-%s' % opt,
            '--%s' % fn.__name__,
            action='store_true',
            dest=fn.__name__,
            help=help,
            default=False)

    parser.add_option('-v', '--verbose', dest='verbose', default=False,
        action='store_true', help='Explain what is being done')

    global options
    options, fnames = parser.parse_args()

    target_fn = None
    for _, fn in advice:
        if getattr(options, fn.__name__):
            if target_fn:
                raise parser.error('You can only specify one advice type')
            target_fn = fn

    if target_fn is None:
        raise parser.error('You must specify an advice type')

    target_fn(fnames)

if __name__ == "__main__":
    main()
