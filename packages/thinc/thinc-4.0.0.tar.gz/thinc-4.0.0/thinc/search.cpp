/* Generated by Cython 0.22.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [], 
        "extra_compile_args": [
            "-O3"
        ], 
        "include_dirs": [
            ".", 
            "/home/pixie/repos/thinc/.env/include"
        ], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_22_1"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(T& ref) : ptr(&ref) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__thinc__search
#define __PYX_HAVE_API__thinc__search
#include "stdint.h"
#include <utility>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <queue>
#include <vector>
#include "string.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "thinc/search.pyx",
  "thinc/search.pxd",
  ".env/lib/python2.7/site-packages/cymem/cymem.pxd",
  ".env/lib/python2.7/site-packages/preshed/maps.pxd",
};

/* "thinc/typedefs.pxd":7
 * 
 * 
 * ctypedef float weight_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t
 */
typedef float __pyx_t_5thinc_8typedefs_weight_t;

/* "thinc/typedefs.pxd":8
 * 
 * ctypedef float weight_t
 * ctypedef uint64_t atom_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t feat_t
 * ctypedef uint64_t hash_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_atom_t;

/* "thinc/typedefs.pxd":9
 * ctypedef float weight_t
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t hash_t
 * ctypedef int32_t class_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_feat_t;

/* "thinc/typedefs.pxd":10
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t
 * ctypedef uint64_t hash_t             # <<<<<<<<<<<<<<
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_hash_t;

/* "thinc/typedefs.pxd":11
 * ctypedef uint64_t feat_t
 * ctypedef uint64_t hash_t
 * ctypedef int32_t class_t             # <<<<<<<<<<<<<<
 * ctypedef uint32_t count_t
 * ctypedef uint32_t time_t
 */
typedef int32_t __pyx_t_5thinc_8typedefs_class_t;

/* "thinc/typedefs.pxd":12
 * ctypedef uint64_t hash_t
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t             # <<<<<<<<<<<<<<
 * ctypedef uint32_t time_t
 */
typedef uint32_t __pyx_t_5thinc_8typedefs_count_t;

/* "thinc/typedefs.pxd":13
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t
 * ctypedef uint32_t time_t             # <<<<<<<<<<<<<<
 */
typedef uint32_t __pyx_t_5thinc_8typedefs_time_t;

/* "preshed/maps.pxd":5
 * 
 * 
 * ctypedef uint64_t key_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef uint64_t __pyx_t_7preshed_4maps_key_t;

/*--- Type declarations ---*/
struct __pyx_obj_5cymem_5cymem_Pool;
struct __pyx_obj_5cymem_5cymem_Address;
struct __pyx_obj_7preshed_4maps_PreshMap;
struct __pyx_obj_7preshed_4maps_PreshMapArray;
struct __pyx_obj_5thinc_6search_Beam;
struct __pyx_obj_5thinc_6search_MaxViolation;
struct __pyx_t_7preshed_4maps_Cell;
struct __pyx_t_7preshed_4maps_MapStruct;

/* "preshed/maps.pxd":8
 * 
 * 
 * cdef struct Cell:             # <<<<<<<<<<<<<<
 *     key_t key
 *     void* value
 */
struct __pyx_t_7preshed_4maps_Cell {
  __pyx_t_7preshed_4maps_key_t key;
  void *value;
};

/* "preshed/maps.pxd":13
 * 
 * 
 * cdef struct MapStruct:             # <<<<<<<<<<<<<<
 *     Cell* cells
 *     void* value_for_empty_key
 */
struct __pyx_t_7preshed_4maps_MapStruct {
  struct __pyx_t_7preshed_4maps_Cell *cells;
  void *value_for_empty_key;
  void *value_for_del_key;
  __pyx_t_7preshed_4maps_key_t length;
  __pyx_t_7preshed_4maps_key_t filled;
  int is_empty_key_set;
  int is_del_key_set;
};
struct __pyx_t_5thinc_6search__State;

/* "thinc/search.pxd":12
 * 
 * 
 * ctypedef pair[weight_t, size_t] Entry             # <<<<<<<<<<<<<<
 * ctypedef priority_queue[Entry] Queue
 * 
 */
typedef std::pair<__pyx_t_5thinc_8typedefs_weight_t,size_t>  __pyx_t_5thinc_6search_Entry;

/* "thinc/search.pxd":13
 * 
 * ctypedef pair[weight_t, size_t] Entry
 * ctypedef priority_queue[Entry] Queue             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::priority_queue<__pyx_t_5thinc_6search_Entry>  __pyx_t_5thinc_6search_Queue;

/* "thinc/search.pxd":16
 * 
 * 
 * ctypedef int (*trans_func_t)(void* dest, void* src, class_t clas, void* x) except -1             # <<<<<<<<<<<<<<
 * 
 * ctypedef void* (*init_func_t)(Pool mem, int n, void* extra_args) except NULL
 */
typedef int (*__pyx_t_5thinc_6search_trans_func_t)(void *, void *, __pyx_t_5thinc_8typedefs_class_t, void *);

/* "thinc/search.pxd":18
 * ctypedef int (*trans_func_t)(void* dest, void* src, class_t clas, void* x) except -1
 * 
 * ctypedef void* (*init_func_t)(Pool mem, int n, void* extra_args) except NULL             # <<<<<<<<<<<<<<
 * 
 * ctypedef int (*finish_func_t)(void* state, void* extra_args) except -1
 */
typedef void *(*__pyx_t_5thinc_6search_init_func_t)(struct __pyx_obj_5cymem_5cymem_Pool *, int, void *);

/* "thinc/search.pxd":20
 * ctypedef void* (*init_func_t)(Pool mem, int n, void* extra_args) except NULL
 * 
 * ctypedef int (*finish_func_t)(void* state, void* extra_args) except -1             # <<<<<<<<<<<<<<
 * 
 * ctypedef hash_t (*hash_func_t)(void* state, void* x) except 0
 */
typedef int (*__pyx_t_5thinc_6search_finish_func_t)(void *, void *);

/* "thinc/search.pxd":22
 * ctypedef int (*finish_func_t)(void* state, void* extra_args) except -1
 * 
 * ctypedef hash_t (*hash_func_t)(void* state, void* x) except 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef __pyx_t_5thinc_8typedefs_hash_t (*__pyx_t_5thinc_6search_hash_func_t)(void *, void *);

/* "thinc/search.pxd":25
 * 
 * 
 * cdef struct _State:             # <<<<<<<<<<<<<<
 *     void* content
 *     class_t* hist
 */
struct __pyx_t_5thinc_6search__State {
  void *content;
  __pyx_t_5thinc_8typedefs_class_t *hist;
  __pyx_t_5thinc_8typedefs_weight_t score;
  int loss;
  int i;
  int t;
  int is_done;
};

/* "cymem/cymem.pxd":1
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */
struct __pyx_obj_5cymem_5cymem_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtab;
  size_t size;
  PyObject *addresses;
  PyObject *refs;
};


/* "cymem/cymem.pxd":11
 * 
 * 
 * cdef class Address:             # <<<<<<<<<<<<<<
 *     cdef void* ptr
 */
struct __pyx_obj_5cymem_5cymem_Address {
  PyObject_HEAD
  void *ptr;
};


/* "preshed/maps.pxd":36
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */
struct __pyx_obj_7preshed_4maps_PreshMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtab;
  struct __pyx_t_7preshed_4maps_MapStruct *c_map;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
};


/* "preshed/maps.pxd":44
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */
struct __pyx_obj_7preshed_4maps_PreshMapArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_7preshed_4maps_MapStruct *maps;
  size_t length;
};


/* "thinc/search.pxd":35
 * 
 * 
 * cdef class Beam:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef class_t nr_class
 */
struct __pyx_obj_5thinc_6search_Beam {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6search_Beam *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  __pyx_t_5thinc_8typedefs_class_t nr_class;
  __pyx_t_5thinc_8typedefs_class_t width;
  __pyx_t_5thinc_8typedefs_class_t size;
  int t;
  int is_done;
  PyObject *histories;
  PyObject *_parent_histories;
  __pyx_t_5thinc_8typedefs_weight_t **scores;
  int **is_valid;
  int **costs;
  struct __pyx_t_5thinc_6search__State *_parents;
  struct __pyx_t_5thinc_6search__State *_states;
};


/* "thinc/search.pxd":71
 * 
 * 
 * cdef class MaxViolation:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef int cost
 */
struct __pyx_obj_5thinc_6search_MaxViolation {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6search_MaxViolation *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  int cost;
  __pyx_t_5thinc_8typedefs_weight_t delta;
  __pyx_t_5thinc_8typedefs_class_t n;
  PyObject *p_hist;
  PyObject *g_hist;
};



/* "cymem/cymem.pxd":1
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */

struct __pyx_vtabstruct_5cymem_5cymem_Pool {
  void *(*alloc)(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t);
  void (*free)(struct __pyx_obj_5cymem_5cymem_Pool *, void *);
  void *(*realloc)(struct __pyx_obj_5cymem_5cymem_Pool *, void *, size_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtabptr_5cymem_5cymem_Pool;


/* "preshed/maps.pxd":36
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMap {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtabptr_7preshed_4maps_PreshMap;


/* "preshed/maps.pxd":44
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtabptr_7preshed_4maps_PreshMapArray;


/* "thinc/search.pyx":10
 * 
 * 
 * cdef class Beam:             # <<<<<<<<<<<<<<
 *     def __init__(self, class_t nr_class, class_t width):
 *         assert nr_class != 0
 */

struct __pyx_vtabstruct_5thinc_6search_Beam {
  int (*_fill)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_Queue *, __pyx_t_5thinc_8typedefs_weight_t **, int **);
  void *(*at)(struct __pyx_obj_5thinc_6search_Beam *, int);
  int (*initialize)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_init_func_t, int, void *);
  int (*advance)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_trans_func_t, __pyx_t_5thinc_6search_hash_func_t, void *);
  int (*check_done)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_finish_func_t, void *);
  void (*set_cell)(struct __pyx_obj_5thinc_6search_Beam *, int, int, __pyx_t_5thinc_8typedefs_weight_t, int, int);
  int (*set_row)(struct __pyx_obj_5thinc_6search_Beam *, int, __pyx_t_5thinc_8typedefs_weight_t const *, int const *, int const *);
  int (*set_table)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_8typedefs_weight_t **, int **, int **);
};
static struct __pyx_vtabstruct_5thinc_6search_Beam *__pyx_vtabptr_5thinc_6search_Beam;
static CYTHON_INLINE void *__pyx_f_5thinc_6search_4Beam_at(struct __pyx_obj_5thinc_6search_Beam *, int);
static CYTHON_INLINE void __pyx_f_5thinc_6search_4Beam_set_cell(struct __pyx_obj_5thinc_6search_Beam *, int, int, __pyx_t_5thinc_8typedefs_weight_t, int, int);


/* "thinc/search.pyx":163
 * 
 * 
 * cdef class MaxViolation:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.delta = -1
 */

struct __pyx_vtabstruct_5thinc_6search_MaxViolation {
  int (*check)(struct __pyx_obj_5thinc_6search_MaxViolation *, struct __pyx_obj_5thinc_6search_Beam *, struct __pyx_obj_5thinc_6search_Beam *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5thinc_6search_MaxViolation *__pyx_vtabptr_5thinc_6search_MaxViolation;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) : \
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static void* __Pyx_GetVtable(PyObject *dict);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_5thinc_6search_4Beam_set_row(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, int __pyx_v_i, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_scores, int const *__pyx_v_is_valid, int const *__pyx_v_costs); /* proto*/
static int __pyx_f_5thinc_6search_4Beam_set_table(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_8typedefs_weight_t **__pyx_v_scores, int **__pyx_v_is_valid, int **__pyx_v_costs); /* proto*/
static int __pyx_f_5thinc_6search_4Beam_initialize(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_6search_init_func_t __pyx_v_init_func, int __pyx_v_n, void *__pyx_v_extra_args); /* proto*/
static int __pyx_f_5thinc_6search_4Beam_advance(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_6search_trans_func_t __pyx_v_transition_func, __pyx_t_5thinc_6search_hash_func_t __pyx_v_hash_func, void *__pyx_v_extra_args); /* proto*/
static int __pyx_f_5thinc_6search_4Beam_check_done(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_6search_finish_func_t __pyx_v_finish_func, void *__pyx_v_extra_args); /* proto*/
static int __pyx_f_5thinc_6search_4Beam__fill(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_6search_Queue *__pyx_v_q, __pyx_t_5thinc_8typedefs_weight_t **__pyx_v_scores, int **__pyx_v_is_valid); /* proto*/
static int __pyx_f_5thinc_6search_12MaxViolation_check(struct __pyx_obj_5thinc_6search_MaxViolation *__pyx_v_self, struct __pyx_obj_5thinc_6search_Beam *__pyx_v_pred, struct __pyx_obj_5thinc_6search_Beam *__pyx_v_gold, int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE void *__pyx_f_5thinc_6search_4Beam_at(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6search_4Beam_set_cell(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, int __pyx_v_i, int __pyx_v_j, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_score, int __pyx_v_is_valid, int __pyx_v_cost); /* proto*/

/* Module declarations from 'cymem.cymem' */
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Pool = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Address = 0;

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.queue' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'thinc.typedefs' */

/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'preshed.maps' */
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMap = 0;
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMapArray = 0;

/* Module declarations from 'thinc.search' */
static PyTypeObject *__pyx_ptype_5thinc_6search_Beam = 0;
static PyTypeObject *__pyx_ptype_5thinc_6search_MaxViolation = 0;
#define __Pyx_MODULE_NAME "thinc.search"
int __pyx_module_is_main_thinc__search = 0;

/* Implementation of 'thinc.search' */
static PyObject *__pyx_builtin_range;
static int __pyx_pf_5thinc_6search_4Beam___init__(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_8typedefs_class_t __pyx_v_nr_class, __pyx_t_5thinc_8typedefs_class_t __pyx_v_width); /* proto */
static PyObject *__pyx_pf_5thinc_6search_4Beam_5score___get__(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6search_4Beam_4loss___get__(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6search_4Beam_7is_done___get__(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self); /* proto */
static int __pyx_pf_5thinc_6search_12MaxViolation___init__(struct __pyx_obj_5thinc_6search_MaxViolation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6search_12MaxViolation_2check(struct __pyx_obj_5thinc_6search_MaxViolation *__pyx_v_self, struct __pyx_obj_5thinc_6search_Beam *__pyx_v_pred, struct __pyx_obj_5thinc_6search_Beam *__pyx_v_gold); /* proto */
static PyObject *__pyx_pf_5thinc_6search_12MaxViolation_6p_hist___get__(struct __pyx_obj_5thinc_6search_MaxViolation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5thinc_6search_12MaxViolation_6g_hist___get__(struct __pyx_obj_5thinc_6search_MaxViolation *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_5thinc_6search_Beam(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5thinc_6search_MaxViolation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_gold[] = "gold";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_pred[] = "pred";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_check[] = "check";
static char __pyx_k_range[] = "range";
static char __pyx_k_width[] = "width";
static char __pyx_k_append[] = "append";
static char __pyx_k_nr_class[] = "nr_class";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_check;
static PyObject *__pyx_n_s_gold;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_nr_class;
static PyObject *__pyx_n_s_pred;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_width;

/* "thinc/search.pyx":11
 * 
 * cdef class Beam:
 *     def __init__(self, class_t nr_class, class_t width):             # <<<<<<<<<<<<<<
 *         assert nr_class != 0
 *         assert width != 0
 */

/* Python wrapper */
static int __pyx_pw_5thinc_6search_4Beam_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5thinc_6search_4Beam_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5thinc_8typedefs_class_t __pyx_v_nr_class;
  __pyx_t_5thinc_8typedefs_class_t __pyx_v_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nr_class,&__pyx_n_s_width,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nr_class)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_nr_class = __Pyx_PyInt_As_int32_t(values[0]); if (unlikely((__pyx_v_nr_class == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_width = __Pyx_PyInt_As_int32_t(values[1]); if (unlikely((__pyx_v_width == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinc.search.Beam.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5thinc_6search_4Beam___init__(((struct __pyx_obj_5thinc_6search_Beam *)__pyx_v_self), __pyx_v_nr_class, __pyx_v_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5thinc_6search_4Beam___init__(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_8typedefs_class_t __pyx_v_nr_class, __pyx_t_5thinc_8typedefs_class_t __pyx_v_width) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  void *__pyx_t_2;
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "thinc/search.pyx":12
 * cdef class Beam:
 *     def __init__(self, class_t nr_class, class_t width):
 *         assert nr_class != 0             # <<<<<<<<<<<<<<
 *         assert width != 0
 *         self.nr_class = nr_class
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_nr_class != 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "thinc/search.pyx":13
 *     def __init__(self, class_t nr_class, class_t width):
 *         assert nr_class != 0
 *         assert width != 0             # <<<<<<<<<<<<<<
 *         self.nr_class = nr_class
 *         self.width = width
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_width != 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "thinc/search.pyx":14
 *         assert nr_class != 0
 *         assert width != 0
 *         self.nr_class = nr_class             # <<<<<<<<<<<<<<
 *         self.width = width
 *         self.size = 1
 */
  __pyx_v_self->nr_class = __pyx_v_nr_class;

  /* "thinc/search.pyx":15
 *         assert width != 0
 *         self.nr_class = nr_class
 *         self.width = width             # <<<<<<<<<<<<<<
 *         self.size = 1
 *         self.t = 0
 */
  __pyx_v_self->width = __pyx_v_width;

  /* "thinc/search.pyx":16
 *         self.nr_class = nr_class
 *         self.width = width
 *         self.size = 1             # <<<<<<<<<<<<<<
 *         self.t = 0
 *         self.mem = Pool()
 */
  __pyx_v_self->size = 1;

  /* "thinc/search.pyx":17
 *         self.width = width
 *         self.size = 1
 *         self.t = 0             # <<<<<<<<<<<<<<
 *         self.mem = Pool()
 *         self._parents = <_State*>self.mem.alloc(self.width, sizeof(_State))
 */
  __pyx_v_self->t = 0;

  /* "thinc/search.pyx":18
 *         self.size = 1
 *         self.t = 0
 *         self.mem = Pool()             # <<<<<<<<<<<<<<
 *         self._parents = <_State*>self.mem.alloc(self.width, sizeof(_State))
 *         self._states = <_State*>self.mem.alloc(self.width, sizeof(_State))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5cymem_5cymem_Pool)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->mem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mem));
  __pyx_v_self->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/search.pyx":19
 *         self.t = 0
 *         self.mem = Pool()
 *         self._parents = <_State*>self.mem.alloc(self.width, sizeof(_State))             # <<<<<<<<<<<<<<
 *         self._states = <_State*>self.mem.alloc(self.width, sizeof(_State))
 *         cdef int i
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->width, (sizeof(struct __pyx_t_5thinc_6search__State))); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_parents = ((struct __pyx_t_5thinc_6search__State *)__pyx_t_2);

  /* "thinc/search.pyx":20
 *         self.mem = Pool()
 *         self._parents = <_State*>self.mem.alloc(self.width, sizeof(_State))
 *         self._states = <_State*>self.mem.alloc(self.width, sizeof(_State))             # <<<<<<<<<<<<<<
 *         cdef int i
 *         self.histories = [[] for i in range(self.width)]
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->width, (sizeof(struct __pyx_t_5thinc_6search__State))); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_states = ((struct __pyx_t_5thinc_6search__State *)__pyx_t_2);

  /* "thinc/search.pyx":22
 *         self._states = <_State*>self.mem.alloc(self.width, sizeof(_State))
 *         cdef int i
 *         self.histories = [[] for i in range(self.width)]             # <<<<<<<<<<<<<<
 *         self._parent_histories = [[] for i in range(self.width)]
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_v_self->width;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->histories);
  __Pyx_DECREF(__pyx_v_self->histories);
  __pyx_v_self->histories = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/search.pyx":23
 *         cdef int i
 *         self.histories = [[] for i in range(self.width)]
 *         self._parent_histories = [[] for i in range(self.width)]             # <<<<<<<<<<<<<<
 * 
 *         self.scores = <weight_t**>self.mem.alloc(self.width, sizeof(weight_t*))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_v_self->width;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_parent_histories);
  __Pyx_DECREF(__pyx_v_self->_parent_histories);
  __pyx_v_self->_parent_histories = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/search.pyx":25
 *         self._parent_histories = [[] for i in range(self.width)]
 * 
 *         self.scores = <weight_t**>self.mem.alloc(self.width, sizeof(weight_t*))             # <<<<<<<<<<<<<<
 *         self.is_valid = <bint**>self.mem.alloc(self.width, sizeof(bint*))
 *         self.costs = <int**>self.mem.alloc(self.width, sizeof(int*))
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->width, (sizeof(__pyx_t_5thinc_8typedefs_weight_t *))); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->scores = ((__pyx_t_5thinc_8typedefs_weight_t **)__pyx_t_2);

  /* "thinc/search.pyx":26
 * 
 *         self.scores = <weight_t**>self.mem.alloc(self.width, sizeof(weight_t*))
 *         self.is_valid = <bint**>self.mem.alloc(self.width, sizeof(bint*))             # <<<<<<<<<<<<<<
 *         self.costs = <int**>self.mem.alloc(self.width, sizeof(int*))
 *         for i in range(self.width):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->width, (sizeof(int *))); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->is_valid = ((int **)__pyx_t_2);

  /* "thinc/search.pyx":27
 *         self.scores = <weight_t**>self.mem.alloc(self.width, sizeof(weight_t*))
 *         self.is_valid = <bint**>self.mem.alloc(self.width, sizeof(bint*))
 *         self.costs = <int**>self.mem.alloc(self.width, sizeof(int*))             # <<<<<<<<<<<<<<
 *         for i in range(self.width):
 *             self.scores[i] = <weight_t*>self.mem.alloc(self.nr_class, sizeof(weight_t))
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->width, (sizeof(int *))); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->costs = ((int **)__pyx_t_2);

  /* "thinc/search.pyx":28
 *         self.is_valid = <bint**>self.mem.alloc(self.width, sizeof(bint*))
 *         self.costs = <int**>self.mem.alloc(self.width, sizeof(int*))
 *         for i in range(self.width):             # <<<<<<<<<<<<<<
 *             self.scores[i] = <weight_t*>self.mem.alloc(self.nr_class, sizeof(weight_t))
 *             self.is_valid[i] = <bint*>self.mem.alloc(self.nr_class, sizeof(bint))
 */
  __pyx_t_3 = __pyx_v_self->width;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "thinc/search.pyx":29
 *         self.costs = <int**>self.mem.alloc(self.width, sizeof(int*))
 *         for i in range(self.width):
 *             self.scores[i] = <weight_t*>self.mem.alloc(self.nr_class, sizeof(weight_t))             # <<<<<<<<<<<<<<
 *             self.is_valid[i] = <bint*>self.mem.alloc(self.nr_class, sizeof(bint))
 *             self.costs[i] = <int*>self.mem.alloc(self.nr_class, sizeof(int))
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->nr_class, (sizeof(__pyx_t_5thinc_8typedefs_weight_t))); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_self->scores[__pyx_v_i]) = ((__pyx_t_5thinc_8typedefs_weight_t *)__pyx_t_2);

    /* "thinc/search.pyx":30
 *         for i in range(self.width):
 *             self.scores[i] = <weight_t*>self.mem.alloc(self.nr_class, sizeof(weight_t))
 *             self.is_valid[i] = <bint*>self.mem.alloc(self.nr_class, sizeof(bint))             # <<<<<<<<<<<<<<
 *             self.costs[i] = <int*>self.mem.alloc(self.nr_class, sizeof(int))
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->nr_class, (sizeof(int))); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_self->is_valid[__pyx_v_i]) = ((int *)__pyx_t_2);

    /* "thinc/search.pyx":31
 *             self.scores[i] = <weight_t*>self.mem.alloc(self.nr_class, sizeof(weight_t))
 *             self.is_valid[i] = <bint*>self.mem.alloc(self.nr_class, sizeof(bint))
 *             self.costs[i] = <int*>self.mem.alloc(self.nr_class, sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *     property score:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->nr_class, (sizeof(int))); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_self->costs[__pyx_v_i]) = ((int *)__pyx_t_2);
  }

  /* "thinc/search.pyx":11
 * 
 * cdef class Beam:
 *     def __init__(self, class_t nr_class, class_t width):             # <<<<<<<<<<<<<<
 *         assert nr_class != 0
 *         assert width != 0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("thinc.search.Beam.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pyx":34
 * 
 *     property score:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._states[0].score
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6search_4Beam_5score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6search_4Beam_5score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6search_4Beam_5score___get__(((struct __pyx_obj_5thinc_6search_Beam *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6search_4Beam_5score___get__(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "thinc/search.pyx":35
 *     property score:
 *         def __get__(self):
 *             return self._states[0].score             # <<<<<<<<<<<<<<
 * 
 *     property loss:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->_states[0]).score); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinc/search.pyx":34
 * 
 *     property score:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._states[0].score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.search.Beam.score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pyx":38
 * 
 *     property loss:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._states[0].loss
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6search_4Beam_4loss_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6search_4Beam_4loss_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6search_4Beam_4loss___get__(((struct __pyx_obj_5thinc_6search_Beam *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6search_4Beam_4loss___get__(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "thinc/search.pyx":39
 *     property loss:
 *         def __get__(self):
 *             return self._states[0].loss             # <<<<<<<<<<<<<<
 * 
 *     cdef int set_row(self, int i, const weight_t* scores, const bint* is_valid,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->_states[0]).loss); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinc/search.pyx":38
 * 
 *     property loss:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._states[0].loss
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.search.Beam.loss.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pyx":41
 *             return self._states[0].loss
 * 
 *     cdef int set_row(self, int i, const weight_t* scores, const bint* is_valid,             # <<<<<<<<<<<<<<
 *                      const int* costs) except -1:
 *         cdef int j
 */

static int __pyx_f_5thinc_6search_4Beam_set_row(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, int __pyx_v_i, __pyx_t_5thinc_8typedefs_weight_t const *__pyx_v_scores, int const *__pyx_v_is_valid, int const *__pyx_v_costs) {
  int __pyx_v_j;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_row", 0);

  /* "thinc/search.pyx":44
 *                      const int* costs) except -1:
 *         cdef int j
 *         for j in range(self.nr_class):             # <<<<<<<<<<<<<<
 *             self.scores[i][j] = scores[j]
 *             self.is_valid[i][j] = is_valid[j]
 */
  __pyx_t_1 = __pyx_v_self->nr_class;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_j = __pyx_t_2;

    /* "thinc/search.pyx":45
 *         cdef int j
 *         for j in range(self.nr_class):
 *             self.scores[i][j] = scores[j]             # <<<<<<<<<<<<<<
 *             self.is_valid[i][j] = is_valid[j]
 *             self.costs[i][j] = costs[j]
 */
    ((__pyx_v_self->scores[__pyx_v_i])[__pyx_v_j]) = (__pyx_v_scores[__pyx_v_j]);

    /* "thinc/search.pyx":46
 *         for j in range(self.nr_class):
 *             self.scores[i][j] = scores[j]
 *             self.is_valid[i][j] = is_valid[j]             # <<<<<<<<<<<<<<
 *             self.costs[i][j] = costs[j]
 * 
 */
    ((__pyx_v_self->is_valid[__pyx_v_i])[__pyx_v_j]) = (__pyx_v_is_valid[__pyx_v_j]);

    /* "thinc/search.pyx":47
 *             self.scores[i][j] = scores[j]
 *             self.is_valid[i][j] = is_valid[j]
 *             self.costs[i][j] = costs[j]             # <<<<<<<<<<<<<<
 * 
 *     cdef int set_table(self, weight_t** scores, bint** is_valid, int** costs) except -1:
 */
    ((__pyx_v_self->costs[__pyx_v_i])[__pyx_v_j]) = (__pyx_v_costs[__pyx_v_j]);
  }

  /* "thinc/search.pyx":41
 *             return self._states[0].loss
 * 
 *     cdef int set_row(self, int i, const weight_t* scores, const bint* is_valid,             # <<<<<<<<<<<<<<
 *                      const int* costs) except -1:
 *         cdef int j
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pyx":49
 *             self.costs[i][j] = costs[j]
 * 
 *     cdef int set_table(self, weight_t** scores, bint** is_valid, int** costs) except -1:             # <<<<<<<<<<<<<<
 *         cdef int i, j
 *         for i in range(self.width):
 */

static int __pyx_f_5thinc_6search_4Beam_set_table(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_8typedefs_weight_t **__pyx_v_scores, int **__pyx_v_is_valid, int **__pyx_v_costs) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_table", 0);

  /* "thinc/search.pyx":51
 *     cdef int set_table(self, weight_t** scores, bint** is_valid, int** costs) except -1:
 *         cdef int i, j
 *         for i in range(self.width):             # <<<<<<<<<<<<<<
 *             memcpy(self.scores[i], scores[i], sizeof(weight_t) * self.nr_class)
 *             memcpy(self.is_valid[i], is_valid[i], sizeof(bint) * self.nr_class)
 */
  __pyx_t_1 = __pyx_v_self->width;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "thinc/search.pyx":52
 *         cdef int i, j
 *         for i in range(self.width):
 *             memcpy(self.scores[i], scores[i], sizeof(weight_t) * self.nr_class)             # <<<<<<<<<<<<<<
 *             memcpy(self.is_valid[i], is_valid[i], sizeof(bint) * self.nr_class)
 *             memcpy(self.costs[i], costs[i], sizeof(int) * self.nr_class)
 */
    memcpy((__pyx_v_self->scores[__pyx_v_i]), (__pyx_v_scores[__pyx_v_i]), ((sizeof(__pyx_t_5thinc_8typedefs_weight_t)) * __pyx_v_self->nr_class));

    /* "thinc/search.pyx":53
 *         for i in range(self.width):
 *             memcpy(self.scores[i], scores[i], sizeof(weight_t) * self.nr_class)
 *             memcpy(self.is_valid[i], is_valid[i], sizeof(bint) * self.nr_class)             # <<<<<<<<<<<<<<
 *             memcpy(self.costs[i], costs[i], sizeof(int) * self.nr_class)
 * 
 */
    memcpy((__pyx_v_self->is_valid[__pyx_v_i]), (__pyx_v_is_valid[__pyx_v_i]), ((sizeof(int)) * __pyx_v_self->nr_class));

    /* "thinc/search.pyx":54
 *             memcpy(self.scores[i], scores[i], sizeof(weight_t) * self.nr_class)
 *             memcpy(self.is_valid[i], is_valid[i], sizeof(bint) * self.nr_class)
 *             memcpy(self.costs[i], costs[i], sizeof(int) * self.nr_class)             # <<<<<<<<<<<<<<
 * 
 *     cdef int initialize(self, init_func_t init_func, int n, void* extra_args) except -1:
 */
    memcpy((__pyx_v_self->costs[__pyx_v_i]), (__pyx_v_costs[__pyx_v_i]), ((sizeof(int)) * __pyx_v_self->nr_class));
  }

  /* "thinc/search.pyx":49
 *             self.costs[i][j] = costs[j]
 * 
 *     cdef int set_table(self, weight_t** scores, bint** is_valid, int** costs) except -1:             # <<<<<<<<<<<<<<
 *         cdef int i, j
 *         for i in range(self.width):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pyx":56
 *             memcpy(self.costs[i], costs[i], sizeof(int) * self.nr_class)
 * 
 *     cdef int initialize(self, init_func_t init_func, int n, void* extra_args) except -1:             # <<<<<<<<<<<<<<
 *         for i in range(self.width):
 *             self._states[i].content = init_func(self.mem, n, extra_args)
 */

static int __pyx_f_5thinc_6search_4Beam_initialize(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_6search_init_func_t __pyx_v_init_func, int __pyx_v_n, void *__pyx_v_extra_args) {
  __pyx_t_5thinc_8typedefs_class_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_1;
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  void *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "thinc/search.pyx":57
 * 
 *     cdef int initialize(self, init_func_t init_func, int n, void* extra_args) except -1:
 *         for i in range(self.width):             # <<<<<<<<<<<<<<
 *             self._states[i].content = init_func(self.mem, n, extra_args)
 *             self._parents[i].content = init_func(self.mem, n, extra_args)
 */
  __pyx_t_1 = __pyx_v_self->width;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "thinc/search.pyx":58
 *     cdef int initialize(self, init_func_t init_func, int n, void* extra_args) except -1:
 *         for i in range(self.width):
 *             self._states[i].content = init_func(self.mem, n, extra_args)             # <<<<<<<<<<<<<<
 *             self._parents[i].content = init_func(self.mem, n, extra_args)
 * 
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_self->mem);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_v_init_func(((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_3), __pyx_v_n, __pyx_v_extra_args); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_self->_states[__pyx_v_i]).content = __pyx_t_4;

    /* "thinc/search.pyx":59
 *         for i in range(self.width):
 *             self._states[i].content = init_func(self.mem, n, extra_args)
 *             self._parents[i].content = init_func(self.mem, n, extra_args)             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_self->mem);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_v_init_func(((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_3), __pyx_v_n, __pyx_v_extra_args); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_self->_parents[__pyx_v_i]).content = __pyx_t_4;
  }

  /* "thinc/search.pyx":56
 *             memcpy(self.costs[i], costs[i], sizeof(int) * self.nr_class)
 * 
 *     cdef int initialize(self, init_func_t init_func, int n, void* extra_args) except -1:             # <<<<<<<<<<<<<<
 *         for i in range(self.width):
 *             self._states[i].content = init_func(self.mem, n, extra_args)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinc.search.Beam.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pyx":62
 * 
 *     @cython.cdivision(True)
 *     cdef int advance(self, trans_func_t transition_func, hash_func_t hash_func,             # <<<<<<<<<<<<<<
 *                      void* extra_args) except -1:
 *         cdef weight_t** scores = self.scores
 */

static int __pyx_f_5thinc_6search_4Beam_advance(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_6search_trans_func_t __pyx_v_transition_func, __pyx_t_5thinc_6search_hash_func_t __pyx_v_hash_func, void *__pyx_v_extra_args) {
  __pyx_t_5thinc_8typedefs_weight_t **__pyx_v_scores;
  int **__pyx_v_is_valid;
  int **__pyx_v_costs;
  __pyx_t_5thinc_6search_Queue *__pyx_v_q;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_score;
  int __pyx_v_p_i;
  int __pyx_v_i;
  __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas;
  struct __pyx_t_5thinc_6search__State *__pyx_v_parent;
  struct __pyx_t_5thinc_6search__State *__pyx_v_state;
  __pyx_t_5thinc_8typedefs_hash_t __pyx_v_key;
  struct __pyx_obj_7preshed_4maps_PreshMap *__pyx_v_seen_states = 0;
  size_t __pyx_v_is_seen;
  __pyx_t_5thinc_6search_Entry __pyx_v_data;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5thinc_8typedefs_weight_t **__pyx_t_1;
  int **__pyx_t_2;
  int **__pyx_t_3;
  __pyx_t_5thinc_6search_Queue *__pyx_t_4;
  int __pyx_t_5;
  struct __pyx_t_5thinc_6search__State *__pyx_t_6;
  struct __pyx_t_5thinc_6search__State *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_14;
  __pyx_t_5thinc_8typedefs_hash_t __pyx_t_15;
  __pyx_t_5thinc_8typedefs_hash_t __pyx_t_16;
  int __pyx_t_17;
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("advance", 0);

  /* "thinc/search.pyx":64
 *     cdef int advance(self, trans_func_t transition_func, hash_func_t hash_func,
 *                      void* extra_args) except -1:
 *         cdef weight_t** scores = self.scores             # <<<<<<<<<<<<<<
 *         cdef bint** is_valid = self.is_valid
 *         cdef int** costs = self.costs
 */
  __pyx_t_1 = __pyx_v_self->scores;
  __pyx_v_scores = __pyx_t_1;

  /* "thinc/search.pyx":65
 *                      void* extra_args) except -1:
 *         cdef weight_t** scores = self.scores
 *         cdef bint** is_valid = self.is_valid             # <<<<<<<<<<<<<<
 *         cdef int** costs = self.costs
 * 
 */
  __pyx_t_2 = __pyx_v_self->is_valid;
  __pyx_v_is_valid = __pyx_t_2;

  /* "thinc/search.pyx":66
 *         cdef weight_t** scores = self.scores
 *         cdef bint** is_valid = self.is_valid
 *         cdef int** costs = self.costs             # <<<<<<<<<<<<<<
 * 
 *         cdef Queue* q = new Queue()
 */
  __pyx_t_3 = __pyx_v_self->costs;
  __pyx_v_costs = __pyx_t_3;

  /* "thinc/search.pyx":68
 *         cdef int** costs = self.costs
 * 
 *         cdef Queue* q = new Queue()             # <<<<<<<<<<<<<<
 *         self._fill(q, scores, is_valid)
 *         # For a beam of width k, we only ever need 2k state objects. How?
 */
  try {
    __pyx_t_4 = new __pyx_t_5thinc_6search_Queue();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_q = __pyx_t_4;

  /* "thinc/search.pyx":69
 * 
 *         cdef Queue* q = new Queue()
 *         self._fill(q, scores, is_valid)             # <<<<<<<<<<<<<<
 *         # For a beam of width k, we only ever need 2k state objects. How?
 *         # Each transition takes a parent and a class and produces a new state.
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5thinc_6search_Beam *)__pyx_v_self->__pyx_vtab)->_fill(__pyx_v_self, __pyx_v_q, __pyx_v_scores, __pyx_v_is_valid); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thinc/search.pyx":75
 *         # each step, we take a parent, and apply one or more extensions to
 *         # it.
 *         self._parents, self._states = self._states, self._parents             # <<<<<<<<<<<<<<
 *         self._parent_histories, self.histories = self.histories, self._parent_histories
 *         cdef weight_t score
 */
  __pyx_t_6 = __pyx_v_self->_states;
  __pyx_t_7 = __pyx_v_self->_parents;
  __pyx_v_self->_parents = __pyx_t_6;
  __pyx_v_self->_states = __pyx_t_7;

  /* "thinc/search.pyx":76
 *         # it.
 *         self._parents, self._states = self._states, self._parents
 *         self._parent_histories, self.histories = self.histories, self._parent_histories             # <<<<<<<<<<<<<<
 *         cdef weight_t score
 *         cdef int p_i
 */
  __pyx_t_8 = __pyx_v_self->histories;
  __pyx_t_9 = __pyx_v_self->_parent_histories;
  __pyx_v_self->_parent_histories = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_v_self->histories = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "thinc/search.pyx":79
 *         cdef weight_t score
 *         cdef int p_i
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef class_t clas
 *         cdef _State* parent
 */
  __pyx_v_i = 0;

  /* "thinc/search.pyx":84
 *         cdef _State* state
 *         cdef hash_t key
 *         cdef PreshMap seen_states = PreshMap(self.width)             # <<<<<<<<<<<<<<
 *         cdef size_t is_seen
 *         while i < self.width and not q.empty():
 */
  __pyx_t_10 = __Pyx_PyInt_From_int32_t(__pyx_v_self->width); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7preshed_4maps_PreshMap)), __pyx_t_11, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_seen_states = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "thinc/search.pyx":86
 *         cdef PreshMap seen_states = PreshMap(self.width)
 *         cdef size_t is_seen
 *         while i < self.width and not q.empty():             # <<<<<<<<<<<<<<
 *             data = q.top()
 *             p_i = data.second / self.nr_class
 */
  while (1) {
    __pyx_t_13 = ((__pyx_v_i < __pyx_v_self->width) != 0);
    if (__pyx_t_13) {
    } else {
      __pyx_t_12 = __pyx_t_13;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_13 = ((!(__pyx_v_q->empty() != 0)) != 0);
    __pyx_t_12 = __pyx_t_13;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_12) break;

    /* "thinc/search.pyx":87
 *         cdef size_t is_seen
 *         while i < self.width and not q.empty():
 *             data = q.top()             # <<<<<<<<<<<<<<
 *             p_i = data.second / self.nr_class
 *             clas = data.second % self.nr_class
 */
    __pyx_v_data = __pyx_v_q->top();

    /* "thinc/search.pyx":88
 *         while i < self.width and not q.empty():
 *             data = q.top()
 *             p_i = data.second / self.nr_class             # <<<<<<<<<<<<<<
 *             clas = data.second % self.nr_class
 *             score = data.first
 */
    __pyx_v_p_i = (__pyx_v_data.second / ((size_t)__pyx_v_self->nr_class));

    /* "thinc/search.pyx":89
 *             data = q.top()
 *             p_i = data.second / self.nr_class
 *             clas = data.second % self.nr_class             # <<<<<<<<<<<<<<
 *             score = data.first
 *             q.pop()
 */
    __pyx_v_clas = (__pyx_v_data.second % __pyx_v_self->nr_class);

    /* "thinc/search.pyx":90
 *             p_i = data.second / self.nr_class
 *             clas = data.second % self.nr_class
 *             score = data.first             # <<<<<<<<<<<<<<
 *             q.pop()
 *             parent = &self._parents[p_i]
 */
    __pyx_t_14 = __pyx_v_data.first;
    __pyx_v_score = __pyx_t_14;

    /* "thinc/search.pyx":91
 *             clas = data.second % self.nr_class
 *             score = data.first
 *             q.pop()             # <<<<<<<<<<<<<<
 *             parent = &self._parents[p_i]
 *             # Indicates terminal state reached; i.e. state is done
 */
    __pyx_v_q->pop();

    /* "thinc/search.pyx":92
 *             score = data.first
 *             q.pop()
 *             parent = &self._parents[p_i]             # <<<<<<<<<<<<<<
 *             # Indicates terminal state reached; i.e. state is done
 *             if parent.is_done:
 */
    __pyx_v_parent = (&(__pyx_v_self->_parents[__pyx_v_p_i]));

    /* "thinc/search.pyx":94
 *             parent = &self._parents[p_i]
 *             # Indicates terminal state reached; i.e. state is done
 *             if parent.is_done:             # <<<<<<<<<<<<<<
 *                 # Now parent will not be changed, so we don't have to copy.
 *                 self._states[i] = parent[0]
 */
    __pyx_t_12 = (__pyx_v_parent->is_done != 0);
    if (__pyx_t_12) {

      /* "thinc/search.pyx":96
 *             if parent.is_done:
 *                 # Now parent will not be changed, so we don't have to copy.
 *                 self._states[i] = parent[0]             # <<<<<<<<<<<<<<
 *                 self._states[i].score = score
 *                 i += 1
 */
      (__pyx_v_self->_states[__pyx_v_i]) = (__pyx_v_parent[0]);

      /* "thinc/search.pyx":97
 *                 # Now parent will not be changed, so we don't have to copy.
 *                 self._states[i] = parent[0]
 *                 self._states[i].score = score             # <<<<<<<<<<<<<<
 *                 i += 1
 *             else:
 */
      (__pyx_v_self->_states[__pyx_v_i]).score = __pyx_v_score;

      /* "thinc/search.pyx":98
 *                 self._states[i] = parent[0]
 *                 self._states[i].score = score
 *                 i += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 state = &self._states[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);
      goto __pyx_L7;
    }
    /*else*/ {

      /* "thinc/search.pyx":100
 *                 i += 1
 *             else:
 *                 state = &self._states[i]             # <<<<<<<<<<<<<<
 *                 # The supplied transition function should adjust the destination
 *                 # state to be the result of applying the class to the source state
 */
      __pyx_v_state = (&(__pyx_v_self->_states[__pyx_v_i]));

      /* "thinc/search.pyx":103
 *                 # The supplied transition function should adjust the destination
 *                 # state to be the result of applying the class to the source state
 *                 transition_func(state.content, parent.content, clas, extra_args)             # <<<<<<<<<<<<<<
 *                 key = hash_func(state.content, extra_args) if hash_func is not NULL else 0
 *                 is_seen = <size_t>seen_states.get(key)
 */
      __pyx_t_5 = __pyx_v_transition_func(__pyx_v_state->content, __pyx_v_parent->content, __pyx_v_clas, __pyx_v_extra_args); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "thinc/search.pyx":104
 *                 # state to be the result of applying the class to the source state
 *                 transition_func(state.content, parent.content, clas, extra_args)
 *                 key = hash_func(state.content, extra_args) if hash_func is not NULL else 0             # <<<<<<<<<<<<<<
 *                 is_seen = <size_t>seen_states.get(key)
 *                 if key == 0 or not is_seen:
 */
      if (((__pyx_v_hash_func != NULL) != 0)) {
        __pyx_t_16 = __pyx_v_hash_func(__pyx_v_state->content, __pyx_v_extra_args); if (unlikely(__pyx_t_16 == 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_15 = __pyx_t_16;
      } else {
        __pyx_t_15 = 0;
      }
      __pyx_v_key = __pyx_t_15;

      /* "thinc/search.pyx":105
 *                 transition_func(state.content, parent.content, clas, extra_args)
 *                 key = hash_func(state.content, extra_args) if hash_func is not NULL else 0
 *                 is_seen = <size_t>seen_states.get(key)             # <<<<<<<<<<<<<<
 *                 if key == 0 or not is_seen:
 *                     if key != 0:
 */
      __pyx_v_is_seen = ((size_t)((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_seen_states->__pyx_vtab)->get(__pyx_v_seen_states, __pyx_v_key));

      /* "thinc/search.pyx":106
 *                 key = hash_func(state.content, extra_args) if hash_func is not NULL else 0
 *                 is_seen = <size_t>seen_states.get(key)
 *                 if key == 0 or not is_seen:             # <<<<<<<<<<<<<<
 *                     if key != 0:
 *                         seen_states.set(key, <void*>1)
 */
      __pyx_t_13 = ((__pyx_v_key == 0) != 0);
      if (!__pyx_t_13) {
      } else {
        __pyx_t_12 = __pyx_t_13;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_13 = ((!(__pyx_v_is_seen != 0)) != 0);
      __pyx_t_12 = __pyx_t_13;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_12) {

        /* "thinc/search.pyx":107
 *                 is_seen = <size_t>seen_states.get(key)
 *                 if key == 0 or not is_seen:
 *                     if key != 0:             # <<<<<<<<<<<<<<
 *                         seen_states.set(key, <void*>1)
 *                     state.score = score
 */
        __pyx_t_12 = ((__pyx_v_key != 0) != 0);
        if (__pyx_t_12) {

          /* "thinc/search.pyx":108
 *                 if key == 0 or not is_seen:
 *                     if key != 0:
 *                         seen_states.set(key, <void*>1)             # <<<<<<<<<<<<<<
 *                     state.score = score
 *                     state.loss = parent.loss + costs[p_i][clas]
 */
          ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_seen_states->__pyx_vtab)->set(__pyx_v_seen_states, __pyx_v_key, ((void *)1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          goto __pyx_L11;
        }
        __pyx_L11:;

        /* "thinc/search.pyx":109
 *                     if key != 0:
 *                         seen_states.set(key, <void*>1)
 *                     state.score = score             # <<<<<<<<<<<<<<
 *                     state.loss = parent.loss + costs[p_i][clas]
 *                     self.histories[i] = list(self._parent_histories[p_i])
 */
        __pyx_v_state->score = __pyx_v_score;

        /* "thinc/search.pyx":110
 *                         seen_states.set(key, <void*>1)
 *                     state.score = score
 *                     state.loss = parent.loss + costs[p_i][clas]             # <<<<<<<<<<<<<<
 *                     self.histories[i] = list(self._parent_histories[p_i])
 *                     self.histories[i].append(clas)
 */
        __pyx_v_state->loss = (__pyx_v_parent->loss + ((__pyx_v_costs[__pyx_v_p_i])[__pyx_v_clas]));

        /* "thinc/search.pyx":111
 *                     state.score = score
 *                     state.loss = parent.loss + costs[p_i][clas]
 *                     self.histories[i] = list(self._parent_histories[p_i])             # <<<<<<<<<<<<<<
 *                     self.histories[i].append(clas)
 *                     i += 1
 */
        if (unlikely(__pyx_v_self->_parent_histories == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_self->_parent_histories, __pyx_v_p_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = PySequence_List(__pyx_t_10); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(__pyx_v_self->histories == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        if (unlikely(__Pyx_SetItemInt(__pyx_v_self->histories, __pyx_v_i, __pyx_t_11, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "thinc/search.pyx":112
 *                     state.loss = parent.loss + costs[p_i][clas]
 *                     self.histories[i] = list(self._parent_histories[p_i])
 *                     self.histories[i].append(clas)             # <<<<<<<<<<<<<<
 *                     i += 1
 *         del q
 */
        if (unlikely(__pyx_v_self->histories == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_11 = __Pyx_GetItemInt_List(__pyx_v_self->histories, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = __Pyx_PyInt_From_int32_t(__pyx_v_clas); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_17 = __Pyx_PyObject_Append(__pyx_t_11, __pyx_t_10); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "thinc/search.pyx":113
 *                     self.histories[i] = list(self._parent_histories[p_i])
 *                     self.histories[i].append(clas)
 *                     i += 1             # <<<<<<<<<<<<<<
 *         del q
 *         self.size = i
 */
        __pyx_v_i = (__pyx_v_i + 1);
        goto __pyx_L8;
      }
      __pyx_L8:;
    }
    __pyx_L7:;
  }

  /* "thinc/search.pyx":114
 *                     self.histories[i].append(clas)
 *                     i += 1
 *         del q             # <<<<<<<<<<<<<<
 *         self.size = i
 *         assert self.size >= 1
 */
  delete __pyx_v_q;

  /* "thinc/search.pyx":115
 *                     i += 1
 *         del q
 *         self.size = i             # <<<<<<<<<<<<<<
 *         assert self.size >= 1
 *         for i in range(self.width):
 */
  __pyx_v_self->size = __pyx_v_i;

  /* "thinc/search.pyx":116
 *         del q
 *         self.size = i
 *         assert self.size >= 1             # <<<<<<<<<<<<<<
 *         for i in range(self.width):
 *             memset(self.scores[i], 0, sizeof(weight_t) * self.nr_class)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->size >= 1) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "thinc/search.pyx":117
 *         self.size = i
 *         assert self.size >= 1
 *         for i in range(self.width):             # <<<<<<<<<<<<<<
 *             memset(self.scores[i], 0, sizeof(weight_t) * self.nr_class)
 *             memset(self.is_valid[i], False, sizeof(bint) * self.nr_class)
 */
  __pyx_t_18 = __pyx_v_self->width;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_18; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "thinc/search.pyx":118
 *         assert self.size >= 1
 *         for i in range(self.width):
 *             memset(self.scores[i], 0, sizeof(weight_t) * self.nr_class)             # <<<<<<<<<<<<<<
 *             memset(self.is_valid[i], False, sizeof(bint) * self.nr_class)
 *             memset(self.costs[i], 0, sizeof(int) * self.nr_class)
 */
    memset((__pyx_v_self->scores[__pyx_v_i]), 0, ((sizeof(__pyx_t_5thinc_8typedefs_weight_t)) * __pyx_v_self->nr_class));

    /* "thinc/search.pyx":119
 *         for i in range(self.width):
 *             memset(self.scores[i], 0, sizeof(weight_t) * self.nr_class)
 *             memset(self.is_valid[i], False, sizeof(bint) * self.nr_class)             # <<<<<<<<<<<<<<
 *             memset(self.costs[i], 0, sizeof(int) * self.nr_class)
 *         self.t += 1
 */
    memset((__pyx_v_self->is_valid[__pyx_v_i]), 0, ((sizeof(int)) * __pyx_v_self->nr_class));

    /* "thinc/search.pyx":120
 *             memset(self.scores[i], 0, sizeof(weight_t) * self.nr_class)
 *             memset(self.is_valid[i], False, sizeof(bint) * self.nr_class)
 *             memset(self.costs[i], 0, sizeof(int) * self.nr_class)             # <<<<<<<<<<<<<<
 *         self.t += 1
 * 
 */
    memset((__pyx_v_self->costs[__pyx_v_i]), 0, ((sizeof(int)) * __pyx_v_self->nr_class));
  }

  /* "thinc/search.pyx":121
 *             memset(self.is_valid[i], False, sizeof(bint) * self.nr_class)
 *             memset(self.costs[i], 0, sizeof(int) * self.nr_class)
 *         self.t += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef int check_done(self, finish_func_t finish_func, void* extra_args) except -1:
 */
  __pyx_v_self->t = (__pyx_v_self->t + 1);

  /* "thinc/search.pyx":62
 * 
 *     @cython.cdivision(True)
 *     cdef int advance(self, trans_func_t transition_func, hash_func_t hash_func,             # <<<<<<<<<<<<<<
 *                      void* extra_args) except -1:
 *         cdef weight_t** scores = self.scores
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("thinc.search.Beam.advance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_seen_states);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pyx":123
 *         self.t += 1
 * 
 *     cdef int check_done(self, finish_func_t finish_func, void* extra_args) except -1:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self.size):
 */

static int __pyx_f_5thinc_6search_4Beam_check_done(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_6search_finish_func_t __pyx_v_finish_func, void *__pyx_v_extra_args) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_done", 0);

  /* "thinc/search.pyx":125
 *     cdef int check_done(self, finish_func_t finish_func, void* extra_args) except -1:
 *         cdef int i
 *         for i in range(self.size):             # <<<<<<<<<<<<<<
 *             if not self._states[i].is_done:
 *                 self._states[i].is_done = finish_func(self._states[i].content, extra_args)
 */
  __pyx_t_1 = __pyx_v_self->size;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "thinc/search.pyx":126
 *         cdef int i
 *         for i in range(self.size):
 *             if not self._states[i].is_done:             # <<<<<<<<<<<<<<
 *                 self._states[i].is_done = finish_func(self._states[i].content, extra_args)
 *                 if not self._states[i].is_done:
 */
    __pyx_t_3 = ((!((__pyx_v_self->_states[__pyx_v_i]).is_done != 0)) != 0);
    if (__pyx_t_3) {

      /* "thinc/search.pyx":127
 *         for i in range(self.size):
 *             if not self._states[i].is_done:
 *                 self._states[i].is_done = finish_func(self._states[i].content, extra_args)             # <<<<<<<<<<<<<<
 *                 if not self._states[i].is_done:
 *                     self.is_done = False
 */
      __pyx_t_4 = __pyx_v_finish_func((__pyx_v_self->_states[__pyx_v_i]).content, __pyx_v_extra_args); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_self->_states[__pyx_v_i]).is_done = __pyx_t_4;

      /* "thinc/search.pyx":128
 *             if not self._states[i].is_done:
 *                 self._states[i].is_done = finish_func(self._states[i].content, extra_args)
 *                 if not self._states[i].is_done:             # <<<<<<<<<<<<<<
 *                     self.is_done = False
 *                     break
 */
      __pyx_t_3 = ((!((__pyx_v_self->_states[__pyx_v_i]).is_done != 0)) != 0);
      if (__pyx_t_3) {

        /* "thinc/search.pyx":129
 *                 self._states[i].is_done = finish_func(self._states[i].content, extra_args)
 *                 if not self._states[i].is_done:
 *                     self.is_done = False             # <<<<<<<<<<<<<<
 *                     break
 *         else:
 */
        __pyx_v_self->is_done = 0;

        /* "thinc/search.pyx":130
 *                 if not self._states[i].is_done:
 *                     self.is_done = False
 *                     break             # <<<<<<<<<<<<<<
 *         else:
 *             self.is_done = True
 */
        goto __pyx_L4_break;
      }
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  /*else*/ {

    /* "thinc/search.pyx":132
 *                     break
 *         else:
 *             self.is_done = True             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
    __pyx_v_self->is_done = 1;
  }
  __pyx_L4_break:;

  /* "thinc/search.pyx":123
 *         self.t += 1
 * 
 *     cdef int check_done(self, finish_func_t finish_func, void* extra_args) except -1:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self.size):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("thinc.search.Beam.check_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pyx":135
 * 
 *     @cython.cdivision(True)
 *     cdef int _fill(self, Queue* q, weight_t** scores, bint** is_valid) except -1:             # <<<<<<<<<<<<<<
 *         """Populate the queue from a k * n matrix of scores, where k is the
 *         beam-width, and n is the number of classes.
 */

static int __pyx_f_5thinc_6search_4Beam__fill(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, __pyx_t_5thinc_6search_Queue *__pyx_v_q, __pyx_t_5thinc_8typedefs_weight_t **__pyx_v_scores, int **__pyx_v_is_valid) {
  __pyx_t_5thinc_6search_Entry __pyx_v_entry;
  struct __pyx_t_5thinc_6search__State *__pyx_v_s;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_move_id;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_5;
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fill", 0);

  /* "thinc/search.pyx":143
 *         cdef _State* s
 *         cdef int i, j, move_id
 *         assert self.size >= 1             # <<<<<<<<<<<<<<
 *         for i in range(self.size):
 *             s = &self._states[i]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->size >= 1) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "thinc/search.pyx":144
 *         cdef int i, j, move_id
 *         assert self.size >= 1
 *         for i in range(self.size):             # <<<<<<<<<<<<<<
 *             s = &self._states[i]
 *             move_id = i * self.nr_class
 */
  __pyx_t_1 = __pyx_v_self->size;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "thinc/search.pyx":145
 *         assert self.size >= 1
 *         for i in range(self.size):
 *             s = &self._states[i]             # <<<<<<<<<<<<<<
 *             move_id = i * self.nr_class
 *             if s.is_done:
 */
    __pyx_v_s = (&(__pyx_v_self->_states[__pyx_v_i]));

    /* "thinc/search.pyx":146
 *         for i in range(self.size):
 *             s = &self._states[i]
 *             move_id = i * self.nr_class             # <<<<<<<<<<<<<<
 *             if s.is_done:
 *                 # Update score by path average, following TACL '13 paper.
 */
    __pyx_v_move_id = (__pyx_v_i * __pyx_v_self->nr_class);

    /* "thinc/search.pyx":147
 *             s = &self._states[i]
 *             move_id = i * self.nr_class
 *             if s.is_done:             # <<<<<<<<<<<<<<
 *                 # Update score by path average, following TACL '13 paper.
 *                 if self.histories[i]:
 */
    __pyx_t_3 = (__pyx_v_s->is_done != 0);
    if (__pyx_t_3) {

      /* "thinc/search.pyx":149
 *             if s.is_done:
 *                 # Update score by path average, following TACL '13 paper.
 *                 if self.histories[i]:             # <<<<<<<<<<<<<<
 *                     entry.first = s.score + (s.score / self.t)
 *                 else:
 */
      if (unlikely(__pyx_v_self->histories == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->histories, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_3) {

        /* "thinc/search.pyx":150
 *                 # Update score by path average, following TACL '13 paper.
 *                 if self.histories[i]:
 *                     entry.first = s.score + (s.score / self.t)             # <<<<<<<<<<<<<<
 *                 else:
 *                     entry.first = s.score
 */
        __pyx_v_entry.first = (__pyx_v_s->score + (__pyx_v_s->score / ((__pyx_t_5thinc_8typedefs_weight_t)__pyx_v_self->t)));
        goto __pyx_L6;
      }
      /*else*/ {

        /* "thinc/search.pyx":152
 *                     entry.first = s.score + (s.score / self.t)
 *                 else:
 *                     entry.first = s.score             # <<<<<<<<<<<<<<
 *                 entry.second = move_id
 *                 q.push(entry)
 */
        __pyx_t_5 = __pyx_v_s->score;
        __pyx_v_entry.first = __pyx_t_5;
      }
      __pyx_L6:;

      /* "thinc/search.pyx":153
 *                 else:
 *                     entry.first = s.score
 *                 entry.second = move_id             # <<<<<<<<<<<<<<
 *                 q.push(entry)
 *             else:
 */
      __pyx_v_entry.second = __pyx_v_move_id;

      /* "thinc/search.pyx":154
 *                     entry.first = s.score
 *                 entry.second = move_id
 *                 q.push(entry)             # <<<<<<<<<<<<<<
 *             else:
 *                 for j in range(self.nr_class):
 */
      __pyx_v_q->push(__pyx_v_entry);
      goto __pyx_L5;
    }
    /*else*/ {

      /* "thinc/search.pyx":156
 *                 q.push(entry)
 *             else:
 *                 for j in range(self.nr_class):             # <<<<<<<<<<<<<<
 *                     if is_valid[i][j]:
 *                         entry.first = s.score + scores[i][j]
 */
      __pyx_t_6 = __pyx_v_self->nr_class;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_j = __pyx_t_7;

        /* "thinc/search.pyx":157
 *             else:
 *                 for j in range(self.nr_class):
 *                     if is_valid[i][j]:             # <<<<<<<<<<<<<<
 *                         entry.first = s.score + scores[i][j]
 *                         entry.second = move_id + j
 */
        __pyx_t_3 = (((__pyx_v_is_valid[__pyx_v_i])[__pyx_v_j]) != 0);
        if (__pyx_t_3) {

          /* "thinc/search.pyx":158
 *                 for j in range(self.nr_class):
 *                     if is_valid[i][j]:
 *                         entry.first = s.score + scores[i][j]             # <<<<<<<<<<<<<<
 *                         entry.second = move_id + j
 *                         q.push(entry)
 */
          __pyx_v_entry.first = (__pyx_v_s->score + ((__pyx_v_scores[__pyx_v_i])[__pyx_v_j]));

          /* "thinc/search.pyx":159
 *                     if is_valid[i][j]:
 *                         entry.first = s.score + scores[i][j]
 *                         entry.second = move_id + j             # <<<<<<<<<<<<<<
 *                         q.push(entry)
 * 
 */
          __pyx_v_entry.second = (__pyx_v_move_id + __pyx_v_j);

          /* "thinc/search.pyx":160
 *                         entry.first = s.score + scores[i][j]
 *                         entry.second = move_id + j
 *                         q.push(entry)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_v_q->push(__pyx_v_entry);
          goto __pyx_L9;
        }
        __pyx_L9:;
      }
    }
    __pyx_L5:;
  }

  /* "thinc/search.pyx":135
 * 
 *     @cython.cdivision(True)
 *     cdef int _fill(self, Queue* q, weight_t** scores, bint** is_valid) except -1:             # <<<<<<<<<<<<<<
 *         """Populate the queue from a k * n matrix of scores, where k is the
 *         beam-width, and n is the number of classes.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("thinc.search.Beam._fill", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pxd":41
 *     cdef class_t size
 *     cdef int t
 *     cdef readonly bint is_done             # <<<<<<<<<<<<<<
 *     cdef list histories
 *     cdef list _parent_histories
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6search_4Beam_7is_done_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6search_4Beam_7is_done_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6search_4Beam_7is_done___get__(((struct __pyx_obj_5thinc_6search_Beam *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6search_4Beam_7is_done___get__(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->is_done); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.search.Beam.is_done.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pyx":164
 * 
 * cdef class MaxViolation:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delta = -1
 *         self.cost = 0
 */

/* Python wrapper */
static int __pyx_pw_5thinc_6search_12MaxViolation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5thinc_6search_12MaxViolation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5thinc_6search_12MaxViolation___init__(((struct __pyx_obj_5thinc_6search_MaxViolation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5thinc_6search_12MaxViolation___init__(struct __pyx_obj_5thinc_6search_MaxViolation *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "thinc/search.pyx":165
 * cdef class MaxViolation:
 *     def __init__(self):
 *         self.delta = -1             # <<<<<<<<<<<<<<
 *         self.cost = 0
 *         self.p_hist = []
 */
  __pyx_v_self->delta = -1.0;

  /* "thinc/search.pyx":166
 *     def __init__(self):
 *         self.delta = -1
 *         self.cost = 0             # <<<<<<<<<<<<<<
 *         self.p_hist = []
 *         self.g_hist = []
 */
  __pyx_v_self->cost = 0;

  /* "thinc/search.pyx":167
 *         self.delta = -1
 *         self.cost = 0
 *         self.p_hist = []             # <<<<<<<<<<<<<<
 *         self.g_hist = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->p_hist);
  __Pyx_DECREF(__pyx_v_self->p_hist);
  __pyx_v_self->p_hist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/search.pyx":168
 *         self.cost = 0
 *         self.p_hist = []
 *         self.g_hist = []             # <<<<<<<<<<<<<<
 * 
 *     cpdef int check(self, Beam pred, Beam gold) except -1:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->g_hist);
  __Pyx_DECREF(__pyx_v_self->g_hist);
  __pyx_v_self->g_hist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "thinc/search.pyx":164
 * 
 * cdef class MaxViolation:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delta = -1
 *         self.cost = 0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinc.search.MaxViolation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pyx":170
 *         self.g_hist = []
 * 
 *     cpdef int check(self, Beam pred, Beam gold) except -1:             # <<<<<<<<<<<<<<
 *         cdef _State* p = &pred._states[0]
 *         cdef _State* g = &gold._states[0]
 */

static PyObject *__pyx_pw_5thinc_6search_12MaxViolation_3check(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_5thinc_6search_12MaxViolation_check(struct __pyx_obj_5thinc_6search_MaxViolation *__pyx_v_self, struct __pyx_obj_5thinc_6search_Beam *__pyx_v_pred, struct __pyx_obj_5thinc_6search_Beam *__pyx_v_gold, int __pyx_skip_dispatch) {
  struct __pyx_t_5thinc_6search__State *__pyx_v_p;
  struct __pyx_t_5thinc_6search__State *__pyx_v_g;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_d;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5thinc_6search_12MaxViolation_3check)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_pred));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_pred));
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_pred));
      __Pyx_INCREF(((PyObject *)__pyx_v_gold));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_gold));
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_gold));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_7;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "thinc/search.pyx":171
 * 
 *     cpdef int check(self, Beam pred, Beam gold) except -1:
 *         cdef _State* p = &pred._states[0]             # <<<<<<<<<<<<<<
 *         cdef _State* g = &gold._states[0]
 *         cdef weight_t d = p.score - g.score
 */
  __pyx_v_p = (&(__pyx_v_pred->_states[0]));

  /* "thinc/search.pyx":172
 *     cpdef int check(self, Beam pred, Beam gold) except -1:
 *         cdef _State* p = &pred._states[0]
 *         cdef _State* g = &gold._states[0]             # <<<<<<<<<<<<<<
 *         cdef weight_t d = p.score - g.score
 *         if p.loss >= 1 and (self.cost == 0 or d > self.delta):
 */
  __pyx_v_g = (&(__pyx_v_gold->_states[0]));

  /* "thinc/search.pyx":173
 *         cdef _State* p = &pred._states[0]
 *         cdef _State* g = &gold._states[0]
 *         cdef weight_t d = p.score - g.score             # <<<<<<<<<<<<<<
 *         if p.loss >= 1 and (self.cost == 0 or d > self.delta):
 *             self.cost = p.loss
 */
  __pyx_v_d = (__pyx_v_p->score - __pyx_v_g->score);

  /* "thinc/search.pyx":174
 *         cdef _State* g = &gold._states[0]
 *         cdef weight_t d = p.score - g.score
 *         if p.loss >= 1 and (self.cost == 0 or d > self.delta):             # <<<<<<<<<<<<<<
 *             self.cost = p.loss
 *             self.delta = d
 */
  __pyx_t_9 = ((__pyx_v_p->loss >= 1) != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_8 = __pyx_t_9;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_9 = ((__pyx_v_self->cost == 0) != 0);
  if (!__pyx_t_9) {
  } else {
    __pyx_t_8 = __pyx_t_9;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_9 = ((__pyx_v_d > __pyx_v_self->delta) != 0);
  __pyx_t_8 = __pyx_t_9;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_8) {

    /* "thinc/search.pyx":175
 *         cdef weight_t d = p.score - g.score
 *         if p.loss >= 1 and (self.cost == 0 or d > self.delta):
 *             self.cost = p.loss             # <<<<<<<<<<<<<<
 *             self.delta = d
 *             self.p_hist = list(pred.histories[0])
 */
    __pyx_t_7 = __pyx_v_p->loss;
    __pyx_v_self->cost = __pyx_t_7;

    /* "thinc/search.pyx":176
 *         if p.loss >= 1 and (self.cost == 0 or d > self.delta):
 *             self.cost = p.loss
 *             self.delta = d             # <<<<<<<<<<<<<<
 *             self.p_hist = list(pred.histories[0])
 *             self.g_hist = list(gold.histories[0])
 */
    __pyx_v_self->delta = __pyx_v_d;

    /* "thinc/search.pyx":177
 *             self.cost = p.loss
 *             self.delta = d
 *             self.p_hist = list(pred.histories[0])             # <<<<<<<<<<<<<<
 *             self.g_hist = list(gold.histories[0])
 */
    if (unlikely(__pyx_v_pred->histories == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_pred->histories, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->p_hist);
    __Pyx_DECREF(__pyx_v_self->p_hist);
    __pyx_v_self->p_hist = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "thinc/search.pyx":178
 *             self.delta = d
 *             self.p_hist = list(pred.histories[0])
 *             self.g_hist = list(gold.histories[0])             # <<<<<<<<<<<<<<
 */
    if (unlikely(__pyx_v_gold->histories == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_gold->histories, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->g_hist);
    __Pyx_DECREF(__pyx_v_self->g_hist);
    __pyx_v_self->g_hist = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "thinc/search.pyx":170
 *         self.g_hist = []
 * 
 *     cpdef int check(self, Beam pred, Beam gold) except -1:             # <<<<<<<<<<<<<<
 *         cdef _State* p = &pred._states[0]
 *         cdef _State* g = &gold._states[0]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("thinc.search.MaxViolation.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6search_12MaxViolation_3check(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5thinc_6search_12MaxViolation_3check(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5thinc_6search_Beam *__pyx_v_pred = 0;
  struct __pyx_obj_5thinc_6search_Beam *__pyx_v_gold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pred,&__pyx_n_s_gold,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pred)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_pred = ((struct __pyx_obj_5thinc_6search_Beam *)values[0]);
    __pyx_v_gold = ((struct __pyx_obj_5thinc_6search_Beam *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinc.search.MaxViolation.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pred), __pyx_ptype_5thinc_6search_Beam, 1, "pred", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gold), __pyx_ptype_5thinc_6search_Beam, 1, "gold", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5thinc_6search_12MaxViolation_2check(((struct __pyx_obj_5thinc_6search_MaxViolation *)__pyx_v_self), __pyx_v_pred, __pyx_v_gold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6search_12MaxViolation_2check(struct __pyx_obj_5thinc_6search_MaxViolation *__pyx_v_self, struct __pyx_obj_5thinc_6search_Beam *__pyx_v_pred, struct __pyx_obj_5thinc_6search_Beam *__pyx_v_gold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5thinc_6search_12MaxViolation_check(__pyx_v_self, __pyx_v_pred, __pyx_v_gold, 1); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("thinc.search.MaxViolation.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pxd":76
 *     cdef weight_t delta
 *     cdef class_t n
 *     cdef readonly list p_hist             # <<<<<<<<<<<<<<
 *     cdef readonly list g_hist
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6search_12MaxViolation_6p_hist_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6search_12MaxViolation_6p_hist_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6search_12MaxViolation_6p_hist___get__(((struct __pyx_obj_5thinc_6search_MaxViolation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6search_12MaxViolation_6p_hist___get__(struct __pyx_obj_5thinc_6search_MaxViolation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->p_hist);
  __pyx_r = __pyx_v_self->p_hist;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pxd":77
 *     cdef class_t n
 *     cdef readonly list p_hist
 *     cdef readonly list g_hist             # <<<<<<<<<<<<<<
 * 
 *     cpdef int check(self, Beam pred, Beam gold) except -1
 */

/* Python wrapper */
static PyObject *__pyx_pw_5thinc_6search_12MaxViolation_6g_hist_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5thinc_6search_12MaxViolation_6g_hist_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5thinc_6search_12MaxViolation_6g_hist___get__(((struct __pyx_obj_5thinc_6search_MaxViolation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5thinc_6search_12MaxViolation_6g_hist___get__(struct __pyx_obj_5thinc_6search_MaxViolation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->g_hist);
  __pyx_r = __pyx_v_self->g_hist;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/search.pxd":52
 *     cdef int _fill(self, Queue* q, weight_t** scores, bint** is_valid) except -1
 * 
 *     cdef inline void* at(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self._states[i].content
 * 
 */

static CYTHON_INLINE void *__pyx_f_5thinc_6search_4Beam_at(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, int __pyx_v_i) {
  void *__pyx_r;

  /* "thinc/search.pxd":53
 * 
 *     cdef inline void* at(self, int i) nogil:
 *         return self._states[i].content             # <<<<<<<<<<<<<<
 * 
 *     cdef int initialize(self, init_func_t init_func, int n, void* extra_args) except -1
 */
  __pyx_r = (__pyx_v_self->_states[__pyx_v_i]).content;
  goto __pyx_L0;

  /* "thinc/search.pxd":52
 *     cdef int _fill(self, Queue* q, weight_t** scores, bint** is_valid) except -1
 * 
 *     cdef inline void* at(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self._states[i].content
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "thinc/search.pxd":61
 * 
 * 
 *     cdef inline void set_cell(self, int i, int j, weight_t score, bint is_valid, int cost) nogil:             # <<<<<<<<<<<<<<
 *         self.scores[i][j] = score
 *         self.is_valid[i][j] = is_valid
 */

static CYTHON_INLINE void __pyx_f_5thinc_6search_4Beam_set_cell(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, int __pyx_v_i, int __pyx_v_j, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_score, int __pyx_v_is_valid, int __pyx_v_cost) {

  /* "thinc/search.pxd":62
 * 
 *     cdef inline void set_cell(self, int i, int j, weight_t score, bint is_valid, int cost) nogil:
 *         self.scores[i][j] = score             # <<<<<<<<<<<<<<
 *         self.is_valid[i][j] = is_valid
 *         self.costs[i][j] = cost
 */
  ((__pyx_v_self->scores[__pyx_v_i])[__pyx_v_j]) = __pyx_v_score;

  /* "thinc/search.pxd":63
 *     cdef inline void set_cell(self, int i, int j, weight_t score, bint is_valid, int cost) nogil:
 *         self.scores[i][j] = score
 *         self.is_valid[i][j] = is_valid             # <<<<<<<<<<<<<<
 *         self.costs[i][j] = cost
 * 
 */
  ((__pyx_v_self->is_valid[__pyx_v_i])[__pyx_v_j]) = __pyx_v_is_valid;

  /* "thinc/search.pxd":64
 *         self.scores[i][j] = score
 *         self.is_valid[i][j] = is_valid
 *         self.costs[i][j] = cost             # <<<<<<<<<<<<<<
 * 
 *     cdef int set_row(self, int i, const weight_t* scores, const bint* is_valid,
 */
  ((__pyx_v_self->costs[__pyx_v_i])[__pyx_v_j]) = __pyx_v_cost;

  /* "thinc/search.pxd":61
 * 
 * 
 *     cdef inline void set_cell(self, int i, int j, weight_t score, bint is_valid, int cost) nogil:             # <<<<<<<<<<<<<<
 *         self.scores[i][j] = score
 *         self.is_valid[i][j] = is_valid
 */

  /* function exit code */
}
static struct __pyx_vtabstruct_5thinc_6search_Beam __pyx_vtable_5thinc_6search_Beam;

static PyObject *__pyx_tp_new_5thinc_6search_Beam(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5thinc_6search_Beam *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5thinc_6search_Beam *)o);
  p->__pyx_vtab = __pyx_vtabptr_5thinc_6search_Beam;
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  p->histories = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_parent_histories = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5thinc_6search_Beam(PyObject *o) {
  struct __pyx_obj_5thinc_6search_Beam *p = (struct __pyx_obj_5thinc_6search_Beam *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->mem);
  Py_CLEAR(p->histories);
  Py_CLEAR(p->_parent_histories);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5thinc_6search_Beam(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5thinc_6search_Beam *p = (struct __pyx_obj_5thinc_6search_Beam *)o;
  if (p->mem) {
    e = (*v)(((PyObject*)p->mem), a); if (e) return e;
  }
  if (p->histories) {
    e = (*v)(p->histories, a); if (e) return e;
  }
  if (p->_parent_histories) {
    e = (*v)(p->_parent_histories, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5thinc_6search_Beam(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5thinc_6search_Beam *p = (struct __pyx_obj_5thinc_6search_Beam *)o;
  tmp = ((PyObject*)p->mem);
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->histories);
  p->histories = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_parent_histories);
  p->_parent_histories = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5thinc_6search_4Beam_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6search_4Beam_5score_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6search_4Beam_loss(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6search_4Beam_4loss_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6search_4Beam_is_done(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6search_4Beam_7is_done_1__get__(o);
}

static PyMethodDef __pyx_methods_5thinc_6search_Beam[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5thinc_6search_Beam[] = {
  {(char *)"score", __pyx_getprop_5thinc_6search_4Beam_score, 0, 0, 0},
  {(char *)"loss", __pyx_getprop_5thinc_6search_4Beam_loss, 0, 0, 0},
  {(char *)"is_done", __pyx_getprop_5thinc_6search_4Beam_is_done, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5thinc_6search_Beam = {
  PyVarObject_HEAD_INIT(0, 0)
  "thinc.search.Beam", /*tp_name*/
  sizeof(struct __pyx_obj_5thinc_6search_Beam), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5thinc_6search_Beam, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5thinc_6search_Beam, /*tp_traverse*/
  __pyx_tp_clear_5thinc_6search_Beam, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5thinc_6search_Beam, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5thinc_6search_Beam, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5thinc_6search_4Beam_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5thinc_6search_Beam, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5thinc_6search_MaxViolation __pyx_vtable_5thinc_6search_MaxViolation;

static PyObject *__pyx_tp_new_5thinc_6search_MaxViolation(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5thinc_6search_MaxViolation *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5thinc_6search_MaxViolation *)o);
  p->__pyx_vtab = __pyx_vtabptr_5thinc_6search_MaxViolation;
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  p->p_hist = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->g_hist = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5thinc_6search_MaxViolation(PyObject *o) {
  struct __pyx_obj_5thinc_6search_MaxViolation *p = (struct __pyx_obj_5thinc_6search_MaxViolation *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->mem);
  Py_CLEAR(p->p_hist);
  Py_CLEAR(p->g_hist);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5thinc_6search_MaxViolation(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5thinc_6search_MaxViolation *p = (struct __pyx_obj_5thinc_6search_MaxViolation *)o;
  if (p->mem) {
    e = (*v)(((PyObject*)p->mem), a); if (e) return e;
  }
  if (p->p_hist) {
    e = (*v)(p->p_hist, a); if (e) return e;
  }
  if (p->g_hist) {
    e = (*v)(p->g_hist, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5thinc_6search_MaxViolation(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5thinc_6search_MaxViolation *p = (struct __pyx_obj_5thinc_6search_MaxViolation *)o;
  tmp = ((PyObject*)p->mem);
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->p_hist);
  p->p_hist = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->g_hist);
  p->g_hist = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5thinc_6search_12MaxViolation_p_hist(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6search_12MaxViolation_6p_hist_1__get__(o);
}

static PyObject *__pyx_getprop_5thinc_6search_12MaxViolation_g_hist(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5thinc_6search_12MaxViolation_6g_hist_1__get__(o);
}

static PyMethodDef __pyx_methods_5thinc_6search_MaxViolation[] = {
  {"check", (PyCFunction)__pyx_pw_5thinc_6search_12MaxViolation_3check, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5thinc_6search_MaxViolation[] = {
  {(char *)"p_hist", __pyx_getprop_5thinc_6search_12MaxViolation_p_hist, 0, 0, 0},
  {(char *)"g_hist", __pyx_getprop_5thinc_6search_12MaxViolation_g_hist, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5thinc_6search_MaxViolation = {
  PyVarObject_HEAD_INIT(0, 0)
  "thinc.search.MaxViolation", /*tp_name*/
  sizeof(struct __pyx_obj_5thinc_6search_MaxViolation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5thinc_6search_MaxViolation, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5thinc_6search_MaxViolation, /*tp_traverse*/
  __pyx_tp_clear_5thinc_6search_MaxViolation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5thinc_6search_MaxViolation, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5thinc_6search_MaxViolation, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5thinc_6search_12MaxViolation_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5thinc_6search_MaxViolation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "search",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_check, __pyx_k_check, sizeof(__pyx_k_check), 0, 0, 1, 1},
  {&__pyx_n_s_gold, __pyx_k_gold, sizeof(__pyx_k_gold), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_nr_class, __pyx_k_nr_class, sizeof(__pyx_k_nr_class), 0, 0, 1, 1},
  {&__pyx_n_s_pred, __pyx_k_pred, sizeof(__pyx_k_pred), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initsearch(void); /*proto*/
PyMODINIT_FUNC initsearch(void)
#else
PyMODINIT_FUNC PyInit_search(void); /*proto*/
PyMODINIT_FUNC PyInit_search(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_search(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("search", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_thinc__search) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "thinc.search")) {
      if (unlikely(PyDict_SetItemString(modules, "thinc.search", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_5thinc_6search_Beam = &__pyx_vtable_5thinc_6search_Beam;
  __pyx_vtable_5thinc_6search_Beam._fill = (int (*)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_Queue *, __pyx_t_5thinc_8typedefs_weight_t **, int **))__pyx_f_5thinc_6search_4Beam__fill;
  __pyx_vtable_5thinc_6search_Beam.at = (void *(*)(struct __pyx_obj_5thinc_6search_Beam *, int))__pyx_f_5thinc_6search_4Beam_at;
  __pyx_vtable_5thinc_6search_Beam.initialize = (int (*)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_init_func_t, int, void *))__pyx_f_5thinc_6search_4Beam_initialize;
  __pyx_vtable_5thinc_6search_Beam.advance = (int (*)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_trans_func_t, __pyx_t_5thinc_6search_hash_func_t, void *))__pyx_f_5thinc_6search_4Beam_advance;
  __pyx_vtable_5thinc_6search_Beam.check_done = (int (*)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_finish_func_t, void *))__pyx_f_5thinc_6search_4Beam_check_done;
  __pyx_vtable_5thinc_6search_Beam.set_cell = (void (*)(struct __pyx_obj_5thinc_6search_Beam *, int, int, __pyx_t_5thinc_8typedefs_weight_t, int, int))__pyx_f_5thinc_6search_4Beam_set_cell;
  __pyx_vtable_5thinc_6search_Beam.set_row = (int (*)(struct __pyx_obj_5thinc_6search_Beam *, int, __pyx_t_5thinc_8typedefs_weight_t const *, int const *, int const *))__pyx_f_5thinc_6search_4Beam_set_row;
  __pyx_vtable_5thinc_6search_Beam.set_table = (int (*)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_8typedefs_weight_t **, int **, int **))__pyx_f_5thinc_6search_4Beam_set_table;
  if (PyType_Ready(&__pyx_type_5thinc_6search_Beam) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5thinc_6search_Beam.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5thinc_6search_Beam.tp_dict, __pyx_vtabptr_5thinc_6search_Beam) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Beam", (PyObject *)&__pyx_type_5thinc_6search_Beam) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5thinc_6search_Beam = &__pyx_type_5thinc_6search_Beam;
  __pyx_vtabptr_5thinc_6search_MaxViolation = &__pyx_vtable_5thinc_6search_MaxViolation;
  __pyx_vtable_5thinc_6search_MaxViolation.check = (int (*)(struct __pyx_obj_5thinc_6search_MaxViolation *, struct __pyx_obj_5thinc_6search_Beam *, struct __pyx_obj_5thinc_6search_Beam *, int __pyx_skip_dispatch))__pyx_f_5thinc_6search_12MaxViolation_check;
  if (PyType_Ready(&__pyx_type_5thinc_6search_MaxViolation) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5thinc_6search_MaxViolation.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5thinc_6search_MaxViolation.tp_dict, __pyx_vtabptr_5thinc_6search_MaxViolation) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "MaxViolation", (PyObject *)&__pyx_type_5thinc_6search_MaxViolation) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5thinc_6search_MaxViolation = &__pyx_type_5thinc_6search_MaxViolation;
  /*--- Type import code ---*/
  __pyx_ptype_5cymem_5cymem_Pool = __Pyx_ImportType("cymem.cymem", "Pool", sizeof(struct __pyx_obj_5cymem_5cymem_Pool), 1); if (unlikely(!__pyx_ptype_5cymem_5cymem_Pool)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5cymem_5cymem_Pool = (struct __pyx_vtabstruct_5cymem_5cymem_Pool*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_Pool->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_Pool)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5cymem_5cymem_Address = __Pyx_ImportType("cymem.cymem", "Address", sizeof(struct __pyx_obj_5cymem_5cymem_Address), 1); if (unlikely(!__pyx_ptype_5cymem_5cymem_Address)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7preshed_4maps_PreshMap = __Pyx_ImportType("preshed.maps", "PreshMap", sizeof(struct __pyx_obj_7preshed_4maps_PreshMap), 1); if (unlikely(!__pyx_ptype_7preshed_4maps_PreshMap)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_7preshed_4maps_PreshMap = (struct __pyx_vtabstruct_7preshed_4maps_PreshMap*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMap->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMap)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7preshed_4maps_PreshMapArray = __Pyx_ImportType("preshed.maps", "PreshMapArray", sizeof(struct __pyx_obj_7preshed_4maps_PreshMapArray), 1); if (unlikely(!__pyx_ptype_7preshed_4maps_PreshMapArray)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_7preshed_4maps_PreshMapArray = (struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMapArray->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMapArray)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "thinc/search.pyx":1
 * from __future__ cimport division             # <<<<<<<<<<<<<<
 * cimport cython
 * from libc.string cimport memset, memcpy
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thinc/search.pxd":61
 * 
 * 
 *     cdef inline void set_cell(self, int i, int j, weight_t score, bint is_valid, int cost) nogil:             # <<<<<<<<<<<<<<
 *         self.scores[i][j] = score
 *         self.is_valid[i][j] = is_valid
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init thinc.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init thinc.search");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
    const int32_t neg_one = (int32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int32_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, long, PyLong_AsLong(x))
            } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32_t");
    return (int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32_t");
    return (int32_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value) {
    const int32_t neg_one = (int32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int32_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
