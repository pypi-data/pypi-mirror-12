
datasink_coordinate_transformation = 
_outputs = {}
base_directory = BASE_DIRECTORY_HERE
container = <undefined>
ignore_exception = False
parameterization = True
regexp_substitutions = <undefined>
remove_dest_dir = False
strip_dir = <undefined>
substitutions = <undefined>

datasink_func_motion_correct = 
_outputs = {}
base_directory = BASE_DIRECTORY_HERE
container = <undefined>
ignore_exception = False
parameterization = True
regexp_substitutions = <undefined>
remove_dest_dir = False
strip_dir = <undefined>
substitutions = <undefined>

func_deoblique = 
args = <undefined>
deoblique = True
environ = {}
ignore_exception = False
terminal_output = stream
xorigin = <undefined>
yorigin = <undefined>
zorigin = <undefined>

func_drop_trs = 
args = <undefined>
environ = {}
expr = a
ignore_exception = False
in_file_a = IN_FILE_A_HERE
in_file_b = <undefined>
in_file_c = <undefined>
other = <undefined>
out_file = <undefined>
outputtype = NIFTI_GZ
single_idx = <undefined>
terminal_output = stream

func_get_idx = 
function_str = S'def get_idx(in_files, stop_idx=None, start_idx=None):\n\n    """\n    Method to get the first and the last slice for\n    the functional run. It verifies the user specified\n    first and last slice. If the values are not valid, it \n    calculates and returns the very first and the last slice \n\n    Parameters\n    ----------\n    in_file : string (nifti file)\n       Path to input functional run\n\n    stop_idx : int\n        Last volume to be considered, specified by user\n        in the configuration file \n\n    stop_idx : int\n        First volume to be considered, specified by user \n        in the configuration file \n\n    Returns\n    -------\n    stop_idx :  int\n        Value of first slice to consider for the functional run \n\n    start_idx : int \n        Value of last slice to consider for the functional run\n\n    """\n\n    #stopidx = None\n    #startidx = None\n    from nibabel import load\n\n    img = load(in_files)\n    hdr = img.get_header()\n    nvols = int(hdr.get_data_shape()[3])\n\n\n    if (start_idx == None) or (start_idx < 0) or (start_idx > (nvols - 1)):\n        startidx = 0\n    else:\n        startidx = start_idx\n\n    if (stop_idx == None) or (stop_idx > (nvols - 1)):\n        stopidx = nvols - 1\n    else:\n        stopidx = stop_idx\n\n    return stopidx, startidx\n'
.
ignore_exception = False
in_files = IN_FILES_HERE
start_idx = 0
stop_idx = End

func_get_mean_RPI = 
args = <undefined>
environ = {}
ignore_exception = False
mask = <undefined>
options = -mean
out_file = <undefined>
outputtype = NIFTI_GZ
terminal_output = stream

func_get_mean_motion = 
args = <undefined>
environ = {}
ignore_exception = False
mask = <undefined>
options = -mean
out_file = <undefined>
outputtype = NIFTI_GZ
terminal_output = stream

func_motion_correct = 
args = -Fourier -twopass
copyorigin = <undefined>
environ = {}
ignore_exception = False
md1d_file = <undefined>
oned_file = <undefined>
oned_matrix_save = <undefined>
out_file = <undefined>
outputtype = NIFTI_GZ
terminal_output = stream
timeshift = <undefined>
verbose = <undefined>
zpad = 4

func_motion_correct_A = 
args = -Fourier -twopass
copyorigin = <undefined>
environ = {}
ignore_exception = False
md1d_file = max_displacement.1D
oned_file = <undefined>
oned_matrix_save = <undefined>
out_file = <undefined>
outputtype = NIFTI_GZ
terminal_output = stream
timeshift = <undefined>
verbose = <undefined>
zpad = 4

func_reorient = 
args = <undefined>
environ = {}
ignore_exception = False
master = <undefined>
orientation = RPI
out_file = <undefined>
outputtype = NIFTI_GZ
resample_mode = <undefined>
terminal_output = stream
voxel_size = <undefined>

func_slice_time_correction = 
args = <undefined>
environ = {}
ignore = <undefined>
ignore_exception = False
interp = <undefined>
out_file = <undefined>
outputtype = NIFTI_GZ
rlt = <undefined>
rltplus = <undefined>
terminal_output = stream
tpattern = <undefined>
tr = <undefined>
tslice = <undefined>
tzero = <undefined>


