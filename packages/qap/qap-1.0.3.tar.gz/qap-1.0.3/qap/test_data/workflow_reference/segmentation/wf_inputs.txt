
datasink_segmentation = 
_outputs = {}
base_directory = base_directory_here
container = <undefined>
ignore_exception = False
parameterization = True
regexp_substitutions = <undefined>
remove_dest_dir = False
strip_dir = <undefined>
substitutions = <undefined>

pick_csf = 
function_str = S'def pick_seg_type(probability_maps, seg_type):\n\n    """\n    Returns the selected probability map from the list of segmented\n    probability maps\n\n    Parameters\n    ----------\n\n    probability_maps : list (string)\n        List of Probability Maps\n\n    Returns\n    -------\n\n    file : string\n        Path to segment_prob_0.nii.gz is returned\n\n    """\n\n    import os\n    import sys\n\n\n    if(isinstance(probability_maps, list)):\n\n        if(len(probability_maps) == 1):\n\n            probability_maps = probability_maps[0]\n\n        for filename in probability_maps:\n\n            if seg_type == "csf":\n\n                if filename.endswith("_0.nii.gz"):\n                    return filename\n\n            elif seg_type == "gm":\n\n                if filename.endswith("_1.nii.gz"):\n                    return filename\n\n            elif seg_type == "wm":\n\n                if filename.endswith("_2.nii.gz"):\n                    return filename\n\n\n    return None\n'
.
ignore_exception = False
seg_type = csf

pick_gm = 
function_str = S'def pick_seg_type(probability_maps, seg_type):\n\n    """\n    Returns the selected probability map from the list of segmented\n    probability maps\n\n    Parameters\n    ----------\n\n    probability_maps : list (string)\n        List of Probability Maps\n\n    Returns\n    -------\n\n    file : string\n        Path to segment_prob_0.nii.gz is returned\n\n    """\n\n    import os\n    import sys\n\n\n    if(isinstance(probability_maps, list)):\n\n        if(len(probability_maps) == 1):\n\n            probability_maps = probability_maps[0]\n\n        for filename in probability_maps:\n\n            if seg_type == "csf":\n\n                if filename.endswith("_0.nii.gz"):\n                    return filename\n\n            elif seg_type == "gm":\n\n                if filename.endswith("_1.nii.gz"):\n                    return filename\n\n            elif seg_type == "wm":\n\n                if filename.endswith("_2.nii.gz"):\n                    return filename\n\n\n    return None\n'
.
ignore_exception = False
seg_type = gm

pick_wm = 
function_str = S'def pick_seg_type(probability_maps, seg_type):\n\n    """\n    Returns the selected probability map from the list of segmented\n    probability maps\n\n    Parameters\n    ----------\n\n    probability_maps : list (string)\n        List of Probability Maps\n\n    Returns\n    -------\n\n    file : string\n        Path to segment_prob_0.nii.gz is returned\n\n    """\n\n    import os\n    import sys\n\n\n    if(isinstance(probability_maps, list)):\n\n        if(len(probability_maps) == 1):\n\n            probability_maps = probability_maps[0]\n\n        for filename in probability_maps:\n\n            if seg_type == "csf":\n\n                if filename.endswith("_0.nii.gz"):\n                    return filename\n\n            elif seg_type == "gm":\n\n                if filename.endswith("_1.nii.gz"):\n                    return filename\n\n            elif seg_type == "wm":\n\n                if filename.endswith("_2.nii.gz"):\n                    return filename\n\n\n    return None\n'
.
ignore_exception = False
seg_type = wm

segmentation = 
args = <undefined>
bias_iters = <undefined>
bias_lowpass = <undefined>
environ = {'FSLOUTPUTTYPE': 'NIFTI_GZ'}
hyper = <undefined>
ignore_exception = False
img_type = 1
in_files = in_files_here
init_seg_smooth = <undefined>
init_transform = <undefined>
iters_afterbias = <undefined>
manual_seg = <undefined>
mixel_smooth = <undefined>
no_bias = <undefined>
no_pve = <undefined>
number_classes = <undefined>
other_priors = <undefined>
out_basename = segment
output_biascorrected = <undefined>
output_biasfield = <undefined>
output_type = NIFTI_GZ
probability_maps = True
segment_iters = <undefined>
segments = True
terminal_output = stream
use_priors = <undefined>
verbose = <undefined>


