# Generated from java-escape by ANTLR 4.5
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2+")
        buf.write("\u0159\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3")
        buf.write("\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3 \3 \3 \3 \3 \3 \3 \3!\3!\3\"\3\"\3#\3#\3#\3$\3$\3%")
        buf.write("\3%\5%\u00f1\n%\3&\3&\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(")
        buf.write("\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0109\n(\3)\3)\3)\3")
        buf.write(")\7)\u010f\n)\f)\16)\u0112\13)\3*\3*\3*\7*\u0117\n*\f")
        buf.write("*\16*\u011a\13*\5*\u011c\n*\3+\3+\7+\u0120\n+\f+\16+\u0123")
        buf.write("\13+\3+\5+\u0126\n+\5+\u0128\n+\3+\3+\6+\u012c\n+\r+\16")
        buf.write("+\u012d\3,\3,\3,\7,\u0133\n,\f,\16,\u0136\13,\3,\3,\3")
        buf.write("-\3-\3-\3-\7-\u013e\n-\f-\16-\u0141\13-\3-\3-\3-\3-\3")
        buf.write("-\3.\3.\3.\3.\7.\u014c\n.\f.\16.\u014f\13.\3.\3.\3/\6")
        buf.write("/\u0154\n/\r/\16/\u0155\3/\3/\4\u0134\u013f\2\60\3\3\5")
        buf.write("\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33")
        buf.write("\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32")
        buf.write("\63\33\65\34\67\359\36;\37= ?!A\"C#E\2G\2I\2K\2M\2O$Q")
        buf.write("%S&U\'W(Y)[*]+\3\2\t\3\2))\4\2C\\c|\3\2\63;\3\2\62\62")
        buf.write("\4\2//aa\4\2\f\f\17\17\5\2\13\f\17\17\"\"\u0165\2\3\3")
        buf.write("\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2")
        buf.write("\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2")
        buf.write("\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2")
        buf.write("\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2")
        buf.write("\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3")
        buf.write("\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2")
        buf.write("\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3")
        buf.write("\2\2\2\2C\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U")
        buf.write("\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\3")
        buf.write("_\3\2\2\2\5a\3\2\2\2\7c\3\2\2\2\tj\3\2\2\2\13r\3\2\2\2")
        buf.write("\rz\3\2\2\2\17\177\3\2\2\2\21\u0085\3\2\2\2\23\u0088\3")
        buf.write("\2\2\2\25\u008a\3\2\2\2\27\u008c\3\2\2\2\31\u008e\3\2")
        buf.write("\2\2\33\u0090\3\2\2\2\35\u0094\3\2\2\2\37\u0098\3\2\2")
        buf.write("\2!\u009b\3\2\2\2#\u009e\3\2\2\2%\u00a5\3\2\2\2\'\u00ab")
        buf.write("\3\2\2\2)\u00b3\3\2\2\2+\u00b5\3\2\2\2-\u00b7\3\2\2\2")
        buf.write("/\u00b9\3\2\2\2\61\u00bc\3\2\2\2\63\u00bf\3\2\2\2\65\u00c2")
        buf.write("\3\2\2\2\67\u00c5\3\2\2\29\u00cc\3\2\2\2;\u00d2\3\2\2")
        buf.write("\2=\u00dc\3\2\2\2?\u00de\3\2\2\2A\u00e5\3\2\2\2C\u00e7")
        buf.write("\3\2\2\2E\u00e9\3\2\2\2G\u00ec\3\2\2\2I\u00f0\3\2\2\2")
        buf.write("K\u00f2\3\2\2\2M\u00f4\3\2\2\2O\u0108\3\2\2\2Q\u010a\3")
        buf.write("\2\2\2S\u011b\3\2\2\2U\u0127\3\2\2\2W\u012f\3\2\2\2Y\u0139")
        buf.write("\3\2\2\2[\u0147\3\2\2\2]\u0153\3\2\2\2_`\7}\2\2`\4\3\2")
        buf.write("\2\2ab\7\177\2\2b\6\3\2\2\2cd\7h\2\2de\7q\2\2ef\7t\2\2")
        buf.write("fg\7d\2\2gh\7k\2\2hi\7f\2\2i\b\3\2\2\2jk\7o\2\2kl\7g\2")
        buf.write("\2lm\7u\2\2mn\7u\2\2no\7c\2\2op\7i\2\2pq\7g\2\2q\n\3\2")
        buf.write("\2\2rs\7t\2\2st\7g\2\2tu\7s\2\2uv\7w\2\2vw\7k\2\2wx\7")
        buf.write("t\2\2xy\7g\2\2y\f\3\2\2\2z{\7h\2\2{|\7k\2\2|}\7p\2\2}")
        buf.write("~\7f\2\2~\16\3\2\2\2\177\u0080\7y\2\2\u0080\u0081\7j\2")
        buf.write("\2\u0081\u0082\7g\2\2\u0082\u0083\7t\2\2\u0083\u0084\7")
        buf.write("g\2\2\u0084\20\3\2\2\2\u0085\u0086\7k\2\2\u0086\u0087")
        buf.write("\7p\2\2\u0087\22\3\2\2\2\u0088\u0089\7*\2\2\u0089\24\3")
        buf.write("\2\2\2\u008a\u008b\7.\2\2\u008b\26\3\2\2\2\u008c\u008d")
        buf.write("\7+\2\2\u008d\30\3\2\2\2\u008e\u008f\7?\2\2\u008f\32\3")
        buf.write("\2\2\2\u0090\u0091\7p\2\2\u0091\u0092\7q\2\2\u0092\u0093")
        buf.write("\7v\2\2\u0093\34\3\2\2\2\u0094\u0095\7c\2\2\u0095\u0096")
        buf.write("\7p\2\2\u0096\u0097\7f\2\2\u0097\36\3\2\2\2\u0098\u0099")
        buf.write("\7q\2\2\u0099\u009a\7t\2\2\u009a \3\2\2\2\u009b\u009c")
        buf.write("\7k\2\2\u009c\u009d\7u\2\2\u009d\"\3\2\2\2\u009e\u009f")
        buf.write("\7d\2\2\u009f\u00a0\7g\2\2\u00a0\u00a1\7h\2\2\u00a1\u00a2")
        buf.write("\7q\2\2\u00a2\u00a3\7t\2\2\u00a3\u00a4\7g\2\2\u00a4$\3")
        buf.write("\2\2\2\u00a5\u00a6\7c\2\2\u00a6\u00a7\7h\2\2\u00a7\u00a8")
        buf.write("\7v\2\2\u00a8\u00a9\7g\2\2\u00a9\u00aa\7t\2\2\u00aa&\3")
        buf.write("\2\2\2\u00ab\u00ac\7d\2\2\u00ac\u00ad\7g\2\2\u00ad\u00ae")
        buf.write("\7v\2\2\u00ae\u00af\7y\2\2\u00af\u00b0\7g\2\2\u00b0\u00b1")
        buf.write("\7g\2\2\u00b1\u00b2\7p\2\2\u00b2(\3\2\2\2\u00b3\u00b4")
        buf.write("\7/\2\2\u00b4*\3\2\2\2\u00b5\u00b6\7>\2\2\u00b6,\3\2\2")
        buf.write("\2\u00b7\u00b8\7@\2\2\u00b8.\3\2\2\2\u00b9\u00ba\7>\2")
        buf.write("\2\u00ba\u00bb\7?\2\2\u00bb\60\3\2\2\2\u00bc\u00bd\7@")
        buf.write("\2\2\u00bd\u00be\7?\2\2\u00be\62\3\2\2\2\u00bf\u00c0\7")
        buf.write("?\2\2\u00c0\u00c1\7?\2\2\u00c1\64\3\2\2\2\u00c2\u00c3")
        buf.write("\7#\2\2\u00c3\u00c4\7?\2\2\u00c4\66\3\2\2\2\u00c5\u00c6")
        buf.write("\7p\2\2\u00c6\u00c7\7q\2\2\u00c7\u00c8\7v\2\2\u00c8\u00c9")
        buf.write("\7\"\2\2\u00c9\u00ca\7k\2\2\u00ca\u00cb\7p\2\2\u00cb8")
        buf.write("\3\2\2\2\u00cc\u00cd\7o\2\2\u00cd\u00ce\7c\2\2\u00ce\u00cf")
        buf.write("\7v\2\2\u00cf\u00d0\7e\2\2\u00d0\u00d1\7j\2\2\u00d1:\3")
        buf.write("\2\2\2\u00d2\u00d3\7p\2\2\u00d3\u00d4\7q\2\2\u00d4\u00d5")
        buf.write("\7v\2\2\u00d5\u00d6\7\"\2\2\u00d6\u00d7\7o\2\2\u00d7\u00d8")
        buf.write("\7c\2\2\u00d8\u00d9\7v\2\2\u00d9\u00da\7e\2\2\u00da\u00db")
        buf.write("\7j\2\2\u00db<\3\2\2\2\u00dc\u00dd\7\60\2\2\u00dd>\3\2")
        buf.write("\2\2\u00de\u00df\7k\2\2\u00df\u00e0\7i\2\2\u00e0\u00e1")
        buf.write("\7p\2\2\u00e1\u00e2\7q\2\2\u00e2\u00e3\7t\2\2\u00e3\u00e4")
        buf.write("\7g\2\2\u00e4@\3\2\2\2\u00e5\u00e6\7]\2\2\u00e6B\3\2\2")
        buf.write("\2\u00e7\u00e8\7_\2\2\u00e8D\3\2\2\2\u00e9\u00ea\7^\2")
        buf.write("\2\u00ea\u00eb\t\2\2\2\u00ebF\3\2\2\2\u00ec\u00ed\t\3")
        buf.write("\2\2\u00edH\3\2\2\2\u00ee\u00f1\5M\'\2\u00ef\u00f1\5K")
        buf.write("&\2\u00f0\u00ee\3\2\2\2\u00f0\u00ef\3\2\2\2\u00f1J\3\2")
        buf.write("\2\2\u00f2\u00f3\t\4\2\2\u00f3L\3\2\2\2\u00f4\u00f5\t")
        buf.write("\5\2\2\u00f5N\3\2\2\2\u00f6\u00f7\7v\2\2\u00f7\u00f8\7")
        buf.write("t\2\2\u00f8\u00f9\7w\2\2\u00f9\u0109\7g\2\2\u00fa\u00fb")
        buf.write("\7V\2\2\u00fb\u00fc\7t\2\2\u00fc\u00fd\7w\2\2\u00fd\u0109")
        buf.write("\7g\2\2\u00fe\u00ff\7h\2\2\u00ff\u0100\7c\2\2\u0100\u0101")
        buf.write("\7n\2\2\u0101\u0102\7u\2\2\u0102\u0109\7g\2\2\u0103\u0104")
        buf.write("\7H\2\2\u0104\u0105\7c\2\2\u0105\u0106\7n\2\2\u0106\u0107")
        buf.write("\7u\2\2\u0107\u0109\7g\2\2\u0108\u00f6\3\2\2\2\u0108\u00fa")
        buf.write("\3\2\2\2\u0108\u00fe\3\2\2\2\u0108\u0103\3\2\2\2\u0109")
        buf.write("P\3\2\2\2\u010a\u0110\5G$\2\u010b\u010f\5G$\2\u010c\u010f")
        buf.write("\5I%\2\u010d\u010f\t\6\2\2\u010e\u010b\3\2\2\2\u010e\u010c")
        buf.write("\3\2\2\2\u010e\u010d\3\2\2\2\u010f\u0112\3\2\2\2\u0110")
        buf.write("\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111R\3\2\2\2\u0112")
        buf.write("\u0110\3\2\2\2\u0113\u011c\5M\'\2\u0114\u0118\5K&\2\u0115")
        buf.write("\u0117\5I%\2\u0116\u0115\3\2\2\2\u0117\u011a\3\2\2\2\u0118")
        buf.write("\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011c\3\2\2\2")
        buf.write("\u011a\u0118\3\2\2\2\u011b\u0113\3\2\2\2\u011b\u0114\3")
        buf.write("\2\2\2\u011cT\3\2\2\2\u011d\u0121\5K&\2\u011e\u0120\5")
        buf.write("I%\2\u011f\u011e\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0128\3\2\2\2\u0123")
        buf.write("\u0121\3\2\2\2\u0124\u0126\5M\'\2\u0125\u0124\3\2\2\2")
        buf.write("\u0125\u0126\3\2\2\2\u0126\u0128\3\2\2\2\u0127\u011d\3")
        buf.write("\2\2\2\u0127\u0125\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012b")
        buf.write("\7\60\2\2\u012a\u012c\5I%\2\u012b\u012a\3\2\2\2\u012c")
        buf.write("\u012d\3\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2")
        buf.write("\u012eV\3\2\2\2\u012f\u0134\t\2\2\2\u0130\u0133\5E#\2")
        buf.write("\u0131\u0133\n\2\2\2\u0132\u0130\3\2\2\2\u0132\u0131\3")
        buf.write("\2\2\2\u0133\u0136\3\2\2\2\u0134\u0135\3\2\2\2\u0134\u0132")
        buf.write("\3\2\2\2\u0135\u0137\3\2\2\2\u0136\u0134\3\2\2\2\u0137")
        buf.write("\u0138\t\2\2\2\u0138X\3\2\2\2\u0139\u013a\7\61\2\2\u013a")
        buf.write("\u013b\7,\2\2\u013b\u013f\3\2\2\2\u013c\u013e\13\2\2\2")
        buf.write("\u013d\u013c\3\2\2\2\u013e\u0141\3\2\2\2\u013f\u0140\3")
        buf.write("\2\2\2\u013f\u013d\3\2\2\2\u0140\u0142\3\2\2\2\u0141\u013f")
        buf.write("\3\2\2\2\u0142\u0143\7,\2\2\u0143\u0144\7\61\2\2\u0144")
        buf.write("\u0145\3\2\2\2\u0145\u0146\b-\2\2\u0146Z\3\2\2\2\u0147")
        buf.write("\u0148\7\61\2\2\u0148\u0149\7\61\2\2\u0149\u014d\3\2\2")
        buf.write("\2\u014a\u014c\n\7\2\2\u014b\u014a\3\2\2\2\u014c\u014f")
        buf.write("\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e")
        buf.write("\u0150\3\2\2\2\u014f\u014d\3\2\2\2\u0150\u0151\b.\2\2")
        buf.write("\u0151\\\3\2\2\2\u0152\u0154\t\b\2\2\u0153\u0152\3\2\2")
        buf.write("\2\u0154\u0155\3\2\2\2\u0155\u0153\3\2\2\2\u0155\u0156")
        buf.write("\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0158\b/\2\2\u0158")
        buf.write("^\3\2\2\2\22\2\u00f0\u0108\u010e\u0110\u0118\u011b\u0121")
        buf.write("\u0125\u0127\u012d\u0132\u0134\u013f\u014d\u0155\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class cocoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    Boolean = 34
    Identifier = 35
    Integer = 36
    Decimal = 37
    String = 38
    Comment = 39
    LineComment = 40
    WS = 41

    modeNames = [ u"DEFAULT_MODE" ]

    literalNames = [ u"<INVALID>",
            "'{'", "'}'", "'forbid'", "'message'", "'require'", "'find'", 
            "'where'", "'in'", "'('", "','", "')'", "'='", "'not'", "'and'", 
            "'or'", "'is'", "'before'", "'after'", "'between'", "'-'", "'<'", 
            "'>'", "'<='", "'>='", "'=='", "'!='", "'not in'", "'match'", 
            "'not match'", "'.'", "'ignore'", "'['", "']'" ]

    symbolicNames = [ u"<INVALID>",
            "Boolean", "Identifier", "Integer", "Decimal", "String", "Comment", 
            "LineComment", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "EscapeSequence", "Letter", "Digit", "NonZeroDigit", 
                  "ZeroDigit", "Boolean", "Identifier", "Integer", "Decimal", 
                  "String", "Comment", "LineComment", "WS" ]

    grammarFileName = "coco.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


