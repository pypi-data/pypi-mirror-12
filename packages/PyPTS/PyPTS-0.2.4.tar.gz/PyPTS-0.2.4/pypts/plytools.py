import numpy as np
from pypts.tissue import Tissue

def save(tissue, file_name):
    """
    Saves the tissue to a PLY file
    """
    with open(file_name, 'w') as ply_file:
        print ('Saving tissue to PLY file \'' + file_name + '\'')

        # Used as buffer to collect the contents of the PLY file
        ply = []

        # Compose PLY header
        ply.append('ply\n')
        ply.append('format ascii 1.0\n')
        ply.append('comment Generated by PyPTS.plytools\n')
        ply.append('comment https://pypi.python.org/pypi/PyPTS/\n')
        if tissue.num_nodes is not 0:
            ply.append('element vertex ' + str(tissue.num_nodes) + '\n')
            ply.append('property float x\n')
            ply.append('property float y\n')
            ply.append('property float z\n')
            # TODO: node attributes as properties

        if tissue.num_cells is not 0:
            # Necessary header info for cells and their nodes
            ply.append('element face ' + str(tissue.num_cells) + '\n')
            ply.append('property list uchar int vertex_index\n')

            # Header info for optional cell attributes
            for attr_name, attr_vals in tissue.cells_attributes.iteritems():
                # Look at kind of dtype to cover precision differences
                if attr_vals.dtype.kind == 'i':
                    # Some kind of integer property
                    ply.append('property int ' + attr_name + '\n')
                elif attr_vals.dtype.kind == 'f':
                    # Some kind of float property
                    ply.append('property float ' + attr_name + '\n')
                else:
                    # I don't know what to do with this one
                    print('Cell attribute \'' + attr_name + '\' of type \'' \
                          + attr_vals.dtype.name + \
                          '\' not supported for PLY output; will be ignored.')

        ply.append('end_header\n')

        # Compose PLY data: NODES
        for n_idx in tissue.nodes_idx:
            ply.append(str(tissue.nodes_xy[n_idx, 0]) + ' ' + \
                       str(tissue.nodes_xy[n_idx, 1]) + ' 0.0\n')
            # TODO: node attributes as properties

        # Compose PLY data: CELLS
        for c_idx in tissue.cells_idx:
            # First int is the number of nodes to come
            ply.append(str(tissue.cells_num_nodes[c_idx]))
            # Following ints are the index values of nodes
            for cn_id in tissue.cells_nodes[c_idx]:
                ply.append(' ' + str(cn_id))

            # Cell attribute values
            for attr_name, attr_vals in tissue.cells_attributes.iteritems():
                # Look at kind of dtype to cover precision differences
                if attr_vals.dtype.kind in ['i', 'f']:
                    # Some kind of integer / float property
                    ply.append(' ' + str(attr_vals[c_idx]))
                else:
                    # Ignore, a warning was already printed before
                    pass
            # Next cell
            ply.append('\n')

        # Dump buffer to file
        ply_file.writelines(ply)

def load(file_name):
    """
    Loads a tissue from a PLY file
    """
    t = Tissue()

    return t

