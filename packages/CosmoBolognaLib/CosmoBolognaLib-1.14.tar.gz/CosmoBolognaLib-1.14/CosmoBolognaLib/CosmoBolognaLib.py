# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CosmoBolognaLib', [dirname(__file__)])
        except ImportError:
            import _CosmoBolognaLib
            return _CosmoBolognaLib
        if fp is not None:
            try:
                _mod = imp.load_module('_CosmoBolognaLib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CosmoBolognaLib = swig_import_helper()
    del swig_import_helper
else:
    import _CosmoBolognaLib
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _CosmoBolognaLib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CosmoBolognaLib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CosmoBolognaLib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CosmoBolognaLib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CosmoBolognaLib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CosmoBolognaLib.SwigPyIterator_copy(self)

    def next(self):
        return _CosmoBolognaLib.SwigPyIterator_next(self)

    def __next__(self):
        return _CosmoBolognaLib.SwigPyIterator___next__(self)

    def previous(self):
        return _CosmoBolognaLib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CosmoBolognaLib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CosmoBolognaLib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CosmoBolognaLib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CosmoBolognaLib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CosmoBolognaLib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CosmoBolognaLib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CosmoBolognaLib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _CosmoBolognaLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_CosmoBolognaLib.SHARED_PTR_DISOWN_swigconstant(_CosmoBolognaLib)
SHARED_PTR_DISOWN = _CosmoBolognaLib.SHARED_PTR_DISOWN

def WarningMsg(msg):
    return _CosmoBolognaLib.WarningMsg(msg)
WarningMsg = _CosmoBolognaLib.WarningMsg

def ErrorMsg(msg):
    return _CosmoBolognaLib.ErrorMsg(msg)
ErrorMsg = _CosmoBolognaLib.ErrorMsg

def Beep():
    return _CosmoBolognaLib.Beep()
Beep = _CosmoBolognaLib.Beep

def Exit():
    return _CosmoBolognaLib.Exit()
Exit = _CosmoBolognaLib.Exit

def isSet(*args):
    return _CosmoBolognaLib.isSet(*args)
isSet = _CosmoBolognaLib.isSet

def ShortSwap(arg1):
    return _CosmoBolognaLib.ShortSwap(arg1)
ShortSwap = _CosmoBolognaLib.ShortSwap

def IntSwap(arg1):
    return _CosmoBolognaLib.IntSwap(arg1)
IntSwap = _CosmoBolognaLib.IntSwap

def LongSwap(arg1):
    return _CosmoBolognaLib.LongSwap(arg1)
LongSwap = _CosmoBolognaLib.LongSwap

def LongLongSwap(arg1):
    return _CosmoBolognaLib.LongLongSwap(arg1)
LongLongSwap = _CosmoBolognaLib.LongLongSwap

def FloatSwap(arg1):
    return _CosmoBolognaLib.FloatSwap(arg1)
FloatSwap = _CosmoBolognaLib.FloatSwap

def DoubleSwap(arg1):
    return _CosmoBolognaLib.DoubleSwap(arg1)
DoubleSwap = _CosmoBolognaLib.DoubleSwap

def interpolated(*args):
    return _CosmoBolognaLib.interpolated(*args)
interpolated = _CosmoBolognaLib.interpolated

def interpolated_2D(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _CosmoBolognaLib.interpolated_2D(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
interpolated_2D = _CosmoBolognaLib.interpolated_2D

def checkIO(arg1, arg2):
    return _CosmoBolognaLib.checkIO(arg1, arg2)
checkIO = _CosmoBolognaLib.checkIO

def convert_map_gnuplot_sm(arg1, arg2):
    return _CosmoBolognaLib.convert_map_gnuplot_sm(arg1, arg2)
convert_map_gnuplot_sm = _CosmoBolognaLib.convert_map_gnuplot_sm

def set_EnvVar(arg1):
    return _CosmoBolognaLib.set_EnvVar(arg1)
set_EnvVar = _CosmoBolognaLib.set_EnvVar

def check_EnvVar(arg1):
    return _CosmoBolognaLib.check_EnvVar(arg1)
check_EnvVar = _CosmoBolognaLib.check_EnvVar

def used_memory(arg1):
    return _CosmoBolognaLib.used_memory(arg1)
used_memory = _CosmoBolognaLib.used_memory

def check_memory(*args):
    return _CosmoBolognaLib.check_memory(*args)
check_memory = _CosmoBolognaLib.check_memory

def random_numbers(arg1, arg2, arg3, arg4, arg5, n_min=-1.e30, n_max=1.e30):
    return _CosmoBolognaLib.random_numbers(arg1, arg2, arg3, arg4, arg5, n_min, n_max)
random_numbers = _CosmoBolognaLib.random_numbers

def fullpath(arg1, isDir=1):
    return _CosmoBolognaLib.fullpath(arg1, isDir)
fullpath = _CosmoBolognaLib.fullpath

def gauleg(arg1, arg2, arg3, arg4, arg5):
    return _CosmoBolognaLib.gauleg(arg1, arg2, arg3, arg4, arg5)
gauleg = _CosmoBolognaLib.gauleg

def unique_unsorted(*args):
    return _CosmoBolognaLib.unique_unsorted(*args)
unique_unsorted = _CosmoBolognaLib.unique_unsorted
class CL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["VV"] = _CosmoBolognaLib.CL_VV_set
    __swig_getmethods__["VV"] = _CosmoBolognaLib.CL_VV_get
    if _newclass:
        VV = _swig_property(_CosmoBolognaLib.CL_VV_get, _CosmoBolognaLib.CL_VV_set)

    def __init__(self, vv):
        this = _CosmoBolognaLib.new_CL(vv)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_CL
    __del__ = lambda self: None
CL_swigregister = _CosmoBolognaLib.CL_swigregister
CL_swigregister(CL)


def __lt__(arg1, arg2):
    return _CosmoBolognaLib.__lt__(arg1, arg2)
__lt__ = _CosmoBolognaLib.__lt__

def sort_2vectors(arg1, arg2, arg3):
    return _CosmoBolognaLib.sort_2vectors(arg1, arg2, arg3)
sort_2vectors = _CosmoBolognaLib.sort_2vectors

def sort_3vectors(arg1, arg2, arg3, arg4):
    return _CosmoBolognaLib.sort_3vectors(arg1, arg2, arg3, arg4)
sort_3vectors = _CosmoBolognaLib.sort_3vectors

def sort_4vectors(arg1, arg2, arg3, arg4, arg5):
    return _CosmoBolognaLib.sort_4vectors(arg1, arg2, arg3, arg4, arg5)
sort_4vectors = _CosmoBolognaLib.sort_4vectors

def __mul__(*args):
    return _CosmoBolognaLib.__mul__(*args)
__mul__ = _CosmoBolognaLib.__mul__

def invert_matrix(*args):
    return _CosmoBolognaLib.invert_matrix(*args)
invert_matrix = _CosmoBolognaLib.invert_matrix

def invert_small_matrix(arg1, arg2, prec=1.e-10):
    return _CosmoBolognaLib.invert_small_matrix(arg1, arg2, prec)
invert_small_matrix = _CosmoBolognaLib.invert_small_matrix

def covariance_matrix(*args):
    return _CosmoBolognaLib.covariance_matrix(*args)
covariance_matrix = _CosmoBolognaLib.covariance_matrix

def read_cov(arg1, arg2, arg3, arg4, arg5):
    return _CosmoBolognaLib.read_cov(arg1, arg2, arg3, arg4, arg5)
read_cov = _CosmoBolognaLib.read_cov

def fill_distr(*args):
    return _CosmoBolognaLib.fill_distr(*args)
fill_distr = _CosmoBolognaLib.fill_distr

def find_index(arg1, arg2, arg3, arg4, arg5):
    return _CosmoBolognaLib.find_index(arg1, arg2, arg3, arg4, arg5)
find_index = _CosmoBolognaLib.find_index

def Moment(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _CosmoBolognaLib.Moment(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
Moment = _CosmoBolognaLib.Moment

def linearfit(xx):
    return _CosmoBolognaLib.linearfit(xx)
linearfit = _CosmoBolognaLib.linearfit

def quadratic(xx):
    return _CosmoBolognaLib.quadratic(xx)
quadratic = _CosmoBolognaLib.quadratic

def cubicfit(xx):
    return _CosmoBolognaLib.cubicfit(xx)
cubicfit = _CosmoBolognaLib.cubicfit

def measure_var_function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _CosmoBolognaLib.measure_var_function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
measure_var_function = _CosmoBolognaLib.measure_var_function

def quad_fit(arg1, arg2, arg3, arg4, arg5, arg6):
    return _CosmoBolognaLib.quad_fit(arg1, arg2, arg3, arg4, arg5, arg6)
quad_fit = _CosmoBolognaLib.quad_fit

def gaussian_fit(arg1, arg2, arg3, arg4):
    return _CosmoBolognaLib.gaussian_fit(arg1, arg2, arg3, arg4)
gaussian_fit = _CosmoBolognaLib.gaussian_fit

def gaussian_convolution(arg1, arg2, arg3, arg4):
    return _CosmoBolognaLib.gaussian_convolution(arg1, arg2, arg3, arg4)
gaussian_convolution = _CosmoBolognaLib.gaussian_convolution

def distribution(*args):
    return _CosmoBolognaLib.distribution(*args)
distribution = _CosmoBolognaLib.distribution

def MC_Int(*args):
    return _CosmoBolognaLib.MC_Int(*args)
MC_Int = _CosmoBolognaLib.MC_Int

def D1(arg1, arg2, arg3, arg4, arg5, arg6):
    return _CosmoBolognaLib.D1(arg1, arg2, arg3, arg4, arg5, arg6)
D1 = _CosmoBolognaLib.D1

def D2(arg1, arg2, arg3, arg4, arg5, arg6):
    return _CosmoBolognaLib.D2(arg1, arg2, arg3, arg4, arg5, arg6)
D2 = _CosmoBolognaLib.D2

def Deriv(arg1, arg2, arg3, arg4, arg5, Num=-1, stepsize=1.):
    return _CosmoBolognaLib.Deriv(arg1, arg2, arg3, arg4, arg5, Num, stepsize)
Deriv = _CosmoBolognaLib.Deriv

def bin_function(arg1, func, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _CosmoBolognaLib.bin_function(arg1, func, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
bin_function = _CosmoBolognaLib.bin_function

def bin_function_2D(arg1, func, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _CosmoBolognaLib.bin_function_2D(arg1, func, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
bin_function_2D = _CosmoBolognaLib.bin_function_2D

def func_grid_lin(arg1, arg2):
    return _CosmoBolognaLib.func_grid_lin(arg1, arg2)
func_grid_lin = _CosmoBolognaLib.func_grid_lin

def func_grid_loglin(arg1, arg2):
    return _CosmoBolognaLib.func_grid_loglin(arg1, arg2)
func_grid_loglin = _CosmoBolognaLib.func_grid_loglin

def func_grid_log(arg1, arg2):
    return _CosmoBolognaLib.func_grid_log(arg1, arg2)
func_grid_log = _CosmoBolognaLib.func_grid_log

def func_grid_lin_2D(arg1, arg2, arg3):
    return _CosmoBolognaLib.func_grid_lin_2D(arg1, arg2, arg3)
func_grid_lin_2D = _CosmoBolognaLib.func_grid_lin_2D

def func_grid_loglin_2D(arg1, arg2, arg3):
    return _CosmoBolognaLib.func_grid_loglin_2D(arg1, arg2, arg3)
func_grid_loglin_2D = _CosmoBolognaLib.func_grid_loglin_2D

def func_grid_log_2D(arg1, arg2, arg3):
    return _CosmoBolognaLib.func_grid_log_2D(arg1, arg2, arg3)
func_grid_log_2D = _CosmoBolognaLib.func_grid_log_2D

def convolution(arg1, arg2, arg3, arg4):
    return _CosmoBolognaLib.convolution(arg1, arg2, arg3, arg4)
convolution = _CosmoBolognaLib.convolution

def polar_coord(*args):
    return _CosmoBolognaLib.polar_coord(*args)
polar_coord = _CosmoBolognaLib.polar_coord

def cartesian_coord(*args):
    return _CosmoBolognaLib.cartesian_coord(*args)
cartesian_coord = _CosmoBolognaLib.cartesian_coord

def eq2sdss(arg1, arg2, arg3, arg4):
    return _CosmoBolognaLib.eq2sdss(arg1, arg2, arg3, arg4)
eq2sdss = _CosmoBolognaLib.eq2sdss

def sdss2eq(arg1, arg2, arg3, arg4):
    return _CosmoBolognaLib.sdss2eq(arg1, arg2, arg3, arg4)
sdss2eq = _CosmoBolognaLib.sdss2eq

def sdss_stripe(arg1, arg2, arg3, arg4):
    return _CosmoBolognaLib.sdss_stripe(arg1, arg2, arg3, arg4)
sdss_stripe = _CosmoBolognaLib.sdss_stripe

def xi_from_Pk(*args):
    return _CosmoBolognaLib.xi_from_Pk(*args)
xi_from_Pk = _CosmoBolognaLib.xi_from_Pk

def Pk_from_xi(*args):
    return _CosmoBolognaLib.Pk_from_xi(*args)
Pk_from_xi = _CosmoBolognaLib.Pk_from_xi

def func_xi_GSL(arg1, arg2):
    return _CosmoBolognaLib.func_xi_GSL(arg1, arg2)
func_xi_GSL = _CosmoBolognaLib.func_xi_GSL

def func_SSM_GSL(arg1, arg2):
    return _CosmoBolognaLib.func_SSM_GSL(arg1, arg2)
func_SSM_GSL = _CosmoBolognaLib.func_SSM_GSL

def wp(*args):
    return _CosmoBolognaLib.wp(*args)
wp = _CosmoBolognaLib.wp

def sigmaR(arg1, arg2, arg3, arg4):
    return _CosmoBolognaLib.sigmaR(arg1, arg2, arg3, arg4)
sigmaR = _CosmoBolognaLib.sigmaR

def xi_projected_powerlaw(arg1, arg2, arg3):
    return _CosmoBolognaLib.xi_projected_powerlaw(arg1, arg2, arg3)
xi_projected_powerlaw = _CosmoBolognaLib.xi_projected_powerlaw

def xi_ratio(*args):
    return _CosmoBolognaLib.xi_ratio(*args)
xi_ratio = _CosmoBolognaLib.xi_ratio

def error_xi_ratio(arg1, arg2):
    return _CosmoBolognaLib.error_xi_ratio(arg1, arg2)
error_xi_ratio = _CosmoBolognaLib.error_xi_ratio

def barred_xi_direct(arg1, arg2, arg3, rAPP=0., r0=-1., gamma=1.):
    return _CosmoBolognaLib.barred_xi_direct(arg1, arg2, arg3, rAPP, r0, gamma)
barred_xi_direct = _CosmoBolognaLib.barred_xi_direct

def barred_xi__direct(arg1, arg2, arg3, rAPP=0., r0=-1., gamma=1.):
    return _CosmoBolognaLib.barred_xi__direct(arg1, arg2, arg3, rAPP, r0, gamma)
barred_xi__direct = _CosmoBolognaLib.barred_xi__direct

def barred_xi_(arg1, arg2, arg3, rAPP=0., r0=-1., gamma=1.):
    return _CosmoBolognaLib.barred_xi_(arg1, arg2, arg3, rAPP, r0, gamma)
barred_xi_ = _CosmoBolognaLib.barred_xi_

def barred_xi__(arg1, arg2, arg3, rAPP=0., r0=-1., gamma=1.):
    return _CosmoBolognaLib.barred_xi__(arg1, arg2, arg3, rAPP, r0, gamma)
barred_xi__ = _CosmoBolognaLib.barred_xi__

def multipole_xi0(*args):
    return _CosmoBolognaLib.multipole_xi0(*args)
multipole_xi0 = _CosmoBolognaLib.multipole_xi0

def multipole_xi2(*args):
    return _CosmoBolognaLib.multipole_xi2(*args)
multipole_xi2 = _CosmoBolognaLib.multipole_xi2

def multipole_xi4(*args):
    return _CosmoBolognaLib.multipole_xi4(*args)
multipole_xi4 = _CosmoBolognaLib.multipole_xi4

def error_multipole_xi0(*args):
    return _CosmoBolognaLib.error_multipole_xi0(*args)
error_multipole_xi0 = _CosmoBolognaLib.error_multipole_xi0

def error_multipole_xi2(*args):
    return _CosmoBolognaLib.error_multipole_xi2(*args)
error_multipole_xi2 = _CosmoBolognaLib.error_multipole_xi2

def error_multipole_xi4(*args):
    return _CosmoBolognaLib.error_multipole_xi4(*args)
error_multipole_xi4 = _CosmoBolognaLib.error_multipole_xi4

def multipoles(arg1, arg2, arg3):
    return _CosmoBolognaLib.multipoles(arg1, arg2, arg3)
multipoles = _CosmoBolognaLib.multipoles

def multipole_xi0_model(*args):
    return _CosmoBolognaLib.multipole_xi0_model(*args)
multipole_xi0_model = _CosmoBolognaLib.multipole_xi0_model

def multipole_xi2_model(arg1, arg2, arg3):
    return _CosmoBolognaLib.multipole_xi2_model(arg1, arg2, arg3)
multipole_xi2_model = _CosmoBolognaLib.multipole_xi2_model

def multipole_xi4_model(arg1, arg2, arg3, arg4):
    return _CosmoBolognaLib.multipole_xi4_model(arg1, arg2, arg3, arg4)
multipole_xi4_model = _CosmoBolognaLib.multipole_xi4_model

def xi2D_lin_model(*args):
    return _CosmoBolognaLib.xi2D_lin_model(*args)
xi2D_lin_model = _CosmoBolognaLib.xi2D_lin_model

def xi2D_model(*args):
    return _CosmoBolognaLib.xi2D_model(*args)
xi2D_model = _CosmoBolognaLib.xi2D_model

def f_v(*args):
    return _CosmoBolognaLib.f_v(*args)
f_v = _CosmoBolognaLib.f_v

def f_star(arg1, arg2, arg3):
    return _CosmoBolognaLib.f_star(arg1, arg2, arg3)
f_star = _CosmoBolognaLib.f_star

def b_nl(arg1, arg2, bB=10., bC=4.):
    return _CosmoBolognaLib.b_nl(arg1, arg2, bB, bC)
b_nl = _CosmoBolognaLib.b_nl

def relative_error_beta(arg1, arg2, arg3):
    return _CosmoBolognaLib.relative_error_beta(arg1, arg2, arg3)
relative_error_beta = _CosmoBolognaLib.relative_error_beta
class STR_grid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_grid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_xx"] = _CosmoBolognaLib.STR_grid__xx_set
    __swig_getmethods__["_xx"] = _CosmoBolognaLib.STR_grid__xx_get
    if _newclass:
        _xx = _swig_property(_CosmoBolognaLib.STR_grid__xx_get, _CosmoBolognaLib.STR_grid__xx_set)
    __swig_setmethods__["_yy"] = _CosmoBolognaLib.STR_grid__yy_set
    __swig_getmethods__["_yy"] = _CosmoBolognaLib.STR_grid__yy_get
    if _newclass:
        _yy = _swig_property(_CosmoBolognaLib.STR_grid__yy_get, _CosmoBolognaLib.STR_grid__yy_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_grid()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_grid
    __del__ = lambda self: None
STR_grid_swigregister = _CosmoBolognaLib.STR_grid_swigregister
STR_grid_swigregister(STR_grid)

class STR_grid_2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_grid_2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_grid_2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_xx1"] = _CosmoBolognaLib.STR_grid_2D__xx1_set
    __swig_getmethods__["_xx1"] = _CosmoBolognaLib.STR_grid_2D__xx1_get
    if _newclass:
        _xx1 = _swig_property(_CosmoBolognaLib.STR_grid_2D__xx1_get, _CosmoBolognaLib.STR_grid_2D__xx1_set)
    __swig_setmethods__["_xx2"] = _CosmoBolognaLib.STR_grid_2D__xx2_set
    __swig_getmethods__["_xx2"] = _CosmoBolognaLib.STR_grid_2D__xx2_get
    if _newclass:
        _xx2 = _swig_property(_CosmoBolognaLib.STR_grid_2D__xx2_get, _CosmoBolognaLib.STR_grid_2D__xx2_set)
    __swig_setmethods__["_yy"] = _CosmoBolognaLib.STR_grid_2D__yy_set
    __swig_getmethods__["_yy"] = _CosmoBolognaLib.STR_grid_2D__yy_get
    if _newclass:
        _yy = _swig_property(_CosmoBolognaLib.STR_grid_2D__yy_get, _CosmoBolognaLib.STR_grid_2D__yy_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_grid_2D()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_grid_2D
    __del__ = lambda self: None
STR_grid_2D_swigregister = _CosmoBolognaLib.STR_grid_2D_swigregister
STR_grid_2D_swigregister(STR_grid_2D)

class STR_xi0_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_xi0_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_xi0_model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bias_sigma8"] = _CosmoBolognaLib.STR_xi0_model_bias_sigma8_set
    __swig_getmethods__["bias_sigma8"] = _CosmoBolognaLib.STR_xi0_model_bias_sigma8_get
    if _newclass:
        bias_sigma8 = _swig_property(_CosmoBolognaLib.STR_xi0_model_bias_sigma8_get, _CosmoBolognaLib.STR_xi0_model_bias_sigma8_set)
    __swig_setmethods__["sigma8z"] = _CosmoBolognaLib.STR_xi0_model_sigma8z_set
    __swig_getmethods__["sigma8z"] = _CosmoBolognaLib.STR_xi0_model_sigma8z_get
    if _newclass:
        sigma8z = _swig_property(_CosmoBolognaLib.STR_xi0_model_sigma8z_get, _CosmoBolognaLib.STR_xi0_model_sigma8z_set)
    __swig_setmethods__["xi_DM"] = _CosmoBolognaLib.STR_xi0_model_xi_DM_set
    __swig_getmethods__["xi_DM"] = _CosmoBolognaLib.STR_xi0_model_xi_DM_get
    if _newclass:
        xi_DM = _swig_property(_CosmoBolognaLib.STR_xi0_model_xi_DM_get, _CosmoBolognaLib.STR_xi0_model_xi_DM_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_xi0_model()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_xi0_model
    __del__ = lambda self: None
STR_xi0_model_swigregister = _CosmoBolognaLib.STR_xi0_model_swigregister
STR_xi0_model_swigregister(STR_xi0_model)

class STR_xi2D_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_xi2D_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_xi2D_model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rp"] = _CosmoBolognaLib.STR_xi2D_model_rp_set
    __swig_getmethods__["rp"] = _CosmoBolognaLib.STR_xi2D_model_rp_get
    if _newclass:
        rp = _swig_property(_CosmoBolognaLib.STR_xi2D_model_rp_get, _CosmoBolognaLib.STR_xi2D_model_rp_set)
    __swig_setmethods__["pi"] = _CosmoBolognaLib.STR_xi2D_model_pi_set
    __swig_getmethods__["pi"] = _CosmoBolognaLib.STR_xi2D_model_pi_get
    if _newclass:
        pi = _swig_property(_CosmoBolognaLib.STR_xi2D_model_pi_get, _CosmoBolognaLib.STR_xi2D_model_pi_set)
    __swig_setmethods__["xi_real"] = _CosmoBolognaLib.STR_xi2D_model_xi_real_set
    __swig_getmethods__["xi_real"] = _CosmoBolognaLib.STR_xi2D_model_xi_real_get
    if _newclass:
        xi_real = _swig_property(_CosmoBolognaLib.STR_xi2D_model_xi_real_get, _CosmoBolognaLib.STR_xi2D_model_xi_real_set)
    __swig_setmethods__["xi_"] = _CosmoBolognaLib.STR_xi2D_model_xi__set
    __swig_getmethods__["xi_"] = _CosmoBolognaLib.STR_xi2D_model_xi__get
    if _newclass:
        xi_ = _swig_property(_CosmoBolognaLib.STR_xi2D_model_xi__get, _CosmoBolognaLib.STR_xi2D_model_xi__set)
    __swig_setmethods__["xi__"] = _CosmoBolognaLib.STR_xi2D_model_xi___set
    __swig_getmethods__["xi__"] = _CosmoBolognaLib.STR_xi2D_model_xi___get
    if _newclass:
        xi__ = _swig_property(_CosmoBolognaLib.STR_xi2D_model_xi___get, _CosmoBolognaLib.STR_xi2D_model_xi___set)
    __swig_setmethods__["P2"] = _CosmoBolognaLib.STR_xi2D_model_P2_set
    __swig_getmethods__["P2"] = _CosmoBolognaLib.STR_xi2D_model_P2_get
    if _newclass:
        P2 = _swig_property(_CosmoBolognaLib.STR_xi2D_model_P2_get, _CosmoBolognaLib.STR_xi2D_model_P2_set)
    __swig_setmethods__["P4"] = _CosmoBolognaLib.STR_xi2D_model_P4_set
    __swig_getmethods__["P4"] = _CosmoBolognaLib.STR_xi2D_model_P4_get
    if _newclass:
        P4 = _swig_property(_CosmoBolognaLib.STR_xi2D_model_P4_get, _CosmoBolognaLib.STR_xi2D_model_P4_set)
    __swig_setmethods__["vel"] = _CosmoBolognaLib.STR_xi2D_model_vel_set
    __swig_getmethods__["vel"] = _CosmoBolognaLib.STR_xi2D_model_vel_get
    if _newclass:
        vel = _swig_property(_CosmoBolognaLib.STR_xi2D_model_vel_get, _CosmoBolognaLib.STR_xi2D_model_vel_set)
    __swig_setmethods__["lim_index_fit"] = _CosmoBolognaLib.STR_xi2D_model_lim_index_fit_set
    __swig_getmethods__["lim_index_fit"] = _CosmoBolognaLib.STR_xi2D_model_lim_index_fit_get
    if _newclass:
        lim_index_fit = _swig_property(_CosmoBolognaLib.STR_xi2D_model_lim_index_fit_get, _CosmoBolognaLib.STR_xi2D_model_lim_index_fit_set)
    __swig_setmethods__["type"] = _CosmoBolognaLib.STR_xi2D_model_type_set
    __swig_getmethods__["type"] = _CosmoBolognaLib.STR_xi2D_model_type_get
    if _newclass:
        type = _swig_property(_CosmoBolognaLib.STR_xi2D_model_type_get, _CosmoBolognaLib.STR_xi2D_model_type_set)
    __swig_setmethods__["step_v"] = _CosmoBolognaLib.STR_xi2D_model_step_v_set
    __swig_getmethods__["step_v"] = _CosmoBolognaLib.STR_xi2D_model_step_v_get
    if _newclass:
        step_v = _swig_property(_CosmoBolognaLib.STR_xi2D_model_step_v_get, _CosmoBolognaLib.STR_xi2D_model_step_v_set)
    __swig_setmethods__["FV"] = _CosmoBolognaLib.STR_xi2D_model_FV_set
    __swig_getmethods__["FV"] = _CosmoBolognaLib.STR_xi2D_model_FV_get
    if _newclass:
        FV = _swig_property(_CosmoBolognaLib.STR_xi2D_model_FV_get, _CosmoBolognaLib.STR_xi2D_model_FV_set)
    __swig_setmethods__["dim"] = _CosmoBolognaLib.STR_xi2D_model_dim_set
    __swig_getmethods__["dim"] = _CosmoBolognaLib.STR_xi2D_model_dim_get
    if _newclass:
        dim = _swig_property(_CosmoBolognaLib.STR_xi2D_model_dim_get, _CosmoBolognaLib.STR_xi2D_model_dim_set)
    __swig_setmethods__["delta_v"] = _CosmoBolognaLib.STR_xi2D_model_delta_v_set
    __swig_getmethods__["delta_v"] = _CosmoBolognaLib.STR_xi2D_model_delta_v_get
    if _newclass:
        delta_v = _swig_property(_CosmoBolognaLib.STR_xi2D_model_delta_v_get, _CosmoBolognaLib.STR_xi2D_model_delta_v_set)
    __swig_setmethods__["bias_nl"] = _CosmoBolognaLib.STR_xi2D_model_bias_nl_set
    __swig_getmethods__["bias_nl"] = _CosmoBolognaLib.STR_xi2D_model_bias_nl_get
    if _newclass:
        bias_nl = _swig_property(_CosmoBolognaLib.STR_xi2D_model_bias_nl_get, _CosmoBolognaLib.STR_xi2D_model_bias_nl_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_xi2D_model()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_xi2D_model
    __del__ = lambda self: None
STR_xi2D_model_swigregister = _CosmoBolognaLib.STR_xi2D_model_swigregister
STR_xi2D_model_swigregister(STR_xi2D_model)

class STR_xi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_xi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_xi, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rr"] = _CosmoBolognaLib.STR_xi_rr_set
    __swig_getmethods__["rr"] = _CosmoBolognaLib.STR_xi_rr_get
    if _newclass:
        rr = _swig_property(_CosmoBolognaLib.STR_xi_rr_get, _CosmoBolognaLib.STR_xi_rr_set)
    __swig_setmethods__["aa"] = _CosmoBolognaLib.STR_xi_aa_set
    __swig_getmethods__["aa"] = _CosmoBolognaLib.STR_xi_aa_get
    if _newclass:
        aa = _swig_property(_CosmoBolognaLib.STR_xi_aa_get, _CosmoBolognaLib.STR_xi_aa_set)
    __swig_setmethods__["lgkk"] = _CosmoBolognaLib.STR_xi_lgkk_set
    __swig_getmethods__["lgkk"] = _CosmoBolognaLib.STR_xi_lgkk_get
    if _newclass:
        lgkk = _swig_property(_CosmoBolognaLib.STR_xi_lgkk_get, _CosmoBolognaLib.STR_xi_lgkk_set)
    __swig_setmethods__["lgPk"] = _CosmoBolognaLib.STR_xi_lgPk_set
    __swig_getmethods__["lgPk"] = _CosmoBolognaLib.STR_xi_lgPk_get
    if _newclass:
        lgPk = _swig_property(_CosmoBolognaLib.STR_xi_lgPk_get, _CosmoBolognaLib.STR_xi_lgPk_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_xi()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_xi
    __del__ = lambda self: None
STR_xi_swigregister = _CosmoBolognaLib.STR_xi_swigregister
STR_xi_swigregister(STR_xi)

class STR_SSM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_SSM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_SSM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["unit"] = _CosmoBolognaLib.STR_SSM_unit_set
    __swig_getmethods__["unit"] = _CosmoBolognaLib.STR_SSM_unit_get
    if _newclass:
        unit = _swig_property(_CosmoBolognaLib.STR_SSM_unit_get, _CosmoBolognaLib.STR_SSM_unit_set)
    __swig_setmethods__["hh"] = _CosmoBolognaLib.STR_SSM_hh_set
    __swig_getmethods__["hh"] = _CosmoBolognaLib.STR_SSM_hh_get
    if _newclass:
        hh = _swig_property(_CosmoBolognaLib.STR_SSM_hh_get, _CosmoBolognaLib.STR_SSM_hh_set)
    __swig_setmethods__["mass"] = _CosmoBolognaLib.STR_SSM_mass_set
    __swig_getmethods__["mass"] = _CosmoBolognaLib.STR_SSM_mass_get
    if _newclass:
        mass = _swig_property(_CosmoBolognaLib.STR_SSM_mass_get, _CosmoBolognaLib.STR_SSM_mass_set)
    __swig_setmethods__["rho"] = _CosmoBolognaLib.STR_SSM_rho_set
    __swig_getmethods__["rho"] = _CosmoBolognaLib.STR_SSM_rho_get
    if _newclass:
        rho = _swig_property(_CosmoBolognaLib.STR_SSM_rho_get, _CosmoBolognaLib.STR_SSM_rho_set)
    __swig_setmethods__["n_spec"] = _CosmoBolognaLib.STR_SSM_n_spec_set
    __swig_getmethods__["n_spec"] = _CosmoBolognaLib.STR_SSM_n_spec_get
    if _newclass:
        n_spec = _swig_property(_CosmoBolognaLib.STR_SSM_n_spec_get, _CosmoBolognaLib.STR_SSM_n_spec_set)
    __swig_setmethods__["lgkk"] = _CosmoBolognaLib.STR_SSM_lgkk_set
    __swig_getmethods__["lgkk"] = _CosmoBolognaLib.STR_SSM_lgkk_get
    if _newclass:
        lgkk = _swig_property(_CosmoBolognaLib.STR_SSM_lgkk_get, _CosmoBolognaLib.STR_SSM_lgkk_set)
    __swig_setmethods__["lgPk"] = _CosmoBolognaLib.STR_SSM_lgPk_set
    __swig_getmethods__["lgPk"] = _CosmoBolognaLib.STR_SSM_lgPk_get
    if _newclass:
        lgPk = _swig_property(_CosmoBolognaLib.STR_SSM_lgPk_get, _CosmoBolognaLib.STR_SSM_lgPk_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_SSM()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_SSM
    __del__ = lambda self: None
STR_SSM_swigregister = _CosmoBolognaLib.STR_SSM_swigregister
STR_SSM_swigregister(STR_SSM)

class Cosmology(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cosmology, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cosmology, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Cosmology(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Cosmology
    __del__ = lambda self: None

    def Omega_matter(self):
        return _CosmoBolognaLib.Cosmology_Omega_matter(self)

    def Omega_baryon(self):
        return _CosmoBolognaLib.Cosmology_Omega_baryon(self)

    def Omega_neutrinos(self):
        return _CosmoBolognaLib.Cosmology_Omega_neutrinos(self)

    def massless_neutrinos(self):
        return _CosmoBolognaLib.Cosmology_massless_neutrinos(self)

    def massive_neutrinos(self):
        return _CosmoBolognaLib.Cosmology_massive_neutrinos(self)

    def Omega_DE(self):
        return _CosmoBolognaLib.Cosmology_Omega_DE(self)

    def Omega_radiation(self):
        return _CosmoBolognaLib.Cosmology_Omega_radiation(self)

    def Omega_k(self):
        return _CosmoBolognaLib.Cosmology_Omega_k(self)

    def Omega_CDM(self):
        return _CosmoBolognaLib.Cosmology_Omega_CDM(self)

    def H0(self):
        return _CosmoBolognaLib.Cosmology_H0(self)

    def hh(self):
        return _CosmoBolognaLib.Cosmology_hh(self)

    def t_H(self):
        return _CosmoBolognaLib.Cosmology_t_H(self)

    def D_H(self):
        return _CosmoBolognaLib.Cosmology_D_H(self)

    def sigma8(self):
        return _CosmoBolognaLib.Cosmology_sigma8(self)

    def scalar_amp(self):
        return _CosmoBolognaLib.Cosmology_scalar_amp(self)

    def n_spec(self):
        return _CosmoBolognaLib.Cosmology_n_spec(self)

    def w0(self):
        return _CosmoBolognaLib.Cosmology_w0(self)

    def wa(self):
        return _CosmoBolognaLib.Cosmology_wa(self)

    def RhoZero(self):
        return _CosmoBolognaLib.Cosmology_RhoZero(self)

    def fNL(self):
        return _CosmoBolognaLib.Cosmology_fNL(self)

    def type_NG(self):
        return _CosmoBolognaLib.Cosmology_type_NG(self)

    def Pk0_EH(self):
        return _CosmoBolognaLib.Cosmology_Pk0_EH(self)

    def Pk0_CAMB(self):
        return _CosmoBolognaLib.Cosmology_Pk0_CAMB(self)

    def Pk0_MPTbreeze(self):
        return _CosmoBolognaLib.Cosmology_Pk0_MPTbreeze(self)

    def Pk0_CLASS(self):
        return _CosmoBolognaLib.Cosmology_Pk0_CLASS(self)

    def model(self):
        return _CosmoBolognaLib.Cosmology_model(self)

    def unit(self):
        return _CosmoBolognaLib.Cosmology_unit(self)

    def print_parameters(self):
        return _CosmoBolognaLib.Cosmology_print_parameters(self)

    def set_Omega(self, Omega_matter):
        return _CosmoBolognaLib.Cosmology_set_Omega(self, Omega_matter)

    def set_OmegaB(self, Omega_baryon):
        return _CosmoBolognaLib.Cosmology_set_OmegaB(self, Omega_baryon)

    def set_OmegaM(self, Omega_matter):
        return _CosmoBolognaLib.Cosmology_set_OmegaM(self, Omega_matter)

    def set_OmegaDE(self, Omega_DE):
        return _CosmoBolognaLib.Cosmology_set_OmegaDE(self, Omega_DE)

    def set_OmegaNu(self, Omega_neutrinos, massless_neutrinos, massive_neutrinos):
        return _CosmoBolognaLib.Cosmology_set_OmegaNu(self, Omega_neutrinos, massless_neutrinos, massive_neutrinos)

    def set_H0(self, H0):
        return _CosmoBolognaLib.Cosmology_set_H0(self, H0)

    def set_sigma8(self, sigma8):
        return _CosmoBolognaLib.Cosmology_set_sigma8(self, sigma8)

    def set_scalar_amp(self, scalar_amp):
        return _CosmoBolognaLib.Cosmology_set_scalar_amp(self, scalar_amp)

    def set_w0(self, w0):
        return _CosmoBolognaLib.Cosmology_set_w0(self, w0)

    def set_wa(self, wa):
        return _CosmoBolognaLib.Cosmology_set_wa(self, wa)

    def set_RhoZero(self, RhoZero):
        return _CosmoBolognaLib.Cosmology_set_RhoZero(self, RhoZero)

    def set_fNL(self, fNL):
        return _CosmoBolognaLib.Cosmology_set_fNL(self, fNL)

    def set_type_NG(self, type_NG):
        return _CosmoBolognaLib.Cosmology_set_type_NG(self, type_NG)

    def set_model(self, model):
        return _CosmoBolognaLib.Cosmology_set_model(self, model)

    def set_unit(self, unit):
        return _CosmoBolognaLib.Cosmology_set_unit(self, unit)

    def OmegaM(self, arg2):
        return _CosmoBolognaLib.Cosmology_OmegaM(self, arg2)

    def OmegaDE(self, arg2):
        return _CosmoBolognaLib.Cosmology_OmegaDE(self, arg2)

    def OmegaR(self, arg2):
        return _CosmoBolognaLib.Cosmology_OmegaR(self, arg2)

    def OmegaK(self, arg2):
        return _CosmoBolognaLib.Cosmology_OmegaK(self, arg2)

    def Omega(self, arg2):
        return _CosmoBolognaLib.Cosmology_Omega(self, arg2)

    def Rho(self, arg2, arg3, unit1=1):
        return _CosmoBolognaLib.Cosmology_Rho(self, arg2, arg3, unit1)

    def DeltaR(self, arg2, arg3):
        return _CosmoBolognaLib.Cosmology_DeltaR(self, arg2, arg3)

    def w_CPL(self, arg2):
        return _CosmoBolognaLib.Cosmology_w_CPL(self, arg2)

    def f_DE(self, arg2):
        return _CosmoBolognaLib.Cosmology_f_DE(self, arg2)

    def EE(self, arg2):
        return _CosmoBolognaLib.Cosmology_EE(self, arg2)

    def HH(self, arg2):
        return _CosmoBolognaLib.Cosmology_HH(self, arg2)

    def gg(self, arg2):
        return _CosmoBolognaLib.Cosmology_gg(self, arg2)

    def DD(self, arg2):
        return _CosmoBolognaLib.Cosmology_DD(self, arg2)

    def lookback_time(self, arg2):
        return _CosmoBolognaLib.Cosmology_lookback_time(self, arg2)

    def cosmic_time(self, arg2):
        return _CosmoBolognaLib.Cosmology_cosmic_time(self, arg2)

    def EE2(self, arg2):
        return _CosmoBolognaLib.Cosmology_EE2(self, arg2)

    def qq(self, arg2):
        return _CosmoBolognaLib.Cosmology_qq(self, arg2)

    def Hdot(self, arg2):
        return _CosmoBolognaLib.Cosmology_Hdot(self, arg2)

    def z_acc(self):
        return _CosmoBolognaLib.Cosmology_z_acc(self)

    def z_eq(self):
        return _CosmoBolognaLib.Cosmology_z_eq(self)

    def Mag_Volume_limited(self, arg2, arg3):
        return _CosmoBolognaLib.Cosmology_Mag_Volume_limited(self, arg2, arg3)

    def Lum_bol(self, arg2, arg3):
        return _CosmoBolognaLib.Cosmology_Lum_bol(self, arg2, arg3)

    def Redshift_LCDM(self, arg2, arg3, arg4, go_fast=1, prec=0.0001):
        return _CosmoBolognaLib.Cosmology_Redshift_LCDM(self, arg2, arg3, arg4, go_fast, prec)

    def Redshift(self, *args):
        return _CosmoBolognaLib.Cosmology_Redshift(self, *args)

    def Redshift_time(self, arg2, arg3, arg4):
        return _CosmoBolognaLib.Cosmology_Redshift_time(self, arg2, arg3, arg4)

    def deltac(self, arg2):
        return _CosmoBolognaLib.Cosmology_deltac(self, arg2)

    def Deltavir(self, arg2):
        return _CosmoBolognaLib.Cosmology_Deltavir(self, arg2)

    def D_C(self, arg2):
        return _CosmoBolognaLib.Cosmology_D_C(self, arg2)

    def D_C_LCDM(self, arg2):
        return _CosmoBolognaLib.Cosmology_D_C_LCDM(self, arg2)

    def D_C_table(self, arg2, arg3, arg4, arg5, arg6, arg7):
        return _CosmoBolognaLib.Cosmology_D_C_table(self, arg2, arg3, arg4, arg5, arg6, arg7)

    def D_M(self, arg2):
        return _CosmoBolognaLib.Cosmology_D_M(self, arg2)

    def D_A(self, arg2):
        return _CosmoBolognaLib.Cosmology_D_A(self, arg2)

    def D_L(self, arg2):
        return _CosmoBolognaLib.Cosmology_D_L(self, arg2)

    def D_V(self, arg2):
        return _CosmoBolognaLib.Cosmology_D_V(self, arg2)

    def Distance(self, arg2, arg3):
        return _CosmoBolognaLib.Cosmology_Distance(self, arg2, arg3)

    def Volume(self, *args):
        return _CosmoBolognaLib.Cosmology_Volume(self, *args)

    def max_redshift(self, arg2, arg3, arg4):
        return _CosmoBolognaLib.Cosmology_max_redshift(self, arg2, arg3, arg4)

    def dV_dZdOmega(self, arg2, arg3):
        return _CosmoBolognaLib.Cosmology_dV_dZdOmega(self, arg2, arg3)

    def mass_function_fast(self, *args):
        return _CosmoBolognaLib.Cosmology_mass_function_fast(self, *args)

    def mass_function(self, *args):
        return _CosmoBolognaLib.Cosmology_mass_function(self, *args)

    def n_haloes(self, *args):
        return _CosmoBolognaLib.Cosmology_n_haloes(self, *args)

    def MhaloMin(self, *args):
        return _CosmoBolognaLib.Cosmology_MhaloMin(self, *args)

    def pw(self, arg2, arg3, arg4):
        return _CosmoBolognaLib.Cosmology_pw(self, arg2, arg3, arg4)

    def pz(self, *args):
        return _CosmoBolognaLib.Cosmology_pz(self, *args)

    def cumPw(self, arg2, arg3, arg4):
        return _CosmoBolognaLib.Cosmology_cumPw(self, arg2, arg3, arg4)

    def medianwf(self, arg2, arg3, arg4):
        return _CosmoBolognaLib.Cosmology_medianwf(self, arg2, arg3, arg4)

    def medianzf(self, *args):
        return _CosmoBolognaLib.Cosmology_medianzf(self, *args)

    def wf(self, *args):
        return _CosmoBolognaLib.Cosmology_wf(self, *args)

    def unevolved_mass_function(self, arg2):
        return _CosmoBolognaLib.Cosmology_unevolved_mass_function(self, arg2)

    def concentration(self, arg2, arg3):
        return _CosmoBolognaLib.Cosmology_concentration(self, arg2, arg3)

    def As(self, arg2):
        return _CosmoBolognaLib.Cosmology_As(self, arg2)

    def Pk_UnNorm(self, arg2, arg3, arg4):
        return _CosmoBolognaLib.Cosmology_Pk_UnNorm(self, arg2, arg3, arg4)

    def run_CAMB(self, *args):
        return _CosmoBolognaLib.Cosmology_run_CAMB(self, *args)

    def Table_PkCodes(self, *args):
        return _CosmoBolognaLib.Cosmology_Table_PkCodes(self, *args)

    def Pk_0(self, *args):
        return _CosmoBolognaLib.Cosmology_Pk_0(self, *args)

    def Pk(self, *args):
        return _CosmoBolognaLib.Cosmology_Pk(self, *args)

    def SSR(self, *args):
        return _CosmoBolognaLib.Cosmology_SSR(self, *args)

    def SSR_norm(self, *args):
        return _CosmoBolognaLib.Cosmology_SSR_norm(self, *args)

    def SSM(self, *args):
        return _CosmoBolognaLib.Cosmology_SSM(self, *args)

    def SSM_norm(self, *args):
        return _CosmoBolognaLib.Cosmology_SSM_norm(self, *args)

    def dnSR(self, *args):
        return _CosmoBolognaLib.Cosmology_dnSR(self, *args)

    def dnSM(self, *args):
        return _CosmoBolognaLib.Cosmology_dnSM(self, *args)

    def xi_DM(self, *args):
        return _CosmoBolognaLib.Cosmology_xi_DM(self, *args)

    def xi_DM_DeWiggle(self, *args):
        return _CosmoBolognaLib.Cosmology_xi_DM_DeWiggle(self, *args)

    def get_xi(self, *args):
        return _CosmoBolognaLib.Cosmology_get_xi(self, *args)

    def get_barred_xi(self, *args):
        return _CosmoBolognaLib.Cosmology_get_barred_xi(self, *args)

    def wp_DM(self, *args):
        return _CosmoBolognaLib.Cosmology_wp_DM(self, *args)

    def k_star(self, *args):
        return _CosmoBolognaLib.Cosmology_k_star(self, *args)

    def sigmaR_DM(self, *args):
        return _CosmoBolognaLib.Cosmology_sigmaR_DM(self, *args)

    def sigma8_Pk(self, *args):
        return _CosmoBolognaLib.Cosmology_sigma8_Pk(self, *args)

    def bias_halo(self, *args):
        return _CosmoBolognaLib.Cosmology_bias_halo(self, *args)

    def bias_eff(self, *args):
        return _CosmoBolognaLib.Cosmology_bias_eff(self, *args)

    def linear_growth_rate(self, arg2, kk=-1.):
        return _CosmoBolognaLib.Cosmology_linear_growth_rate(self, arg2, kk)

    def fsigma8(self, *args):
        return _CosmoBolognaLib.Cosmology_fsigma8(self, *args)

    def beta(self, *args):
        return _CosmoBolognaLib.Cosmology_beta(self, *args)

    def error_beta(self, *args):
        return _CosmoBolognaLib.Cosmology_error_beta(self, *args)

    def error_beta_measured(self, *args):
        return _CosmoBolognaLib.Cosmology_error_beta_measured(self, *args)

    def quadrupole(self, *args):
        return _CosmoBolognaLib.Cosmology_quadrupole(self, *args)

    def square_bulk_flow(self, *args):
        return _CosmoBolognaLib.Cosmology_square_bulk_flow(self, *args)

    def square_bulk_flow_Table(self, arg2, arg3, arg4, arg5, arg6):
        return _CosmoBolognaLib.Cosmology_square_bulk_flow_Table(self, arg2, arg3, arg4, arg5, arg6)

    def square_velocity_dispersion(self, *args):
        return _CosmoBolognaLib.Cosmology_square_velocity_dispersion(self, *args)

    def CMN(self, *args):
        return _CosmoBolognaLib.Cosmology_CMN(self, *args)

    def Sn_PT(self, *args):
        return _CosmoBolognaLib.Cosmology_Sn_PT(self, *args)

    def Sigman_PT(self, *args):
        return _CosmoBolognaLib.Cosmology_Sigman_PT(self, *args)

    def xi0_Kaiser(self, *args):
        return _CosmoBolognaLib.Cosmology_xi0_Kaiser(self, *args)

    def xi2D_DispersionModel(self, *args):
        return _CosmoBolognaLib.Cosmology_xi2D_DispersionModel(self, *args)

    def xi_star(self, *args):
        return _CosmoBolognaLib.Cosmology_xi_star(self, *args)

    def xisnl_gnw(self, *args):
        return _CosmoBolognaLib.Cosmology_xisnl_gnw(self, *args)

    def xis_gBAO(self, *args):
        return _CosmoBolognaLib.Cosmology_xis_gBAO(self, *args)

    def xi2D_CW(self, *args):
        return _CosmoBolognaLib.Cosmology_xi2D_CW(self, *args)

    def rs(self, *args):
        return _CosmoBolognaLib.Cosmology_rs(self, *args)

    def rs_EH(self, *args):
        return _CosmoBolognaLib.Cosmology_rs_EH(self, *args)

    def rs_CAMB(self):
        return _CosmoBolognaLib.Cosmology_rs_CAMB(self)

    def ys(self, *args):
        return _CosmoBolognaLib.Cosmology_ys(self, *args)

    def Az(self, arg2):
        return _CosmoBolognaLib.Cosmology_Az(self, arg2)

    def Am(self, *args):
        return _CosmoBolognaLib.Cosmology_Am(self, *args)

    def potential_spectral_amplitude(self, *args):
        return _CosmoBolognaLib.Cosmology_potential_spectral_amplitude(self, *args)

    def bispectrum(self, *args):
        return _CosmoBolognaLib.Cosmology_bispectrum(self, *args)

    def mrk(self, *args):
        return _CosmoBolognaLib.Cosmology_mrk(self, *args)

    def frk(self, *args):
        return _CosmoBolognaLib.Cosmology_frk(self, *args)

    def bias_kernel(self, arg2, arg3):
        return _CosmoBolognaLib.Cosmology_bias_kernel(self, arg2, arg3)

    def frk_test(self, *args):
        return _CosmoBolognaLib.Cosmology_frk_test(self, *args)

    def bias_correction(self, *args):
        return _CosmoBolognaLib.Cosmology_bias_correction(self, *args)

    def skewness(self, *args):
        return _CosmoBolognaLib.Cosmology_skewness(self, *args)

    def dskewnessdM(self, *args):
        return _CosmoBolognaLib.Cosmology_dskewnessdM(self, *args)

    def MF_correction(self, *args):
        return _CosmoBolognaLib.Cosmology_MF_correction(self, *args)

    def VolS(self, arg2):
        return _CosmoBolognaLib.Cosmology_VolS(self, arg2)

    def deltav(self, rho_vm=0.2):
        return _CosmoBolognaLib.Cosmology_deltav(self, rho_vm)

    def r_rL(self, rho_vm=0.2):
        return _CosmoBolognaLib.Cosmology_r_rL(self, rho_vm)

    def f_nu(self, arg2, arg3, arg4):
        return _CosmoBolognaLib.Cosmology_f_nu(self, arg2, arg3, arg4)

    def size_function(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
        return _CosmoBolognaLib.Cosmology_size_function(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
Cosmology_swigregister = _CosmoBolognaLib.Cosmology_swigregister
Cosmology_swigregister(Cosmology)
cvar = _CosmoBolognaLib.cvar
yotta = cvar.yotta
zetta = cvar.zetta
exa = cvar.exa
peta = cvar.peta
tera = cvar.tera
giga = cvar.giga
mega = cvar.mega
kilo = cvar.kilo
ecto = cvar.ecto
deca = cvar.deca
deci = cvar.deci
centi = cvar.centi
milli = cvar.milli
micro = cvar.micro
nano = cvar.nano
pico = cvar.pico
femto = cvar.femto
atto = cvar.atto
zepto = cvar.zepto
yocto = cvar.yocto
fINT = cvar.fINT
fLONG = cvar.fLONG
fDP0 = cvar.fDP0
fDP1 = cvar.fDP1
fDP2 = cvar.fDP2
fDP3 = cvar.fDP3
fDP4 = cvar.fDP4
fDP5 = cvar.fDP5
fDP6 = cvar.fDP6
ee3 = cvar.ee3
pi = cvar.pi
ee = cvar.ee
hbar = cvar.hbar
cc = cvar.cc
kB = cvar.kB
sSB = cvar.sSB
el = cvar.el
alpha = cvar.alpha
epsilon0 = cvar.epsilon0
mu0 = cvar.mu0
NAv = cvar.NAv
GN = cvar.GN
gn = cvar.gn
lP = cvar.lP
MP = cvar.MP
Msol = cvar.Msol
me = cvar.me
mn = cvar.mn
mp = cvar.mp
au = cvar.au
pc = cvar.pc
TCMB = cvar.TCMB
yr = cvar.yr
col_default = cvar.col_default
col_red = cvar.col_red
col_green = cvar.col_green
col_blue = cvar.col_blue


def GSL_bias_kernel_wrapper(arg1, arg2):
    return _CosmoBolognaLib.GSL_bias_kernel_wrapper(arg1, arg2)
GSL_bias_kernel_wrapper = _CosmoBolognaLib.GSL_bias_kernel_wrapper

def func_xi_EH_GSL(arg1, arg2):
    return _CosmoBolognaLib.func_xi_EH_GSL(arg1, arg2)
func_xi_EH_GSL = _CosmoBolognaLib.func_xi_EH_GSL

def func_SSM_EH_GSL(arg1, arg2):
    return _CosmoBolognaLib.func_SSM_EH_GSL(arg1, arg2)
func_SSM_EH_GSL = _CosmoBolognaLib.func_SSM_EH_GSL

def bias_kernel2(arg1, arg2):
    return _CosmoBolognaLib.bias_kernel2(arg1, arg2)
bias_kernel2 = _CosmoBolognaLib.bias_kernel2

def skewness_kernel(arg1, arg2, arg3):
    return _CosmoBolognaLib.skewness_kernel(arg1, arg2, arg3)
skewness_kernel = _CosmoBolognaLib.skewness_kernel
class GSL_f_pars(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GSL_f_pars, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GSL_f_pars, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kt"] = _CosmoBolognaLib.GSL_f_pars_kt_set
    __swig_getmethods__["kt"] = _CosmoBolognaLib.GSL_f_pars_kt_get
    if _newclass:
        kt = _swig_property(_CosmoBolognaLib.GSL_f_pars_kt_get, _CosmoBolognaLib.GSL_f_pars_kt_set)
    __swig_setmethods__["mass"] = _CosmoBolognaLib.GSL_f_pars_mass_set
    __swig_getmethods__["mass"] = _CosmoBolognaLib.GSL_f_pars_mass_get
    if _newclass:
        mass = _swig_property(_CosmoBolognaLib.GSL_f_pars_mass_get, _CosmoBolognaLib.GSL_f_pars_mass_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.GSL_f_pars_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.GSL_f_pars_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.GSL_f_pars_method_Pk_get, _CosmoBolognaLib.GSL_f_pars_method_Pk_set)
    __swig_setmethods__["output_root"] = _CosmoBolognaLib.GSL_f_pars_output_root_set
    __swig_getmethods__["output_root"] = _CosmoBolognaLib.GSL_f_pars_output_root_get
    if _newclass:
        output_root = _swig_property(_CosmoBolognaLib.GSL_f_pars_output_root_get, _CosmoBolognaLib.GSL_f_pars_output_root_set)
    __swig_setmethods__["norm"] = _CosmoBolognaLib.GSL_f_pars_norm_set
    __swig_getmethods__["norm"] = _CosmoBolognaLib.GSL_f_pars_norm_get
    if _newclass:
        norm = _swig_property(_CosmoBolognaLib.GSL_f_pars_norm_get, _CosmoBolognaLib.GSL_f_pars_norm_set)
    __swig_setmethods__["k_min"] = _CosmoBolognaLib.GSL_f_pars_k_min_set
    __swig_getmethods__["k_min"] = _CosmoBolognaLib.GSL_f_pars_k_min_get
    if _newclass:
        k_min = _swig_property(_CosmoBolognaLib.GSL_f_pars_k_min_get, _CosmoBolognaLib.GSL_f_pars_k_min_set)
    __swig_setmethods__["k_max"] = _CosmoBolognaLib.GSL_f_pars_k_max_set
    __swig_getmethods__["k_max"] = _CosmoBolognaLib.GSL_f_pars_k_max_get
    if _newclass:
        k_max = _swig_property(_CosmoBolognaLib.GSL_f_pars_k_max_get, _CosmoBolognaLib.GSL_f_pars_k_max_set)
    __swig_setmethods__["GSL"] = _CosmoBolognaLib.GSL_f_pars_GSL_set
    __swig_getmethods__["GSL"] = _CosmoBolognaLib.GSL_f_pars_GSL_get
    if _newclass:
        GSL = _swig_property(_CosmoBolognaLib.GSL_f_pars_GSL_get, _CosmoBolognaLib.GSL_f_pars_GSL_set)
    __swig_setmethods__["prec"] = _CosmoBolognaLib.GSL_f_pars_prec_set
    __swig_getmethods__["prec"] = _CosmoBolognaLib.GSL_f_pars_prec_get
    if _newclass:
        prec = _swig_property(_CosmoBolognaLib.GSL_f_pars_prec_get, _CosmoBolognaLib.GSL_f_pars_prec_set)
    __swig_setmethods__["file_par"] = _CosmoBolognaLib.GSL_f_pars_file_par_set
    __swig_getmethods__["file_par"] = _CosmoBolognaLib.GSL_f_pars_file_par_get
    if _newclass:
        file_par = _swig_property(_CosmoBolognaLib.GSL_f_pars_file_par_get, _CosmoBolognaLib.GSL_f_pars_file_par_set)
    __swig_setmethods__["pt_Cosmology"] = _CosmoBolognaLib.GSL_f_pars_pt_Cosmology_set
    __swig_getmethods__["pt_Cosmology"] = _CosmoBolognaLib.GSL_f_pars_pt_Cosmology_get
    if _newclass:
        pt_Cosmology = _swig_property(_CosmoBolognaLib.GSL_f_pars_pt_Cosmology_get, _CosmoBolognaLib.GSL_f_pars_pt_Cosmology_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_GSL_f_pars()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_GSL_f_pars
    __del__ = lambda self: None
GSL_f_pars_swigregister = _CosmoBolognaLib.GSL_f_pars_swigregister
GSL_f_pars_swigregister(GSL_f_pars)

class STR_xi_EH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_xi_EH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_xi_EH, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Omega_matter"] = _CosmoBolognaLib.STR_xi_EH_Omega_matter_set
    __swig_getmethods__["Omega_matter"] = _CosmoBolognaLib.STR_xi_EH_Omega_matter_get
    if _newclass:
        Omega_matter = _swig_property(_CosmoBolognaLib.STR_xi_EH_Omega_matter_get, _CosmoBolognaLib.STR_xi_EH_Omega_matter_set)
    __swig_setmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_xi_EH_Omega_baryon_set
    __swig_getmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_xi_EH_Omega_baryon_get
    if _newclass:
        Omega_baryon = _swig_property(_CosmoBolognaLib.STR_xi_EH_Omega_baryon_get, _CosmoBolognaLib.STR_xi_EH_Omega_baryon_set)
    __swig_setmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_Omega_neutrinos_set
    __swig_getmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_Omega_neutrinos_get
    if _newclass:
        Omega_neutrinos = _swig_property(_CosmoBolognaLib.STR_xi_EH_Omega_neutrinos_get, _CosmoBolognaLib.STR_xi_EH_Omega_neutrinos_set)
    __swig_setmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_massless_neutrinos_set
    __swig_getmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_massless_neutrinos_get
    if _newclass:
        massless_neutrinos = _swig_property(_CosmoBolognaLib.STR_xi_EH_massless_neutrinos_get, _CosmoBolognaLib.STR_xi_EH_massless_neutrinos_set)
    __swig_setmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_massive_neutrinos_set
    __swig_getmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_xi_EH_massive_neutrinos_get
    if _newclass:
        massive_neutrinos = _swig_property(_CosmoBolognaLib.STR_xi_EH_massive_neutrinos_get, _CosmoBolognaLib.STR_xi_EH_massive_neutrinos_set)
    __swig_setmethods__["Omega_DE"] = _CosmoBolognaLib.STR_xi_EH_Omega_DE_set
    __swig_getmethods__["Omega_DE"] = _CosmoBolognaLib.STR_xi_EH_Omega_DE_get
    if _newclass:
        Omega_DE = _swig_property(_CosmoBolognaLib.STR_xi_EH_Omega_DE_get, _CosmoBolognaLib.STR_xi_EH_Omega_DE_set)
    __swig_setmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_xi_EH_Omega_radiation_set
    __swig_getmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_xi_EH_Omega_radiation_get
    if _newclass:
        Omega_radiation = _swig_property(_CosmoBolognaLib.STR_xi_EH_Omega_radiation_get, _CosmoBolognaLib.STR_xi_EH_Omega_radiation_set)
    __swig_setmethods__["hh"] = _CosmoBolognaLib.STR_xi_EH_hh_set
    __swig_getmethods__["hh"] = _CosmoBolognaLib.STR_xi_EH_hh_get
    if _newclass:
        hh = _swig_property(_CosmoBolognaLib.STR_xi_EH_hh_get, _CosmoBolognaLib.STR_xi_EH_hh_set)
    __swig_setmethods__["scalar_amp"] = _CosmoBolognaLib.STR_xi_EH_scalar_amp_set
    __swig_getmethods__["scalar_amp"] = _CosmoBolognaLib.STR_xi_EH_scalar_amp_get
    if _newclass:
        scalar_amp = _swig_property(_CosmoBolognaLib.STR_xi_EH_scalar_amp_get, _CosmoBolognaLib.STR_xi_EH_scalar_amp_set)
    __swig_setmethods__["n_spec"] = _CosmoBolognaLib.STR_xi_EH_n_spec_set
    __swig_getmethods__["n_spec"] = _CosmoBolognaLib.STR_xi_EH_n_spec_get
    if _newclass:
        n_spec = _swig_property(_CosmoBolognaLib.STR_xi_EH_n_spec_get, _CosmoBolognaLib.STR_xi_EH_n_spec_set)
    __swig_setmethods__["w0"] = _CosmoBolognaLib.STR_xi_EH_w0_set
    __swig_getmethods__["w0"] = _CosmoBolognaLib.STR_xi_EH_w0_get
    if _newclass:
        w0 = _swig_property(_CosmoBolognaLib.STR_xi_EH_w0_get, _CosmoBolognaLib.STR_xi_EH_w0_set)
    __swig_setmethods__["wa"] = _CosmoBolognaLib.STR_xi_EH_wa_set
    __swig_getmethods__["wa"] = _CosmoBolognaLib.STR_xi_EH_wa_get
    if _newclass:
        wa = _swig_property(_CosmoBolognaLib.STR_xi_EH_wa_get, _CosmoBolognaLib.STR_xi_EH_wa_set)
    __swig_setmethods__["fNL"] = _CosmoBolognaLib.STR_xi_EH_fNL_set
    __swig_getmethods__["fNL"] = _CosmoBolognaLib.STR_xi_EH_fNL_get
    if _newclass:
        fNL = _swig_property(_CosmoBolognaLib.STR_xi_EH_fNL_get, _CosmoBolognaLib.STR_xi_EH_fNL_set)
    __swig_setmethods__["type_NG"] = _CosmoBolognaLib.STR_xi_EH_type_NG_set
    __swig_getmethods__["type_NG"] = _CosmoBolognaLib.STR_xi_EH_type_NG_get
    if _newclass:
        type_NG = _swig_property(_CosmoBolognaLib.STR_xi_EH_type_NG_get, _CosmoBolognaLib.STR_xi_EH_type_NG_set)
    __swig_setmethods__["model"] = _CosmoBolognaLib.STR_xi_EH_model_set
    __swig_getmethods__["model"] = _CosmoBolognaLib.STR_xi_EH_model_get
    if _newclass:
        model = _swig_property(_CosmoBolognaLib.STR_xi_EH_model_get, _CosmoBolognaLib.STR_xi_EH_model_set)
    __swig_setmethods__["unit"] = _CosmoBolognaLib.STR_xi_EH_unit_set
    __swig_getmethods__["unit"] = _CosmoBolognaLib.STR_xi_EH_unit_get
    if _newclass:
        unit = _swig_property(_CosmoBolognaLib.STR_xi_EH_unit_get, _CosmoBolognaLib.STR_xi_EH_unit_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.STR_xi_EH_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.STR_xi_EH_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.STR_xi_EH_method_Pk_get, _CosmoBolognaLib.STR_xi_EH_method_Pk_set)
    __swig_setmethods__["rr"] = _CosmoBolognaLib.STR_xi_EH_rr_set
    __swig_getmethods__["rr"] = _CosmoBolognaLib.STR_xi_EH_rr_get
    if _newclass:
        rr = _swig_property(_CosmoBolognaLib.STR_xi_EH_rr_get, _CosmoBolognaLib.STR_xi_EH_rr_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.STR_xi_EH_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.STR_xi_EH_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.STR_xi_EH_redshift_get, _CosmoBolognaLib.STR_xi_EH_redshift_set)
    __swig_setmethods__["aa"] = _CosmoBolognaLib.STR_xi_EH_aa_set
    __swig_getmethods__["aa"] = _CosmoBolognaLib.STR_xi_EH_aa_get
    if _newclass:
        aa = _swig_property(_CosmoBolognaLib.STR_xi_EH_aa_get, _CosmoBolognaLib.STR_xi_EH_aa_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_xi_EH()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_xi_EH
    __del__ = lambda self: None
STR_xi_EH_swigregister = _CosmoBolognaLib.STR_xi_EH_swigregister
STR_xi_EH_swigregister(STR_xi_EH)

class STR_SSM_EH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_SSM_EH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_SSM_EH, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Omega_matter"] = _CosmoBolognaLib.STR_SSM_EH_Omega_matter_set
    __swig_getmethods__["Omega_matter"] = _CosmoBolognaLib.STR_SSM_EH_Omega_matter_get
    if _newclass:
        Omega_matter = _swig_property(_CosmoBolognaLib.STR_SSM_EH_Omega_matter_get, _CosmoBolognaLib.STR_SSM_EH_Omega_matter_set)
    __swig_setmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_SSM_EH_Omega_baryon_set
    __swig_getmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_SSM_EH_Omega_baryon_get
    if _newclass:
        Omega_baryon = _swig_property(_CosmoBolognaLib.STR_SSM_EH_Omega_baryon_get, _CosmoBolognaLib.STR_SSM_EH_Omega_baryon_set)
    __swig_setmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_SSM_EH_Omega_neutrinos_set
    __swig_getmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_SSM_EH_Omega_neutrinos_get
    if _newclass:
        Omega_neutrinos = _swig_property(_CosmoBolognaLib.STR_SSM_EH_Omega_neutrinos_get, _CosmoBolognaLib.STR_SSM_EH_Omega_neutrinos_set)
    __swig_setmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_SSM_EH_massless_neutrinos_set
    __swig_getmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_SSM_EH_massless_neutrinos_get
    if _newclass:
        massless_neutrinos = _swig_property(_CosmoBolognaLib.STR_SSM_EH_massless_neutrinos_get, _CosmoBolognaLib.STR_SSM_EH_massless_neutrinos_set)
    __swig_setmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_SSM_EH_massive_neutrinos_set
    __swig_getmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_SSM_EH_massive_neutrinos_get
    if _newclass:
        massive_neutrinos = _swig_property(_CosmoBolognaLib.STR_SSM_EH_massive_neutrinos_get, _CosmoBolognaLib.STR_SSM_EH_massive_neutrinos_set)
    __swig_setmethods__["Omega_DE"] = _CosmoBolognaLib.STR_SSM_EH_Omega_DE_set
    __swig_getmethods__["Omega_DE"] = _CosmoBolognaLib.STR_SSM_EH_Omega_DE_get
    if _newclass:
        Omega_DE = _swig_property(_CosmoBolognaLib.STR_SSM_EH_Omega_DE_get, _CosmoBolognaLib.STR_SSM_EH_Omega_DE_set)
    __swig_setmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_SSM_EH_Omega_radiation_set
    __swig_getmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_SSM_EH_Omega_radiation_get
    if _newclass:
        Omega_radiation = _swig_property(_CosmoBolognaLib.STR_SSM_EH_Omega_radiation_get, _CosmoBolognaLib.STR_SSM_EH_Omega_radiation_set)
    __swig_setmethods__["hh"] = _CosmoBolognaLib.STR_SSM_EH_hh_set
    __swig_getmethods__["hh"] = _CosmoBolognaLib.STR_SSM_EH_hh_get
    if _newclass:
        hh = _swig_property(_CosmoBolognaLib.STR_SSM_EH_hh_get, _CosmoBolognaLib.STR_SSM_EH_hh_set)
    __swig_setmethods__["scalar_amp"] = _CosmoBolognaLib.STR_SSM_EH_scalar_amp_set
    __swig_getmethods__["scalar_amp"] = _CosmoBolognaLib.STR_SSM_EH_scalar_amp_get
    if _newclass:
        scalar_amp = _swig_property(_CosmoBolognaLib.STR_SSM_EH_scalar_amp_get, _CosmoBolognaLib.STR_SSM_EH_scalar_amp_set)
    __swig_setmethods__["n_spec"] = _CosmoBolognaLib.STR_SSM_EH_n_spec_set
    __swig_getmethods__["n_spec"] = _CosmoBolognaLib.STR_SSM_EH_n_spec_get
    if _newclass:
        n_spec = _swig_property(_CosmoBolognaLib.STR_SSM_EH_n_spec_get, _CosmoBolognaLib.STR_SSM_EH_n_spec_set)
    __swig_setmethods__["w0"] = _CosmoBolognaLib.STR_SSM_EH_w0_set
    __swig_getmethods__["w0"] = _CosmoBolognaLib.STR_SSM_EH_w0_get
    if _newclass:
        w0 = _swig_property(_CosmoBolognaLib.STR_SSM_EH_w0_get, _CosmoBolognaLib.STR_SSM_EH_w0_set)
    __swig_setmethods__["wa"] = _CosmoBolognaLib.STR_SSM_EH_wa_set
    __swig_getmethods__["wa"] = _CosmoBolognaLib.STR_SSM_EH_wa_get
    if _newclass:
        wa = _swig_property(_CosmoBolognaLib.STR_SSM_EH_wa_get, _CosmoBolognaLib.STR_SSM_EH_wa_set)
    __swig_setmethods__["fNL"] = _CosmoBolognaLib.STR_SSM_EH_fNL_set
    __swig_getmethods__["fNL"] = _CosmoBolognaLib.STR_SSM_EH_fNL_get
    if _newclass:
        fNL = _swig_property(_CosmoBolognaLib.STR_SSM_EH_fNL_get, _CosmoBolognaLib.STR_SSM_EH_fNL_set)
    __swig_setmethods__["type_NG"] = _CosmoBolognaLib.STR_SSM_EH_type_NG_set
    __swig_getmethods__["type_NG"] = _CosmoBolognaLib.STR_SSM_EH_type_NG_get
    if _newclass:
        type_NG = _swig_property(_CosmoBolognaLib.STR_SSM_EH_type_NG_get, _CosmoBolognaLib.STR_SSM_EH_type_NG_set)
    __swig_setmethods__["model"] = _CosmoBolognaLib.STR_SSM_EH_model_set
    __swig_getmethods__["model"] = _CosmoBolognaLib.STR_SSM_EH_model_get
    if _newclass:
        model = _swig_property(_CosmoBolognaLib.STR_SSM_EH_model_get, _CosmoBolognaLib.STR_SSM_EH_model_set)
    __swig_setmethods__["unit"] = _CosmoBolognaLib.STR_SSM_EH_unit_set
    __swig_getmethods__["unit"] = _CosmoBolognaLib.STR_SSM_EH_unit_get
    if _newclass:
        unit = _swig_property(_CosmoBolognaLib.STR_SSM_EH_unit_get, _CosmoBolognaLib.STR_SSM_EH_unit_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.STR_SSM_EH_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.STR_SSM_EH_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.STR_SSM_EH_method_Pk_get, _CosmoBolognaLib.STR_SSM_EH_method_Pk_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.STR_SSM_EH_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.STR_SSM_EH_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.STR_SSM_EH_redshift_get, _CosmoBolognaLib.STR_SSM_EH_redshift_set)
    __swig_setmethods__["mass"] = _CosmoBolognaLib.STR_SSM_EH_mass_set
    __swig_getmethods__["mass"] = _CosmoBolognaLib.STR_SSM_EH_mass_get
    if _newclass:
        mass = _swig_property(_CosmoBolognaLib.STR_SSM_EH_mass_get, _CosmoBolognaLib.STR_SSM_EH_mass_set)
    __swig_setmethods__["rho"] = _CosmoBolognaLib.STR_SSM_EH_rho_set
    __swig_getmethods__["rho"] = _CosmoBolognaLib.STR_SSM_EH_rho_get
    if _newclass:
        rho = _swig_property(_CosmoBolognaLib.STR_SSM_EH_rho_get, _CosmoBolognaLib.STR_SSM_EH_rho_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_SSM_EH()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_SSM_EH
    __del__ = lambda self: None
STR_SSM_EH_swigregister = _CosmoBolognaLib.STR_SSM_EH_swigregister
STR_SSM_EH_swigregister(STR_SSM_EH)

class STR_NG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_NG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_NG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Omega_matter"] = _CosmoBolognaLib.STR_NG_Omega_matter_set
    __swig_getmethods__["Omega_matter"] = _CosmoBolognaLib.STR_NG_Omega_matter_get
    if _newclass:
        Omega_matter = _swig_property(_CosmoBolognaLib.STR_NG_Omega_matter_get, _CosmoBolognaLib.STR_NG_Omega_matter_set)
    __swig_setmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_NG_Omega_baryon_set
    __swig_getmethods__["Omega_baryon"] = _CosmoBolognaLib.STR_NG_Omega_baryon_get
    if _newclass:
        Omega_baryon = _swig_property(_CosmoBolognaLib.STR_NG_Omega_baryon_get, _CosmoBolognaLib.STR_NG_Omega_baryon_set)
    __swig_setmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_NG_Omega_neutrinos_set
    __swig_getmethods__["Omega_neutrinos"] = _CosmoBolognaLib.STR_NG_Omega_neutrinos_get
    if _newclass:
        Omega_neutrinos = _swig_property(_CosmoBolognaLib.STR_NG_Omega_neutrinos_get, _CosmoBolognaLib.STR_NG_Omega_neutrinos_set)
    __swig_setmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_NG_massless_neutrinos_set
    __swig_getmethods__["massless_neutrinos"] = _CosmoBolognaLib.STR_NG_massless_neutrinos_get
    if _newclass:
        massless_neutrinos = _swig_property(_CosmoBolognaLib.STR_NG_massless_neutrinos_get, _CosmoBolognaLib.STR_NG_massless_neutrinos_set)
    __swig_setmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_NG_massive_neutrinos_set
    __swig_getmethods__["massive_neutrinos"] = _CosmoBolognaLib.STR_NG_massive_neutrinos_get
    if _newclass:
        massive_neutrinos = _swig_property(_CosmoBolognaLib.STR_NG_massive_neutrinos_get, _CosmoBolognaLib.STR_NG_massive_neutrinos_set)
    __swig_setmethods__["Omega_DE"] = _CosmoBolognaLib.STR_NG_Omega_DE_set
    __swig_getmethods__["Omega_DE"] = _CosmoBolognaLib.STR_NG_Omega_DE_get
    if _newclass:
        Omega_DE = _swig_property(_CosmoBolognaLib.STR_NG_Omega_DE_get, _CosmoBolognaLib.STR_NG_Omega_DE_set)
    __swig_setmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_NG_Omega_radiation_set
    __swig_getmethods__["Omega_radiation"] = _CosmoBolognaLib.STR_NG_Omega_radiation_get
    if _newclass:
        Omega_radiation = _swig_property(_CosmoBolognaLib.STR_NG_Omega_radiation_get, _CosmoBolognaLib.STR_NG_Omega_radiation_set)
    __swig_setmethods__["hh"] = _CosmoBolognaLib.STR_NG_hh_set
    __swig_getmethods__["hh"] = _CosmoBolognaLib.STR_NG_hh_get
    if _newclass:
        hh = _swig_property(_CosmoBolognaLib.STR_NG_hh_get, _CosmoBolognaLib.STR_NG_hh_set)
    __swig_setmethods__["scalar_amp"] = _CosmoBolognaLib.STR_NG_scalar_amp_set
    __swig_getmethods__["scalar_amp"] = _CosmoBolognaLib.STR_NG_scalar_amp_get
    if _newclass:
        scalar_amp = _swig_property(_CosmoBolognaLib.STR_NG_scalar_amp_get, _CosmoBolognaLib.STR_NG_scalar_amp_set)
    __swig_setmethods__["n_spec"] = _CosmoBolognaLib.STR_NG_n_spec_set
    __swig_getmethods__["n_spec"] = _CosmoBolognaLib.STR_NG_n_spec_get
    if _newclass:
        n_spec = _swig_property(_CosmoBolognaLib.STR_NG_n_spec_get, _CosmoBolognaLib.STR_NG_n_spec_set)
    __swig_setmethods__["w0"] = _CosmoBolognaLib.STR_NG_w0_set
    __swig_getmethods__["w0"] = _CosmoBolognaLib.STR_NG_w0_get
    if _newclass:
        w0 = _swig_property(_CosmoBolognaLib.STR_NG_w0_get, _CosmoBolognaLib.STR_NG_w0_set)
    __swig_setmethods__["wa"] = _CosmoBolognaLib.STR_NG_wa_set
    __swig_getmethods__["wa"] = _CosmoBolognaLib.STR_NG_wa_get
    if _newclass:
        wa = _swig_property(_CosmoBolognaLib.STR_NG_wa_get, _CosmoBolognaLib.STR_NG_wa_set)
    __swig_setmethods__["fNL"] = _CosmoBolognaLib.STR_NG_fNL_set
    __swig_getmethods__["fNL"] = _CosmoBolognaLib.STR_NG_fNL_get
    if _newclass:
        fNL = _swig_property(_CosmoBolognaLib.STR_NG_fNL_get, _CosmoBolognaLib.STR_NG_fNL_set)
    __swig_setmethods__["type_NG"] = _CosmoBolognaLib.STR_NG_type_NG_set
    __swig_getmethods__["type_NG"] = _CosmoBolognaLib.STR_NG_type_NG_get
    if _newclass:
        type_NG = _swig_property(_CosmoBolognaLib.STR_NG_type_NG_get, _CosmoBolognaLib.STR_NG_type_NG_set)
    __swig_setmethods__["model"] = _CosmoBolognaLib.STR_NG_model_set
    __swig_getmethods__["model"] = _CosmoBolognaLib.STR_NG_model_get
    if _newclass:
        model = _swig_property(_CosmoBolognaLib.STR_NG_model_get, _CosmoBolognaLib.STR_NG_model_set)
    __swig_setmethods__["unit"] = _CosmoBolognaLib.STR_NG_unit_set
    __swig_getmethods__["unit"] = _CosmoBolognaLib.STR_NG_unit_get
    if _newclass:
        unit = _swig_property(_CosmoBolognaLib.STR_NG_unit_get, _CosmoBolognaLib.STR_NG_unit_set)
    __swig_setmethods__["kt"] = _CosmoBolognaLib.STR_NG_kt_set
    __swig_getmethods__["kt"] = _CosmoBolognaLib.STR_NG_kt_get
    if _newclass:
        kt = _swig_property(_CosmoBolognaLib.STR_NG_kt_get, _CosmoBolognaLib.STR_NG_kt_set)
    __swig_setmethods__["mass"] = _CosmoBolognaLib.STR_NG_mass_set
    __swig_getmethods__["mass"] = _CosmoBolognaLib.STR_NG_mass_get
    if _newclass:
        mass = _swig_property(_CosmoBolognaLib.STR_NG_mass_get, _CosmoBolognaLib.STR_NG_mass_set)
    __swig_setmethods__["method_Pk"] = _CosmoBolognaLib.STR_NG_method_Pk_set
    __swig_getmethods__["method_Pk"] = _CosmoBolognaLib.STR_NG_method_Pk_get
    if _newclass:
        method_Pk = _swig_property(_CosmoBolognaLib.STR_NG_method_Pk_get, _CosmoBolognaLib.STR_NG_method_Pk_set)
    __swig_setmethods__["output_root"] = _CosmoBolognaLib.STR_NG_output_root_set
    __swig_getmethods__["output_root"] = _CosmoBolognaLib.STR_NG_output_root_get
    if _newclass:
        output_root = _swig_property(_CosmoBolognaLib.STR_NG_output_root_get, _CosmoBolognaLib.STR_NG_output_root_set)
    __swig_setmethods__["norm"] = _CosmoBolognaLib.STR_NG_norm_set
    __swig_getmethods__["norm"] = _CosmoBolognaLib.STR_NG_norm_get
    if _newclass:
        norm = _swig_property(_CosmoBolognaLib.STR_NG_norm_get, _CosmoBolognaLib.STR_NG_norm_set)
    __swig_setmethods__["k_min"] = _CosmoBolognaLib.STR_NG_k_min_set
    __swig_getmethods__["k_min"] = _CosmoBolognaLib.STR_NG_k_min_get
    if _newclass:
        k_min = _swig_property(_CosmoBolognaLib.STR_NG_k_min_get, _CosmoBolognaLib.STR_NG_k_min_set)
    __swig_setmethods__["k_max"] = _CosmoBolognaLib.STR_NG_k_max_set
    __swig_getmethods__["k_max"] = _CosmoBolognaLib.STR_NG_k_max_get
    if _newclass:
        k_max = _swig_property(_CosmoBolognaLib.STR_NG_k_max_get, _CosmoBolognaLib.STR_NG_k_max_set)
    __swig_setmethods__["GSL"] = _CosmoBolognaLib.STR_NG_GSL_set
    __swig_getmethods__["GSL"] = _CosmoBolognaLib.STR_NG_GSL_get
    if _newclass:
        GSL = _swig_property(_CosmoBolognaLib.STR_NG_GSL_get, _CosmoBolognaLib.STR_NG_GSL_set)
    __swig_setmethods__["prec"] = _CosmoBolognaLib.STR_NG_prec_set
    __swig_getmethods__["prec"] = _CosmoBolognaLib.STR_NG_prec_get
    if _newclass:
        prec = _swig_property(_CosmoBolognaLib.STR_NG_prec_get, _CosmoBolognaLib.STR_NG_prec_set)
    __swig_setmethods__["file_par"] = _CosmoBolognaLib.STR_NG_file_par_set
    __swig_getmethods__["file_par"] = _CosmoBolognaLib.STR_NG_file_par_get
    if _newclass:
        file_par = _swig_property(_CosmoBolognaLib.STR_NG_file_par_get, _CosmoBolognaLib.STR_NG_file_par_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_NG()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_NG
    __del__ = lambda self: None
STR_NG_swigregister = _CosmoBolognaLib.STR_NG_swigregister
STR_NG_swigregister(STR_NG)

class ChainMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChainMesh, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_ChainMesh
    __del__ = lambda self: None

    def set_par(self, arg2, arg3):
        return _CosmoBolognaLib.ChainMesh_set_par(self, arg2, arg3)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ChainMesh(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def nCell(self):
        return _CosmoBolognaLib.ChainMesh_nCell(self)

    def pos_to_index(self, arg2):
        return _CosmoBolognaLib.ChainMesh_pos_to_index(self, arg2)

    def inds_to_index(self, arg2):
        return _CosmoBolognaLib.ChainMesh_inds_to_index(self, arg2)

    def index_to_inds(self, arg2, arg3, arg4):
        return _CosmoBolognaLib.ChainMesh_index_to_inds(self, arg2, arg3, arg4)

    def create_chain_mesh(self, arg2, arg3, nMIN=0, nMAX=300):
        return _CosmoBolognaLib.ChainMesh_create_chain_mesh(self, arg2, arg3, nMIN, nMAX)

    def create_chain_mesh_m2(self, arg2):
        return _CosmoBolognaLib.ChainMesh_create_chain_mesh_m2(self, arg2)

    def get_searching_region(self, arg2, r_min=-1):
        return _CosmoBolognaLib.ChainMesh_get_searching_region(self, arg2, r_min)

    def close_objects(self, arg2, ii=-1):
        return _CosmoBolognaLib.ChainMesh_close_objects(self, arg2, ii)

    def get_list(self, arg2):
        return _CosmoBolognaLib.ChainMesh_get_list(self, arg2)
ChainMesh_swigregister = _CosmoBolognaLib.ChainMesh_swigregister
ChainMesh_swigregister(ChainMesh)

class ChainMesh1D(ChainMesh):
    __swig_setmethods__ = {}
    for _s in [ChainMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainMesh1D, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainMesh1D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_ChainMesh1D
    __del__ = lambda self: None

    def set_par(self, arg2, arg3, arg4, nMIN=0, nMAX=300):
        return _CosmoBolognaLib.ChainMesh1D_set_par(self, arg2, arg3, arg4, nMIN, nMAX)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ChainMesh1D(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
ChainMesh1D_swigregister = _CosmoBolognaLib.ChainMesh1D_swigregister
ChainMesh1D_swigregister(ChainMesh1D)

class ChainMesh2D(ChainMesh):
    __swig_setmethods__ = {}
    for _s in [ChainMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainMesh2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainMesh2D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_ChainMesh2D
    __del__ = lambda self: None

    def set_par(self, arg2, arg3, arg4, arg5, nMIN=0, nMAX=300):
        return _CosmoBolognaLib.ChainMesh2D_set_par(self, arg2, arg3, arg4, arg5, nMIN, nMAX)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ChainMesh2D(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
ChainMesh2D_swigregister = _CosmoBolognaLib.ChainMesh2D_swigregister
ChainMesh2D_swigregister(ChainMesh2D)

class ChainMesh3D(ChainMesh):
    __swig_setmethods__ = {}
    for _s in [ChainMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainMesh3D, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainMesh3D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_ChainMesh3D
    __del__ = lambda self: None

    def set_par(self, arg2, arg3, arg4, arg5, arg6, nMIN=0, nMAX=300):
        return _CosmoBolognaLib.ChainMesh3D_set_par(self, arg2, arg3, arg4, arg5, arg6, nMIN, nMAX)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ChainMesh3D(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
ChainMesh3D_swigregister = _CosmoBolognaLib.ChainMesh3D_swigregister
ChainMesh3D_swigregister(ChainMesh3D)

class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CosmoBolognaLib.new_Object()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Object
    __del__ = lambda self: None
    __swig_getmethods__["make_Object"] = lambda x: _CosmoBolognaLib.Object_make_Object
    if _newclass:
        make_Object = staticmethod(_CosmoBolognaLib.Object_make_Object)

    def xx(self):
        return _CosmoBolognaLib.Object_xx(self)

    def yy(self):
        return _CosmoBolognaLib.Object_yy(self)

    def zz(self):
        return _CosmoBolognaLib.Object_zz(self)

    def vx(self):
        return _CosmoBolognaLib.Object_vx(self)

    def vy(self):
        return _CosmoBolognaLib.Object_vy(self)

    def vz(self):
        return _CosmoBolognaLib.Object_vz(self)

    def dc(self):
        return _CosmoBolognaLib.Object_dc(self)

    def ra(self):
        return _CosmoBolognaLib.Object_ra(self)

    def dec(self):
        return _CosmoBolognaLib.Object_dec(self)

    def redshift(self):
        return _CosmoBolognaLib.Object_redshift(self)

    def weight(self):
        return _CosmoBolognaLib.Object_weight(self)

    def region(self):
        return _CosmoBolognaLib.Object_region(self)

    def mass(self):
        return _CosmoBolognaLib.Object_mass(self)

    def magnitude(self):
        return _CosmoBolognaLib.Object_magnitude(self)

    def richness(self):
        return _CosmoBolognaLib.Object_richness(self)

    def generic(self):
        return _CosmoBolognaLib.Object_generic(self)

    def radius(self):
        return _CosmoBolognaLib.Object_radius(self)

    def coords(self):
        return _CosmoBolognaLib.Object_coords(self)

    def set_xx(self, xx):
        return _CosmoBolognaLib.Object_set_xx(self, xx)

    def set_yy(self, yy):
        return _CosmoBolognaLib.Object_set_yy(self, yy)

    def set_zz(self, zz):
        return _CosmoBolognaLib.Object_set_zz(self, zz)

    def set_vx(self, vx):
        return _CosmoBolognaLib.Object_set_vx(self, vx)

    def set_vy(self, vy):
        return _CosmoBolognaLib.Object_set_vy(self, vy)

    def set_vz(self, vz):
        return _CosmoBolognaLib.Object_set_vz(self, vz)

    def set_dc(self, dc):
        return _CosmoBolognaLib.Object_set_dc(self, dc)

    def set_ra(self, ra):
        return _CosmoBolognaLib.Object_set_ra(self, ra)

    def set_dec(self, dec):
        return _CosmoBolognaLib.Object_set_dec(self, dec)

    def set_redshift(self, redshift):
        return _CosmoBolognaLib.Object_set_redshift(self, redshift)

    def set_weight(self, weight):
        return _CosmoBolognaLib.Object_set_weight(self, weight)

    def set_region(self, region):
        return _CosmoBolognaLib.Object_set_region(self, region)

    def set_mass(self, mass):
        return _CosmoBolognaLib.Object_set_mass(self, mass)

    def set_magnitude(self, magnitude):
        return _CosmoBolognaLib.Object_set_magnitude(self, magnitude)

    def set_richness(self, richness):
        return _CosmoBolognaLib.Object_set_richness(self, richness)

    def set_generic(self, generic):
        return _CosmoBolognaLib.Object_set_generic(self, generic)

    def set_radius(self, radius):
        return _CosmoBolognaLib.Object_set_radius(self, radius)
Object_swigregister = _CosmoBolognaLib.Object_swigregister
Object_swigregister(Object)

def Object_make_Object(*args):
    return _CosmoBolognaLib.Object_make_Object(*args)
Object_make_Object = _CosmoBolognaLib.Object_make_Object

class GenericObject(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_GenericObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_GenericObject
    __del__ = lambda self: None

    def xx(self):
        return _CosmoBolognaLib.GenericObject_xx(self)

    def yy(self):
        return _CosmoBolognaLib.GenericObject_yy(self)

    def zz(self):
        return _CosmoBolognaLib.GenericObject_zz(self)

    def dc(self):
        return _CosmoBolognaLib.GenericObject_dc(self)

    def ra(self):
        return _CosmoBolognaLib.GenericObject_ra(self)

    def dec(self):
        return _CosmoBolognaLib.GenericObject_dec(self)

    def redshift(self):
        return _CosmoBolognaLib.GenericObject_redshift(self)

    def weight(self):
        return _CosmoBolognaLib.GenericObject_weight(self)

    def region(self):
        return _CosmoBolognaLib.GenericObject_region(self)

    def coords(self):
        return _CosmoBolognaLib.GenericObject_coords(self)

    def set_xx(self, xx):
        return _CosmoBolognaLib.GenericObject_set_xx(self, xx)

    def set_yy(self, yy):
        return _CosmoBolognaLib.GenericObject_set_yy(self, yy)

    def set_zz(self, zz):
        return _CosmoBolognaLib.GenericObject_set_zz(self, zz)

    def set_ra(self, ra):
        return _CosmoBolognaLib.GenericObject_set_ra(self, ra)

    def set_dec(self, dec):
        return _CosmoBolognaLib.GenericObject_set_dec(self, dec)

    def set_redshift(self, redshift):
        return _CosmoBolognaLib.GenericObject_set_redshift(self, redshift)

    def set_dc(self, dc):
        return _CosmoBolognaLib.GenericObject_set_dc(self, dc)

    def set_weight(self, weight):
        return _CosmoBolognaLib.GenericObject_set_weight(self, weight)

    def set_region(self, region):
        return _CosmoBolognaLib.GenericObject_set_region(self, region)
GenericObject_swigregister = _CosmoBolognaLib.GenericObject_swigregister
GenericObject_swigregister(GenericObject)

class RandomObject(GenericObject):
    __swig_setmethods__ = {}
    for _s in [GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RandomObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_RandomObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_RandomObject
    __del__ = lambda self: None
RandomObject_swigregister = _CosmoBolognaLib.RandomObject_swigregister
RandomObject_swigregister(RandomObject)

class Halo(GenericObject):
    __swig_setmethods__ = {}
    for _s in [GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Halo, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Halo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Halo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Halo
    __del__ = lambda self: None

    def vx(self):
        return _CosmoBolognaLib.Halo_vx(self)

    def vy(self):
        return _CosmoBolognaLib.Halo_vy(self)

    def vz(self):
        return _CosmoBolognaLib.Halo_vz(self)

    def mass(self):
        return _CosmoBolognaLib.Halo_mass(self)

    def set_vx(self, vx):
        return _CosmoBolognaLib.Halo_set_vx(self, vx)

    def set_vy(self, vy):
        return _CosmoBolognaLib.Halo_set_vy(self, vy)

    def set_vz(self, vz):
        return _CosmoBolognaLib.Halo_set_vz(self, vz)

    def set_mass(self, mass):
        return _CosmoBolognaLib.Halo_set_mass(self, mass)
Halo_swigregister = _CosmoBolognaLib.Halo_swigregister
Halo_swigregister(Halo)

class Mock(Halo):
    __swig_setmethods__ = {}
    for _s in [Halo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mock, name, value)
    __swig_getmethods__ = {}
    for _s in [Halo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Mock(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Mock
    __del__ = lambda self: None

    def generic(self):
        return _CosmoBolognaLib.Mock_generic(self)

    def set_generic(self, generic):
        return _CosmoBolognaLib.Mock_set_generic(self, generic)
Mock_swigregister = _CosmoBolognaLib.Mock_swigregister
Mock_swigregister(Mock)

class Galaxy(GenericObject):
    __swig_setmethods__ = {}
    for _s in [GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Galaxy, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Galaxy, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Galaxy(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Galaxy
    __del__ = lambda self: None

    def mass(self):
        return _CosmoBolognaLib.Galaxy_mass(self)

    def magnitude(self):
        return _CosmoBolognaLib.Galaxy_magnitude(self)

    def set_mass(self, mass):
        return _CosmoBolognaLib.Galaxy_set_mass(self, mass)

    def set_magnitude(self, magnitude):
        return _CosmoBolognaLib.Galaxy_set_magnitude(self, magnitude)
Galaxy_swigregister = _CosmoBolognaLib.Galaxy_swigregister
Galaxy_swigregister(Galaxy)

class Cluster(GenericObject):
    __swig_setmethods__ = {}
    for _s in [GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cluster, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cluster, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Cluster(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_Cluster
    __del__ = lambda self: None

    def mass(self):
        return _CosmoBolognaLib.Cluster_mass(self)

    def richness(self):
        return _CosmoBolognaLib.Cluster_richness(self)

    def set_mass(self, mass):
        return _CosmoBolognaLib.Cluster_set_mass(self, mass)

    def set_richness(self, richness):
        return _CosmoBolognaLib.Cluster_set_richness(self, richness)
Cluster_swigregister = _CosmoBolognaLib.Cluster_swigregister
Cluster_swigregister(Cluster)


_CosmoBolognaLib._XX__swigconstant(_CosmoBolognaLib)
_XX_ = _CosmoBolognaLib._XX_

_CosmoBolognaLib._YY__swigconstant(_CosmoBolognaLib)
_YY_ = _CosmoBolognaLib._YY_

_CosmoBolognaLib._ZZ__swigconstant(_CosmoBolognaLib)
_ZZ_ = _CosmoBolognaLib._ZZ_

_CosmoBolognaLib._RA__swigconstant(_CosmoBolognaLib)
_RA_ = _CosmoBolognaLib._RA_

_CosmoBolognaLib._DEC__swigconstant(_CosmoBolognaLib)
_DEC_ = _CosmoBolognaLib._DEC_

_CosmoBolognaLib._REDSHIFT__swigconstant(_CosmoBolognaLib)
_REDSHIFT_ = _CosmoBolognaLib._REDSHIFT_

_CosmoBolognaLib._DC__swigconstant(_CosmoBolognaLib)
_DC_ = _CosmoBolognaLib._DC_

_CosmoBolognaLib._WEIGHT__swigconstant(_CosmoBolognaLib)
_WEIGHT_ = _CosmoBolognaLib._WEIGHT_

_CosmoBolognaLib._MASS__swigconstant(_CosmoBolognaLib)
_MASS_ = _CosmoBolognaLib._MASS_

_CosmoBolognaLib._RICHNESS__swigconstant(_CosmoBolognaLib)
_RICHNESS_ = _CosmoBolognaLib._RICHNESS_

_CosmoBolognaLib._MAGNITUDE__swigconstant(_CosmoBolognaLib)
_MAGNITUDE_ = _CosmoBolognaLib._MAGNITUDE_

_CosmoBolognaLib._VX__swigconstant(_CosmoBolognaLib)
_VX_ = _CosmoBolognaLib._VX_

_CosmoBolognaLib._VY__swigconstant(_CosmoBolognaLib)
_VY_ = _CosmoBolognaLib._VY_

_CosmoBolognaLib._VZ__swigconstant(_CosmoBolognaLib)
_VZ_ = _CosmoBolognaLib._VZ_

_CosmoBolognaLib._REGION__swigconstant(_CosmoBolognaLib)
_REGION_ = _CosmoBolognaLib._REGION_

_CosmoBolognaLib._GENERIC__swigconstant(_CosmoBolognaLib)
_GENERIC_ = _CosmoBolognaLib._GENERIC_

_CosmoBolognaLib._RADIUS__swigconstant(_CosmoBolognaLib)
_RADIUS_ = _CosmoBolognaLib._RADIUS_
class Catalogue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Catalogue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Catalogue, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Catalogue
    __del__ = lambda self: None

    def xx(self, i):
        return _CosmoBolognaLib.Catalogue_xx(self, i)

    def yy(self, i):
        return _CosmoBolognaLib.Catalogue_yy(self, i)

    def zz(self, i):
        return _CosmoBolognaLib.Catalogue_zz(self, i)

    def vx(self, i):
        return _CosmoBolognaLib.Catalogue_vx(self, i)

    def vy(self, i):
        return _CosmoBolognaLib.Catalogue_vy(self, i)

    def vz(self, i):
        return _CosmoBolognaLib.Catalogue_vz(self, i)

    def dc(self, i):
        return _CosmoBolognaLib.Catalogue_dc(self, i)

    def ra(self, i):
        return _CosmoBolognaLib.Catalogue_ra(self, i)

    def dec(self, i):
        return _CosmoBolognaLib.Catalogue_dec(self, i)

    def redshift(self, i):
        return _CosmoBolognaLib.Catalogue_redshift(self, i)

    def weight(self, i):
        return _CosmoBolognaLib.Catalogue_weight(self, i)

    def region(self, i):
        return _CosmoBolognaLib.Catalogue_region(self, i)

    def Nregion(self):
        return _CosmoBolognaLib.Catalogue_Nregion(self)

    def get_region_list(self):
        return _CosmoBolognaLib.Catalogue_get_region_list(self)

    def mass(self, i):
        return _CosmoBolognaLib.Catalogue_mass(self, i)

    def magnitude(self, i):
        return _CosmoBolognaLib.Catalogue_magnitude(self, i)

    def richness(self, i):
        return _CosmoBolognaLib.Catalogue_richness(self, i)

    def generic(self, i):
        return _CosmoBolognaLib.Catalogue_generic(self, i)

    def radius(self, i):
        return _CosmoBolognaLib.Catalogue_radius(self, i)

    def var(self, arg2):
        return _CosmoBolognaLib.Catalogue_var(self, arg2)

    def object(self, i):
        return _CosmoBolognaLib.Catalogue_object(self, i)

    def coordinates(self, i):
        return _CosmoBolognaLib.Catalogue_coordinates(self, i)

    def set_var(self, arg2, arg3):
        return _CosmoBolognaLib.Catalogue_set_var(self, arg2, arg3)

    def nObjects(self):
        return _CosmoBolognaLib.Catalogue_nObjects(self)

    def resize(self, newN):
        return _CosmoBolognaLib.Catalogue_resize(self, newN)

    def MinMax_var(self, *args):
        return _CosmoBolognaLib.Catalogue_MinMax_var(self, *args)

    def stats_var(self, *args):
        return _CosmoBolognaLib.Catalogue_stats_var(self, *args)

    def var_distr(self, *args):
        return _CosmoBolognaLib.Catalogue_var_distr(self, *args)

    def weightedN(self):
        return _CosmoBolognaLib.Catalogue_weightedN(self)

    def computeComovingCoordinates(self, arg2):
        return _CosmoBolognaLib.Catalogue_computeComovingCoordinates(self, arg2)

    def computePolarCoordinates(self, *args):
        return _CosmoBolognaLib.Catalogue_computePolarCoordinates(self, *args)

    def normalizeComovingCoordinates(self):
        return _CosmoBolognaLib.Catalogue_normalizeComovingCoordinates(self)

    def restoreComovingCoordinates(self):
        return _CosmoBolognaLib.Catalogue_restoreComovingCoordinates(self)

    def Order(self, *args):
        return _CosmoBolognaLib.Catalogue_Order(self, *args)

    def write_comoving_coordinates(self, arg2):
        return _CosmoBolognaLib.Catalogue_write_comoving_coordinates(self, arg2)

    def write_obs_coordinates(self, arg2):
        return _CosmoBolognaLib.Catalogue_write_obs_coordinates(self, arg2)

    def write_coordinates(self, arg2):
        return _CosmoBolognaLib.Catalogue_write_coordinates(self, arg2)

    def distance(self, arg2, arg3):
        return _CosmoBolognaLib.Catalogue_distance(self, arg2, arg3)

    def angsep_xyz(self, arg2, arg3):
        return _CosmoBolognaLib.Catalogue_angsep_xyz(self, arg2, arg3)

    def __iadd__(self, cc):
        return _CosmoBolognaLib.Catalogue___iadd__(self, cc)

    def cut(self, arg2, arg3, arg4, excl=0):
        return _CosmoBolognaLib.Catalogue_cut(self, arg2, arg3, arg4, excl)

    def smooth(self, *args):
        return _CosmoBolognaLib.Catalogue_smooth(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Catalogue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def add_object(self, *args):
        return _CosmoBolognaLib.Catalogue_add_object(self, *args)

    def add_objects(self, *args):
        return _CosmoBolognaLib.Catalogue_add_objects(self, *args)

    def remove_objects(self, *args):
        return _CosmoBolognaLib.Catalogue_remove_objects(self, *args)
Catalogue_swigregister = _CosmoBolognaLib.Catalogue_swigregister
Catalogue_swigregister(Catalogue)

class ChainMesh_Catalogue(ChainMesh):
    __swig_setmethods__ = {}
    for _s in [ChainMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainMesh_Catalogue, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainMesh_Catalogue, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_ChainMesh_Catalogue
    __del__ = lambda self: None

    def set_par(self, arg2, arg3, arg4):
        return _CosmoBolognaLib.ChainMesh_Catalogue_set_par(self, arg2, arg3, arg4)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ChainMesh_Catalogue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_order(self, arg2):
        return _CosmoBolognaLib.ChainMesh_Catalogue_get_order(self, arg2)

    def object_list(self, arg2, ii=-1):
        return _CosmoBolognaLib.ChainMesh_Catalogue_object_list(self, arg2, ii)

    def catalogue(self):
        return _CosmoBolognaLib.ChainMesh_Catalogue_catalogue(self)
ChainMesh_Catalogue_swigregister = _CosmoBolognaLib.ChainMesh_Catalogue_swigregister
ChainMesh_Catalogue_swigregister(ChainMesh_Catalogue)

class GenericObjVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericObjVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericObjVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.GenericObjVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.GenericObjVec___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.GenericObjVec___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.GenericObjVec___len__(self)

    def pop(self):
        return _CosmoBolognaLib.GenericObjVec_pop(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.GenericObjVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.GenericObjVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.GenericObjVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.GenericObjVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.GenericObjVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.GenericObjVec___setitem__(self, *args)

    def append(self, x):
        return _CosmoBolognaLib.GenericObjVec_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.GenericObjVec_empty(self)

    def size(self):
        return _CosmoBolognaLib.GenericObjVec_size(self)

    def clear(self):
        return _CosmoBolognaLib.GenericObjVec_clear(self)

    def swap(self, v):
        return _CosmoBolognaLib.GenericObjVec_swap(self, v)

    def get_allocator(self):
        return _CosmoBolognaLib.GenericObjVec_get_allocator(self)

    def begin(self):
        return _CosmoBolognaLib.GenericObjVec_begin(self)

    def end(self):
        return _CosmoBolognaLib.GenericObjVec_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.GenericObjVec_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.GenericObjVec_rend(self)

    def pop_back(self):
        return _CosmoBolognaLib.GenericObjVec_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.GenericObjVec_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_GenericObjVec(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.GenericObjVec_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.GenericObjVec_front(self)

    def back(self):
        return _CosmoBolognaLib.GenericObjVec_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.GenericObjVec_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.GenericObjVec_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.GenericObjVec_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.GenericObjVec_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.GenericObjVec_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_GenericObjVec
    __del__ = lambda self: None
GenericObjVec_swigregister = _CosmoBolognaLib.GenericObjVec_swigregister
GenericObjVec_swigregister(GenericObjVec)

class RandomObjVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomObjVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomObjVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.RandomObjVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.RandomObjVec___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.RandomObjVec___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.RandomObjVec___len__(self)

    def pop(self):
        return _CosmoBolognaLib.RandomObjVec_pop(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.RandomObjVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.RandomObjVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.RandomObjVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.RandomObjVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.RandomObjVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.RandomObjVec___setitem__(self, *args)

    def append(self, x):
        return _CosmoBolognaLib.RandomObjVec_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.RandomObjVec_empty(self)

    def size(self):
        return _CosmoBolognaLib.RandomObjVec_size(self)

    def clear(self):
        return _CosmoBolognaLib.RandomObjVec_clear(self)

    def swap(self, v):
        return _CosmoBolognaLib.RandomObjVec_swap(self, v)

    def get_allocator(self):
        return _CosmoBolognaLib.RandomObjVec_get_allocator(self)

    def begin(self):
        return _CosmoBolognaLib.RandomObjVec_begin(self)

    def end(self):
        return _CosmoBolognaLib.RandomObjVec_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.RandomObjVec_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.RandomObjVec_rend(self)

    def pop_back(self):
        return _CosmoBolognaLib.RandomObjVec_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.RandomObjVec_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_RandomObjVec(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.RandomObjVec_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.RandomObjVec_front(self)

    def back(self):
        return _CosmoBolognaLib.RandomObjVec_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.RandomObjVec_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.RandomObjVec_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.RandomObjVec_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.RandomObjVec_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.RandomObjVec_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_RandomObjVec
    __del__ = lambda self: None
RandomObjVec_swigregister = _CosmoBolognaLib.RandomObjVec_swigregister
RandomObjVec_swigregister(RandomObjVec)

class MockVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MockVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MockVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.MockVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.MockVec___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.MockVec___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.MockVec___len__(self)

    def pop(self):
        return _CosmoBolognaLib.MockVec_pop(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.MockVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.MockVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.MockVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.MockVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.MockVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.MockVec___setitem__(self, *args)

    def append(self, x):
        return _CosmoBolognaLib.MockVec_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.MockVec_empty(self)

    def size(self):
        return _CosmoBolognaLib.MockVec_size(self)

    def clear(self):
        return _CosmoBolognaLib.MockVec_clear(self)

    def swap(self, v):
        return _CosmoBolognaLib.MockVec_swap(self, v)

    def get_allocator(self):
        return _CosmoBolognaLib.MockVec_get_allocator(self)

    def begin(self):
        return _CosmoBolognaLib.MockVec_begin(self)

    def end(self):
        return _CosmoBolognaLib.MockVec_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.MockVec_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.MockVec_rend(self)

    def pop_back(self):
        return _CosmoBolognaLib.MockVec_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.MockVec_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_MockVec(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.MockVec_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.MockVec_front(self)

    def back(self):
        return _CosmoBolognaLib.MockVec_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.MockVec_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.MockVec_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.MockVec_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.MockVec_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.MockVec_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_MockVec
    __del__ = lambda self: None
MockVec_swigregister = _CosmoBolognaLib.MockVec_swigregister
MockVec_swigregister(MockVec)

class HaloVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaloVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaloVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.HaloVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.HaloVec___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.HaloVec___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.HaloVec___len__(self)

    def pop(self):
        return _CosmoBolognaLib.HaloVec_pop(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.HaloVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.HaloVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.HaloVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.HaloVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.HaloVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.HaloVec___setitem__(self, *args)

    def append(self, x):
        return _CosmoBolognaLib.HaloVec_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.HaloVec_empty(self)

    def size(self):
        return _CosmoBolognaLib.HaloVec_size(self)

    def clear(self):
        return _CosmoBolognaLib.HaloVec_clear(self)

    def swap(self, v):
        return _CosmoBolognaLib.HaloVec_swap(self, v)

    def get_allocator(self):
        return _CosmoBolognaLib.HaloVec_get_allocator(self)

    def begin(self):
        return _CosmoBolognaLib.HaloVec_begin(self)

    def end(self):
        return _CosmoBolognaLib.HaloVec_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.HaloVec_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.HaloVec_rend(self)

    def pop_back(self):
        return _CosmoBolognaLib.HaloVec_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.HaloVec_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_HaloVec(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.HaloVec_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.HaloVec_front(self)

    def back(self):
        return _CosmoBolognaLib.HaloVec_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.HaloVec_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.HaloVec_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.HaloVec_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.HaloVec_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.HaloVec_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_HaloVec
    __del__ = lambda self: None
HaloVec_swigregister = _CosmoBolognaLib.HaloVec_swigregister
HaloVec_swigregister(HaloVec)

class GalaxyVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalaxyVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GalaxyVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.GalaxyVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.GalaxyVec___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.GalaxyVec___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.GalaxyVec___len__(self)

    def pop(self):
        return _CosmoBolognaLib.GalaxyVec_pop(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.GalaxyVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.GalaxyVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.GalaxyVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.GalaxyVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.GalaxyVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.GalaxyVec___setitem__(self, *args)

    def append(self, x):
        return _CosmoBolognaLib.GalaxyVec_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.GalaxyVec_empty(self)

    def size(self):
        return _CosmoBolognaLib.GalaxyVec_size(self)

    def clear(self):
        return _CosmoBolognaLib.GalaxyVec_clear(self)

    def swap(self, v):
        return _CosmoBolognaLib.GalaxyVec_swap(self, v)

    def get_allocator(self):
        return _CosmoBolognaLib.GalaxyVec_get_allocator(self)

    def begin(self):
        return _CosmoBolognaLib.GalaxyVec_begin(self)

    def end(self):
        return _CosmoBolognaLib.GalaxyVec_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.GalaxyVec_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.GalaxyVec_rend(self)

    def pop_back(self):
        return _CosmoBolognaLib.GalaxyVec_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.GalaxyVec_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_GalaxyVec(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.GalaxyVec_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.GalaxyVec_front(self)

    def back(self):
        return _CosmoBolognaLib.GalaxyVec_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.GalaxyVec_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.GalaxyVec_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.GalaxyVec_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.GalaxyVec_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.GalaxyVec_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_GalaxyVec
    __del__ = lambda self: None
GalaxyVec_swigregister = _CosmoBolognaLib.GalaxyVec_swigregister
GalaxyVec_swigregister(GalaxyVec)

class ClusterVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CosmoBolognaLib.ClusterVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CosmoBolognaLib.ClusterVec___nonzero__(self)

    def __bool__(self):
        return _CosmoBolognaLib.ClusterVec___bool__(self)

    def __len__(self):
        return _CosmoBolognaLib.ClusterVec___len__(self)

    def pop(self):
        return _CosmoBolognaLib.ClusterVec_pop(self)

    def __getslice__(self, i, j):
        return _CosmoBolognaLib.ClusterVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CosmoBolognaLib.ClusterVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CosmoBolognaLib.ClusterVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CosmoBolognaLib.ClusterVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CosmoBolognaLib.ClusterVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CosmoBolognaLib.ClusterVec___setitem__(self, *args)

    def append(self, x):
        return _CosmoBolognaLib.ClusterVec_append(self, x)

    def empty(self):
        return _CosmoBolognaLib.ClusterVec_empty(self)

    def size(self):
        return _CosmoBolognaLib.ClusterVec_size(self)

    def clear(self):
        return _CosmoBolognaLib.ClusterVec_clear(self)

    def swap(self, v):
        return _CosmoBolognaLib.ClusterVec_swap(self, v)

    def get_allocator(self):
        return _CosmoBolognaLib.ClusterVec_get_allocator(self)

    def begin(self):
        return _CosmoBolognaLib.ClusterVec_begin(self)

    def end(self):
        return _CosmoBolognaLib.ClusterVec_end(self)

    def rbegin(self):
        return _CosmoBolognaLib.ClusterVec_rbegin(self)

    def rend(self):
        return _CosmoBolognaLib.ClusterVec_rend(self)

    def pop_back(self):
        return _CosmoBolognaLib.ClusterVec_pop_back(self)

    def erase(self, *args):
        return _CosmoBolognaLib.ClusterVec_erase(self, *args)

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ClusterVec(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _CosmoBolognaLib.ClusterVec_push_back(self, x)

    def front(self):
        return _CosmoBolognaLib.ClusterVec_front(self)

    def back(self):
        return _CosmoBolognaLib.ClusterVec_back(self)

    def assign(self, n, x):
        return _CosmoBolognaLib.ClusterVec_assign(self, n, x)

    def resize(self, *args):
        return _CosmoBolognaLib.ClusterVec_resize(self, *args)

    def insert(self, *args):
        return _CosmoBolognaLib.ClusterVec_insert(self, *args)

    def reserve(self, n):
        return _CosmoBolognaLib.ClusterVec_reserve(self, n)

    def capacity(self):
        return _CosmoBolognaLib.ClusterVec_capacity(self)
    __swig_destroy__ = _CosmoBolognaLib.delete_ClusterVec
    __del__ = lambda self: None
ClusterVec_swigregister = _CosmoBolognaLib.ClusterVec_swigregister
ClusterVec_swigregister(ClusterVec)

class ObjectPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPtr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CosmoBolognaLib.new_ObjectPtr()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ObjectPtr
    __del__ = lambda self: None
ObjectPtr_swigregister = _CosmoBolognaLib.ObjectPtr_swigregister
ObjectPtr_swigregister(ObjectPtr)

class LogNormal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogNormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogNormal, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_LogNormal
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_LogNormal(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setCatalogues(self, arg2, arg3):
        return _CosmoBolognaLib.LogNormal_setCatalogues(self, arg2, arg3)

    def setParameters_from_xi(self, arg2, arg3):
        return _CosmoBolognaLib.LogNormal_setParameters_from_xi(self, arg2, arg3)

    def setParameters_from_model(self, *args):
        return _CosmoBolognaLib.LogNormal_setParameters_from_model(self, *args)

    def set_nLN(self, arg2):
        return _CosmoBolognaLib.LogNormal_set_nLN(self, arg2)

    def nLN(self):
        return _CosmoBolognaLib.LogNormal_nLN(self)

    def LNCat(self, i):
        return _CosmoBolognaLib.LogNormal_LNCat(self, i)

    def generate_LogNormal_mock(self, *args):
        return _CosmoBolognaLib.LogNormal_generate_LogNormal_mock(self, *args)
LogNormal_swigregister = _CosmoBolognaLib.LogNormal_swigregister
LogNormal_swigregister(LogNormal)


def random_catalogue_fromFile(arg1, nSub=1.1):
    return _CosmoBolognaLib.random_catalogue_fromFile(arg1, nSub)
random_catalogue_fromFile = _CosmoBolognaLib.random_catalogue_fromFile

def random_catalogue_radecred_fromFile(arg1, arg2, arg3, arg4, nSub=1.1, fact=1.):
    return _CosmoBolognaLib.random_catalogue_radecred_fromFile(arg1, arg2, arg3, arg4, nSub, fact)
random_catalogue_radecred_fromFile = _CosmoBolognaLib.random_catalogue_radecred_fromFile

def random_catalogue_box(arg1, arg2):
    return _CosmoBolognaLib.random_catalogue_box(arg1, arg2)
random_catalogue_box = _CosmoBolognaLib.random_catalogue_box

def warped_random_catalogue(arg1, arg2, arg3, arg4, arg5, arg6):
    return _CosmoBolognaLib.warped_random_catalogue(arg1, arg2, arg3, arg4, arg5, arg6)
warped_random_catalogue = _CosmoBolognaLib.warped_random_catalogue

def random_catalogue_cone(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, idum=13):
    return _CosmoBolognaLib.random_catalogue_cone(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, idum)
random_catalogue_cone = _CosmoBolognaLib.random_catalogue_cone

def random_catalogue_mock(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, idum=13):
    return _CosmoBolognaLib.random_catalogue_mock(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, idum)
random_catalogue_mock = _CosmoBolognaLib.random_catalogue_mock

def random_redshift_distribution(random, data, dir_random, nbin, convolution, sigma):
    return _CosmoBolognaLib.random_redshift_distribution(random, data, dir_random, nbin, convolution, sigma)
random_redshift_distribution = _CosmoBolognaLib.random_redshift_distribution

def random_catalogue_mock_cone(arg1, arg2, arg3, arg4, arg5, arg6):
    return _CosmoBolognaLib.random_catalogue_mock_cone(arg1, arg2, arg3, arg4, arg5, arg6)
random_catalogue_mock_cone = _CosmoBolognaLib.random_catalogue_mock_cone

def random_catalogue_VIPERS(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, idum=13):
    return _CosmoBolognaLib.random_catalogue_VIPERS(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, idum)
random_catalogue_VIPERS = _CosmoBolognaLib.random_catalogue_VIPERS

def random_sdss_angular_distribution(arg1, arg2, arg3, veto=0):
    return _CosmoBolognaLib.random_sdss_angular_distribution(arg1, arg2, arg3, veto)
random_sdss_angular_distribution = _CosmoBolognaLib.random_sdss_angular_distribution
class Pairs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pairs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pairs, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Pairs
    __del__ = lambda self: None

    def nlog(self):
        return _CosmoBolognaLib.Pairs_nlog(self)

    def nlin(self):
        return _CosmoBolognaLib.Pairs_nlin(self)

    def ncos(self):
        return _CosmoBolognaLib.Pairs_ncos(self)

    def thetaMin(self):
        return _CosmoBolognaLib.Pairs_thetaMin(self)

    def thetaMax(self):
        return _CosmoBolognaLib.Pairs_thetaMax(self)

    def rMin(self):
        return _CosmoBolognaLib.Pairs_rMin(self)

    def rMax(self):
        return _CosmoBolognaLib.Pairs_rMax(self)

    def PPlog(self, *args):
        return _CosmoBolognaLib.Pairs_PPlog(self, *args)

    def PPlin(self, *args):
        return _CosmoBolognaLib.Pairs_PPlin(self, *args)

    def PP2d(self, *args):
        return _CosmoBolognaLib.Pairs_PP2d(self, *args)

    def PPslog(self, *args):
        return _CosmoBolognaLib.Pairs_PPslog(self, *args)

    def PPcoslog(self, *args):
        return _CosmoBolognaLib.Pairs_PPcoslog(self, *args)

    def PPcoslin(self, *args):
        return _CosmoBolognaLib.Pairs_PPcoslin(self, *args)

    def set_nlog(self, nlog):
        return _CosmoBolognaLib.Pairs_set_nlog(self, nlog)

    def set_nlin(self, nlin):
        return _CosmoBolognaLib.Pairs_set_nlin(self, nlin)

    def set_ncos(self, ncos):
        return _CosmoBolognaLib.Pairs_set_ncos(self, ncos)

    def set_rMin(self, rMin):
        return _CosmoBolognaLib.Pairs_set_rMin(self, rMin)

    def set_rMax(self, rMax):
        return _CosmoBolognaLib.Pairs_set_rMax(self, rMax)

    def set_thetaMin(self, thetaMin):
        return _CosmoBolognaLib.Pairs_set_thetaMin(self, thetaMin)

    def set_thetaMax(self, thetaMax):
        return _CosmoBolognaLib.Pairs_set_thetaMax(self, thetaMax)

    def set_logbinSize_inv(self, logbinSize):
        return _CosmoBolognaLib.Pairs_set_logbinSize_inv(self, logbinSize)

    def set_linbinSize_inv(self, linbinSize):
        return _CosmoBolognaLib.Pairs_set_linbinSize_inv(self, linbinSize)

    def set_cosbinSize_inv(self, cosbinSize):
        return _CosmoBolognaLib.Pairs_set_cosbinSize_inv(self, cosbinSize)

    def set_PPlog(self, i, pp):
        return _CosmoBolognaLib.Pairs_set_PPlog(self, i, pp)

    def set_PPlin(self, i, pp):
        return _CosmoBolognaLib.Pairs_set_PPlin(self, i, pp)

    def set_PP2d(self, i, j, pp):
        return _CosmoBolognaLib.Pairs_set_PP2d(self, i, j, pp)

    def set_PPslog(self, i, j, pp):
        return _CosmoBolognaLib.Pairs_set_PPslog(self, i, j, pp)

    def set_PPcoslog(self, i, j, pp):
        return _CosmoBolognaLib.Pairs_set_PPcoslog(self, i, j, pp)

    def set_PPcoslin(self, i, j, pp):
        return _CosmoBolognaLib.Pairs_set_PPcoslin(self, i, j, pp)

    def sum_1D_log(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs_sum_1D_log(self, arg2, ww)

    def sum_1D_lin(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs_sum_1D_lin(self, arg2, ww)

    def sum_2D_linlin(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs_sum_2D_linlin(self, arg2, ww)

    def sum_2D_loglin(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs_sum_2D_loglin(self, arg2, ww)

    def sum_2Drcos_loglin(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs_sum_2Drcos_loglin(self, arg2, ww)

    def sum_2Drcos_linlin(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs_sum_2Drcos_linlin(self, arg2, ww)

    def sum_all(self, *args):
        return _CosmoBolognaLib.Pairs_sum_all(self, *args)

    def put_1D_log(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs_put_1D_log(self, arg2, arg3)

    def put_1D_lin(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs_put_1D_lin(self, arg2, arg3)

    def put_2D_linlin(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs_put_2D_linlin(self, arg2, arg3)

    def put_2D_loglin(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs_put_2D_loglin(self, arg2, arg3)

    def put_2Drcos_loglin(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs_put_2Drcos_loglin(self, arg2, arg3)

    def put_2Drcos_linlin(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs_put_2Drcos_linlin(self, arg2, arg3)

    def put_all(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs_put_all(self, arg2, arg3)

    def __init__(self):
        this = _CosmoBolognaLib.new_Pairs()
        try:
            self.this.append(this)
        except:
            self.this = this
Pairs_swigregister = _CosmoBolognaLib.Pairs_swigregister
Pairs_swigregister(Pairs)

class Pairs2D(Pairs):
    __swig_setmethods__ = {}
    for _s in [Pairs]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pairs2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Pairs]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pairs2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pairs2D(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def nlog(self):
        return _CosmoBolognaLib.Pairs2D_nlog(self)

    def nlin(self):
        return _CosmoBolognaLib.Pairs2D_nlin(self)

    def thetaMin(self):
        return _CosmoBolognaLib.Pairs2D_thetaMin(self)

    def thetaMax(self):
        return _CosmoBolognaLib.Pairs2D_thetaMax(self)

    def PPlog(self, *args):
        return _CosmoBolognaLib.Pairs2D_PPlog(self, *args)

    def PPlin(self, *args):
        return _CosmoBolognaLib.Pairs2D_PPlin(self, *args)

    def set_nlog(self, nlog):
        return _CosmoBolognaLib.Pairs2D_set_nlog(self, nlog)

    def set_nlin(self, nlin):
        return _CosmoBolognaLib.Pairs2D_set_nlin(self, nlin)

    def set_thetaMin(self, thetaMin):
        return _CosmoBolognaLib.Pairs2D_set_thetaMin(self, thetaMin)

    def set_thetaMax(self, thetaMax):
        return _CosmoBolognaLib.Pairs2D_set_thetaMax(self, thetaMax)

    def set_logbinSize_inv(self, logbinSize):
        return _CosmoBolognaLib.Pairs2D_set_logbinSize_inv(self, logbinSize)

    def set_linbinSize_inv(self, linbinSize):
        return _CosmoBolognaLib.Pairs2D_set_linbinSize_inv(self, linbinSize)

    def set_PPlog(self, i, pp):
        return _CosmoBolognaLib.Pairs2D_set_PPlog(self, i, pp)

    def set_PPlin(self, i, pp):
        return _CosmoBolognaLib.Pairs2D_set_PPlin(self, i, pp)

    def sum_all(self, *args):
        return _CosmoBolognaLib.Pairs2D_sum_all(self, *args)

    def put_all(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs2D_put_all(self, arg2, arg3)
    __swig_destroy__ = _CosmoBolognaLib.delete_Pairs2D
    __del__ = lambda self: None
Pairs2D_swigregister = _CosmoBolognaLib.Pairs2D_swigregister
Pairs2D_swigregister(Pairs2D)

class Pairs3D(Pairs):
    __swig_setmethods__ = {}
    for _s in [Pairs]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pairs3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Pairs]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pairs3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Pairs3D(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def nlog(self):
        return _CosmoBolognaLib.Pairs3D_nlog(self)

    def nlin(self):
        return _CosmoBolognaLib.Pairs3D_nlin(self)

    def ncos(self):
        return _CosmoBolognaLib.Pairs3D_ncos(self)

    def rMin(self):
        return _CosmoBolognaLib.Pairs3D_rMin(self)

    def rMax(self):
        return _CosmoBolognaLib.Pairs3D_rMax(self)

    def PPlog(self, *args):
        return _CosmoBolognaLib.Pairs3D_PPlog(self, *args)

    def PPlin(self, *args):
        return _CosmoBolognaLib.Pairs3D_PPlin(self, *args)

    def PP2d(self, *args):
        return _CosmoBolognaLib.Pairs3D_PP2d(self, *args)

    def PPslog(self, *args):
        return _CosmoBolognaLib.Pairs3D_PPslog(self, *args)

    def PPcoslog(self, *args):
        return _CosmoBolognaLib.Pairs3D_PPcoslog(self, *args)

    def PPcoslin(self, *args):
        return _CosmoBolognaLib.Pairs3D_PPcoslin(self, *args)

    def set_nlog(self, nlog):
        return _CosmoBolognaLib.Pairs3D_set_nlog(self, nlog)

    def set_nlin(self, nlin):
        return _CosmoBolognaLib.Pairs3D_set_nlin(self, nlin)

    def set_ncos(self, ncos):
        return _CosmoBolognaLib.Pairs3D_set_ncos(self, ncos)

    def set_rMin(self, rMin):
        return _CosmoBolognaLib.Pairs3D_set_rMin(self, rMin)

    def set_rMax(self, rMax):
        return _CosmoBolognaLib.Pairs3D_set_rMax(self, rMax)

    def set_logbinSize_inv(self, logbinSize):
        return _CosmoBolognaLib.Pairs3D_set_logbinSize_inv(self, logbinSize)

    def set_linbinSize_inv(self, linbinSize):
        return _CosmoBolognaLib.Pairs3D_set_linbinSize_inv(self, linbinSize)

    def set_cosbinSize_inv(self, cosbinSize):
        return _CosmoBolognaLib.Pairs3D_set_cosbinSize_inv(self, cosbinSize)

    def set_PPlog(self, i, pp):
        return _CosmoBolognaLib.Pairs3D_set_PPlog(self, i, pp)

    def set_PPlin(self, i, pp):
        return _CosmoBolognaLib.Pairs3D_set_PPlin(self, i, pp)

    def set_PP2d(self, i, j, pp):
        return _CosmoBolognaLib.Pairs3D_set_PP2d(self, i, j, pp)

    def set_PPslog(self, i, j, pp):
        return _CosmoBolognaLib.Pairs3D_set_PPslog(self, i, j, pp)

    def set_PPcoslog(self, i, j, pp):
        return _CosmoBolognaLib.Pairs3D_set_PPcoslog(self, i, j, pp)

    def set_PPcoslin(self, i, j, pp):
        return _CosmoBolognaLib.Pairs3D_set_PPcoslin(self, i, j, pp)

    def sum_1D_log(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs3D_sum_1D_log(self, arg2, ww)

    def sum_1D_lin(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs3D_sum_1D_lin(self, arg2, ww)

    def sum_2D_linlin(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs3D_sum_2D_linlin(self, arg2, ww)

    def sum_2D_loglin(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs3D_sum_2D_loglin(self, arg2, ww)

    def sum_2Drcos_loglin(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs3D_sum_2Drcos_loglin(self, arg2, ww)

    def sum_2Drcos_linlin(self, arg2, ww=1):
        return _CosmoBolognaLib.Pairs3D_sum_2Drcos_linlin(self, arg2, ww)

    def sum_all(self, *args):
        return _CosmoBolognaLib.Pairs3D_sum_all(self, *args)

    def put_1D_log(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs3D_put_1D_log(self, arg2, arg3)

    def put_1D_lin(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs3D_put_1D_lin(self, arg2, arg3)

    def put_2D_linlin(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs3D_put_2D_linlin(self, arg2, arg3)

    def put_2D_loglin(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs3D_put_2D_loglin(self, arg2, arg3)

    def put_2Drcos_loglin(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs3D_put_2Drcos_loglin(self, arg2, arg3)

    def put_2Drcos_linlin(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs3D_put_2Drcos_linlin(self, arg2, arg3)

    def put_all(self, arg2, arg3):
        return _CosmoBolognaLib.Pairs3D_put_all(self, arg2, arg3)
    __swig_destroy__ = _CosmoBolognaLib.delete_Pairs3D
    __del__ = lambda self: None
Pairs3D_swigregister = _CosmoBolognaLib.Pairs3D_swigregister
Pairs3D_swigregister(Pairs3D)

class TwoPointCorrelation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoPointCorrelation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TwoPointCorrelation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_TwoPointCorrelation
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_TwoPointCorrelation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setParameters(self, arg2, arg3, arg4, arg5, arg6, ANG=False):
        return _CosmoBolognaLib.TwoPointCorrelation_setParameters(self, arg2, arg3, arg4, arg5, arg6, ANG)

    def allocate_vectors_xi(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_allocate_vectors_xi(self, arg2)

    def allocate_vectors_ACF(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_allocate_vectors_ACF(self, arg2)

    def erase_multipoles(self):
        return _CosmoBolognaLib.TwoPointCorrelation_erase_multipoles(self)

    def write_xi(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_write_xi(self, *args)

    def count_pairs_regions(self, arg2, arg3, arg4, arg5, tcount=False):
        return _CosmoBolognaLib.TwoPointCorrelation_count_pairs_regions(self, arg2, arg3, arg4, arg5, tcount)

    def measure_xi(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_measure_xi(self, *args)

    def get_covariance(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_get_covariance(self, *args)

    def set_gg_pairs(self, arg2, arg3, arg4, arg5, arg6, arg7):
        return _CosmoBolognaLib.TwoPointCorrelation_set_gg_pairs(self, arg2, arg3, arg4, arg5, arg6, arg7)

    def set_rr_pairs(self, arg2, arg3, arg4, arg5, arg6, arg7):
        return _CosmoBolognaLib.TwoPointCorrelation_set_rr_pairs(self, arg2, arg3, arg4, arg5, arg6, arg7)

    def set_gr_pairs(self, arg2, arg3, arg4, arg5, arg6, arg7):
        return _CosmoBolognaLib.TwoPointCorrelation_set_gr_pairs(self, arg2, arg3, arg4, arg5, arg6, arg7)

    def write_pairs_subSamples(self, arg2, arg3, arg4, arg5):
        return _CosmoBolognaLib.TwoPointCorrelation_write_pairs_subSamples(self, arg2, arg3, arg4, arg5)

    def read_pairs_subSamples(self, arg2, arg3, arg4, arg5):
        return _CosmoBolognaLib.TwoPointCorrelation_read_pairs_subSamples(self, arg2, arg3, arg4, arg5)

    def write_xi_Mocks(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_write_xi_Mocks(self, arg2)

    def measure_projected_xi_Mocks(self, arg2, arg3):
        return _CosmoBolognaLib.TwoPointCorrelation_measure_projected_xi_Mocks(self, arg2, arg3)

    def measure_wtheta(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_measure_wtheta(self, *args)

    def write_wtheta(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_write_wtheta(self, arg2)

    def Error(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_Error(self, *args)

    def measure_covariance_1D(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_measure_covariance_1D(self, *args)

    def measure_projected_xi(self, arg2, arg3):
        return _CosmoBolognaLib.TwoPointCorrelation_measure_projected_xi(self, arg2, arg3)

    def measure_multipoles_xirmu(self, rApprox=0.):
        return _CosmoBolognaLib.TwoPointCorrelation_measure_multipoles_xirmu(self, rApprox)

    def measure_multipoles_xirppi(self, step_cos=3000):
        return _CosmoBolognaLib.TwoPointCorrelation_measure_multipoles_xirppi(self, step_cos)

    def measure_effective_multipoles_xirppi(self):
        return _CosmoBolognaLib.TwoPointCorrelation_measure_effective_multipoles_xirppi(self)

    def write_multipoles(self, arg2, arg3):
        return _CosmoBolognaLib.TwoPointCorrelation_write_multipoles(self, arg2, arg3)

    def read_multipoles(self, arg2, arg3):
        return _CosmoBolognaLib.TwoPointCorrelation_read_multipoles(self, arg2, arg3)

    def measure_normalized_quadrupole(self, rApprox=3.):
        return _CosmoBolognaLib.TwoPointCorrelation_measure_normalized_quadrupole(self, rApprox)

    def sigmaR_obj(self, arg2, arg3):
        return _CosmoBolognaLib.TwoPointCorrelation_sigmaR_obj(self, arg2, arg3)

    def measure_bias(self, *args):
        return _CosmoBolognaLib.TwoPointCorrelation_measure_bias(self, *args)

    def mean_bias(self, arg2, arg3, proj=False, NL=False):
        return _CosmoBolognaLib.TwoPointCorrelation_mean_bias(self, arg2, arg3, proj, NL)

    def error_mean_bias(self, arg2, arg3, proj=False, NL=False):
        return _CosmoBolognaLib.TwoPointCorrelation_error_mean_bias(self, arg2, arg3, proj, NL)

    def fit_bias(self, arg2, arg3, proj=False, NL=False):
        return _CosmoBolognaLib.TwoPointCorrelation_fit_bias(self, arg2, arg3, proj, NL)

    def read_bias(self, arg2, proj=False):
        return _CosmoBolognaLib.TwoPointCorrelation_read_bias(self, arg2, proj)

    def compute_real_space_xi_deprojected(self, arg2, arg3):
        return _CosmoBolognaLib.TwoPointCorrelation_compute_real_space_xi_deprojected(self, arg2, arg3)

    def derive_real_xi(self, arg2, arg3, arg4, arg5):
        return _CosmoBolognaLib.TwoPointCorrelation_derive_real_xi(self, arg2, arg3, arg4, arg5)

    def N_R(self):
        return _CosmoBolognaLib.TwoPointCorrelation_N_R(self)

    def nlinbins(self):
        return _CosmoBolognaLib.TwoPointCorrelation_nlinbins(self)

    def nlogbins(self):
        return _CosmoBolognaLib.TwoPointCorrelation_nlogbins(self)

    def ncosbins(self):
        return _CosmoBolognaLib.TwoPointCorrelation_ncosbins(self)

    def linbinsz(self):
        return _CosmoBolognaLib.TwoPointCorrelation_linbinsz(self)

    def logbinsz(self):
        return _CosmoBolognaLib.TwoPointCorrelation_logbinsz(self)

    def cosbinsz(self):
        return _CosmoBolognaLib.TwoPointCorrelation_cosbinsz(self)

    def shift_lin(self):
        return _CosmoBolognaLib.TwoPointCorrelation_shift_lin(self)

    def shift_log(self):
        return _CosmoBolognaLib.TwoPointCorrelation_shift_log(self)

    def shift_cos(self):
        return _CosmoBolognaLib.TwoPointCorrelation_shift_cos(self)

    def rad_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_rad_log(self, i)

    def xi_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi_log(self, i)

    def error_xi_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi_log(self, i)

    def rad_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_rad_lin(self, i)

    def xi_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi_lin(self, i)

    def error_xi_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi_lin(self, i)

    def xi_2d_lin(self, i, j):
        return _CosmoBolognaLib.TwoPointCorrelation_xi_2d_lin(self, i, j)

    def error_xi_2d_lin(self, i, j):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi_2d_lin(self, i, j)

    def rad_real_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_rad_real_lin(self, i)

    def xi_real_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi_real_lin(self, i)

    def xi_real_lin_extr(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi_real_lin_extr(self, i)

    def xi_real_lin_interp(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi_real_lin_interp(self, i)

    def error_xi_real_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi_real_lin(self, i)

    def rad_real_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_rad_real_log(self, i)

    def xi_real_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi_real_log(self, i)

    def rp_proj(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_rp_proj(self, i)

    def xi_proj(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi_proj(self, i)

    def error_xi_proj(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi_proj(self, i)

    def xi0_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi0_log(self, i)

    def xi2_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi2_log(self, i)

    def xi4_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi4_log(self, i)

    def xi0_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi0_lin(self, i)

    def xi2_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi2_lin(self, i)

    def xi4_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_xi4_lin(self, i)

    def error_xi0_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi0_log(self, i)

    def error_xi2_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi2_log(self, i)

    def error_xi4_log(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi4_log(self, i)

    def error_xi0_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi0_lin(self, i)

    def error_xi2_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi2_lin(self, i)

    def error_xi4_lin(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_xi4_lin(self, i)

    def quad(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_quad(self, i)

    def error_quad(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_quad(self, i)

    def rMIN(self):
        return _CosmoBolognaLib.TwoPointCorrelation_rMIN(self)

    def rMAX(self):
        return _CosmoBolognaLib.TwoPointCorrelation_rMAX(self)

    def rMAX_eff(self):
        return _CosmoBolognaLib.TwoPointCorrelation_rMAX_eff(self)

    def rr_bias_lin_xi(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_rr_bias_lin_xi(self, i)

    def bias_lin_xi(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_bias_lin_xi(self, i)

    def error_bias_lin_xi(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_bias_lin_xi(self, i)

    def rr_bias_nl_xi(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_rr_bias_nl_xi(self, i)

    def bias_nl_xi(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_bias_nl_xi(self, i)

    def error_bias_nl_xi(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_bias_nl_xi(self, i)

    def rr_bias_lin_wp(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_rr_bias_lin_wp(self, i)

    def bias_lin_wp(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_bias_lin_wp(self, i)

    def error_bias_lin_wp(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_bias_lin_wp(self, i)

    def rr_bias_nl_wp(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_rr_bias_nl_wp(self, i)

    def bias_nl_wp(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_bias_nl_wp(self, i)

    def error_bias_nl_wp(self, i):
        return _CosmoBolognaLib.TwoPointCorrelation_error_bias_nl_wp(self, i)

    def bias(self):
        return _CosmoBolognaLib.TwoPointCorrelation_bias(self)

    def bias_min(self):
        return _CosmoBolognaLib.TwoPointCorrelation_bias_min(self)

    def bias_max(self):
        return _CosmoBolognaLib.TwoPointCorrelation_bias_max(self)

    def r0_linextr(self):
        return _CosmoBolognaLib.TwoPointCorrelation_r0_linextr(self)

    def gamma_linextr(self):
        return _CosmoBolognaLib.TwoPointCorrelation_gamma_linextr(self)

    def sizeof_xi_log(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi_log(self)

    def sizeof_xi_lin(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi_lin(self)

    def sizeof_xi_real_lin(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi_real_lin(self)

    def sizeof_xi_real_lin_extr(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi_real_lin_extr(self)

    def sizeof_xi_real_lin_interp(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi_real_lin_interp(self)

    def sizeof_xi_proj(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi_proj(self)

    def sizeof_xi0_log(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi0_log(self)

    def sizeof_xi2_log(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi2_log(self)

    def sizeof_xi4_log(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi4_log(self)

    def sizeof_xi0_lin(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi0_lin(self)

    def sizeof_xi2_lin(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi2_lin(self)

    def sizeof_xi4_lin(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_xi4_lin(self)

    def sizeof_quad(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_quad(self)

    def sizeof_bias_lin_xi(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_bias_lin_xi(self)

    def sizeof_bias_nl_xi(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_bias_nl_xi(self)

    def sizeof_bias_lin_wp(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_bias_lin_wp(self)

    def sizeof_bias_nl_wp(self):
        return _CosmoBolognaLib.TwoPointCorrelation_sizeof_bias_nl_wp(self)

    def bin_proj(self):
        return _CosmoBolognaLib.TwoPointCorrelation_bin_proj(self)

    def nObjects(self):
        return _CosmoBolognaLib.TwoPointCorrelation_nObjects(self)

    def Xmin(self):
        return _CosmoBolognaLib.TwoPointCorrelation_Xmin(self)

    def Xmax(self):
        return _CosmoBolognaLib.TwoPointCorrelation_Xmax(self)

    def Ymin(self):
        return _CosmoBolognaLib.TwoPointCorrelation_Ymin(self)

    def Ymax(self):
        return _CosmoBolognaLib.TwoPointCorrelation_Ymax(self)

    def Zmin(self):
        return _CosmoBolognaLib.TwoPointCorrelation_Zmin(self)

    def Zmax(self):
        return _CosmoBolognaLib.TwoPointCorrelation_Zmax(self)

    def set_nGal(self, nGal):
        return _CosmoBolognaLib.TwoPointCorrelation_set_nGal(self, nGal)

    def set_nRan(self, nRan):
        return _CosmoBolognaLib.TwoPointCorrelation_set_nRan(self, nRan)

    def set_rad_log(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_rad_log(self, arg2)

    def set_xi_log(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_xi_log(self, arg2)

    def set_error_xi_log(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_error_xi_log(self, arg2)

    def set_rad_lin(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_rad_lin(self, arg2)

    def set_xi_lin(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_xi_lin(self, arg2)

    def set_error_xi_lin(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_error_xi_lin(self, arg2)

    def set_error_xi_2d_lin(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_error_xi_2d_lin(self, arg2)

    def set_error_xi_2d_loglin(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_error_xi_2d_loglin(self, arg2)

    def set_error_xi_coslog(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_error_xi_coslog(self, arg2)

    def set_error_xi_coslin(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_error_xi_coslin(self, arg2)

    def set_error_proj(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_error_proj(self, arg2)

    def set_correlations(self, arg2, arg3, arg4, arg5, arg6, arg7):
        return _CosmoBolognaLib.TwoPointCorrelation_set_correlations(self, arg2, arg3, arg4, arg5, arg6, arg7)

    def set_xi_real_log(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_xi_real_log(self, arg2)

    def set_xi_real_lin(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_xi_real_lin(self, arg2)

    def set_xi_real_lin_interp(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_xi_real_lin_interp(self, arg2)

    def set_xi_real_lin_extr(self, arg2):
        return _CosmoBolognaLib.TwoPointCorrelation_set_xi_real_lin_extr(self, arg2)

    def set_xi_proj(self, arg2, arg3, arg4):
        return _CosmoBolognaLib.TwoPointCorrelation_set_xi_proj(self, arg2, arg3, arg4)
TwoPointCorrelation_swigregister = _CosmoBolognaLib.TwoPointCorrelation_swigregister
TwoPointCorrelation_swigregister(TwoPointCorrelation)

class ModelTwoPointCorrelation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelTwoPointCorrelation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelTwoPointCorrelation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ModelTwoPointCorrelation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ModelTwoPointCorrelation
    __del__ = lambda self: None

    def setLimitLog(self, arg2, arg3):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_setLimitLog(self, arg2, arg3)

    def setLimit(self, *args):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_setLimit(self, *args)

    def compute_xi2D_modelXiMeasured(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, bias_nl=False, bA=0., v_min=-3000., v_max=3000., step_v=500):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_compute_xi2D_modelXiMeasured(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, bias_nl, bA, v_min, v_max, step_v)

    def compute_xi2D_model(self, *args):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_compute_xi2D_model(self, *args)

    def compute_multipoles_modelXiMeasured(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, bias_nl=False, bA=0., v_min=-3000., v_max=3000., step_v=500, step_cos=3000):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_compute_multipoles_modelXiMeasured(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, bias_nl, bA, v_min, v_max, step_v, step_cos)

    def compute_effective_multipoles_modelXiMeasured(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, bias_nl=False, bA=0., v_min=-3000., v_max=3000., step_v=500):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_compute_effective_multipoles_modelXiMeasured(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, bias_nl, bA, v_min, v_max, step_v)

    def measure_beta_KaiserLimit_XiMeasured(self, arg2, arg3, arg4, arg5, beta_guess=1.):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_measure_beta_KaiserLimit_XiMeasured(self, arg2, arg3, arg4, arg5, beta_guess)

    def measure_beta_XiMeasured(self, arg2, arg3, arg4, arg5, arg6, beta_guess=1.):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_measure_beta_XiMeasured(self, arg2, arg3, arg4, arg5, arg6, beta_guess)

    def measure_beta_sigma12_DispersionModel_XiMeasured(self, *args):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_measure_beta_sigma12_DispersionModel_XiMeasured(self, *args)

    def measure_beta_sigma12_DispersionModel_XiMeasured_multipoles(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, v_min=-3000., v_max=3000., step_v=500):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_measure_beta_sigma12_DispersionModel_XiMeasured_multipoles(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, v_min, v_max, step_v)

    def measure_fsigma8_KaiserLimit(self, *args):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_measure_fsigma8_KaiserLimit(self, *args)

    def measure_fsigma8_bsigma8(self, *args):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_measure_fsigma8_bsigma8(self, *args)

    def relative_error_beta_catalogue(self, arg2, arg3, arg4, proj=False, NL=False):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_relative_error_beta_catalogue(self, arg2, arg3, arg4, proj, NL)

    def relative_error_beta_catalogue_box(self, arg2, arg3, proj=False, NL=False):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_relative_error_beta_catalogue_box(self, arg2, arg3, proj, NL)

    def write_xi2D_DispersionModelXiMeasured(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, bias_nl=False, bA=0., v_min=-3000., v_max=3000., step_v=500, rank=0):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_write_xi2D_DispersionModelXiMeasured(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, bias_nl, bA, v_min, v_max, step_v, rank)

    def write_multipoles_DispersionModelXiMeasured(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, effective=True, v_min=-3000., v_max=3000., step_v=500, step_cos=3000, rank=0):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_write_multipoles_DispersionModelXiMeasured(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, effective, v_min, v_max, step_v, step_cos, rank)

    def write_xi2D_DispersionModel(self, *args):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_write_xi2D_DispersionModel(self, *args)

    def write_xi2D_CWModel(self, *args):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_write_xi2D_CWModel(self, *args)

    def write_map(self, arg2, arg3, rank=0):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_write_map(self, arg2, arg3, rank)

    def MhaloMin(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, proj=False, NL=False):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_MhaloMin(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, proj, NL)

    def beta_best(self):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_beta_best(self)

    def error_beta(self):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_error_beta(self)

    def sigma12_best(self):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_sigma12_best(self)

    def error_sigma12(self):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_error_sigma12(self)

    def bias_best(self):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_bias_best(self)

    def bias_sigma8_best(self):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_bias_sigma8_best(self)

    def f_sigma8_best(self):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_f_sigma8_best(self)

    def bA_best(self):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_bA_best(self)

    def E_min(self):
        return _CosmoBolognaLib.ModelTwoPointCorrelation_E_min(self)
ModelTwoPointCorrelation_swigregister = _CosmoBolognaLib.ModelTwoPointCorrelation_swigregister
ModelTwoPointCorrelation_swigregister(ModelTwoPointCorrelation)

class STR_xi0K(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STR_xi0K, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STR_xi0K, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cosm"] = _CosmoBolognaLib.STR_xi0K_cosm_set
    __swig_getmethods__["cosm"] = _CosmoBolognaLib.STR_xi0K_cosm_get
    if _newclass:
        cosm = _swig_property(_CosmoBolognaLib.STR_xi0K_cosm_get, _CosmoBolognaLib.STR_xi0K_cosm_set)
    __swig_setmethods__["bias_sigma8"] = _CosmoBolognaLib.STR_xi0K_bias_sigma8_set
    __swig_getmethods__["bias_sigma8"] = _CosmoBolognaLib.STR_xi0K_bias_sigma8_get
    if _newclass:
        bias_sigma8 = _swig_property(_CosmoBolognaLib.STR_xi0K_bias_sigma8_get, _CosmoBolognaLib.STR_xi0K_bias_sigma8_set)
    __swig_setmethods__["author"] = _CosmoBolognaLib.STR_xi0K_author_set
    __swig_getmethods__["author"] = _CosmoBolognaLib.STR_xi0K_author_get
    if _newclass:
        author = _swig_property(_CosmoBolognaLib.STR_xi0K_author_get, _CosmoBolognaLib.STR_xi0K_author_set)
    __swig_setmethods__["redshift"] = _CosmoBolognaLib.STR_xi0K_redshift_set
    __swig_getmethods__["redshift"] = _CosmoBolognaLib.STR_xi0K_redshift_get
    if _newclass:
        redshift = _swig_property(_CosmoBolognaLib.STR_xi0K_redshift_get, _CosmoBolognaLib.STR_xi0K_redshift_set)
    __swig_setmethods__["Model"] = _CosmoBolognaLib.STR_xi0K_Model_set
    __swig_getmethods__["Model"] = _CosmoBolognaLib.STR_xi0K_Model_get
    if _newclass:
        Model = _swig_property(_CosmoBolognaLib.STR_xi0K_Model_get, _CosmoBolognaLib.STR_xi0K_Model_set)
    __swig_setmethods__["xiType"] = _CosmoBolognaLib.STR_xi0K_xiType_set
    __swig_getmethods__["xiType"] = _CosmoBolognaLib.STR_xi0K_xiType_get
    if _newclass:
        xiType = _swig_property(_CosmoBolognaLib.STR_xi0K_xiType_get, _CosmoBolognaLib.STR_xi0K_xiType_set)
    __swig_setmethods__["k_star"] = _CosmoBolognaLib.STR_xi0K_k_star_set
    __swig_getmethods__["k_star"] = _CosmoBolognaLib.STR_xi0K_k_star_get
    if _newclass:
        k_star = _swig_property(_CosmoBolognaLib.STR_xi0K_k_star_get, _CosmoBolognaLib.STR_xi0K_k_star_set)
    __swig_setmethods__["xiNL"] = _CosmoBolognaLib.STR_xi0K_xiNL_set
    __swig_getmethods__["xiNL"] = _CosmoBolognaLib.STR_xi0K_xiNL_get
    if _newclass:
        xiNL = _swig_property(_CosmoBolognaLib.STR_xi0K_xiNL_get, _CosmoBolognaLib.STR_xi0K_xiNL_set)
    __swig_setmethods__["v_min"] = _CosmoBolognaLib.STR_xi0K_v_min_set
    __swig_getmethods__["v_min"] = _CosmoBolognaLib.STR_xi0K_v_min_get
    if _newclass:
        v_min = _swig_property(_CosmoBolognaLib.STR_xi0K_v_min_get, _CosmoBolognaLib.STR_xi0K_v_min_set)
    __swig_setmethods__["v_max"] = _CosmoBolognaLib.STR_xi0K_v_max_set
    __swig_getmethods__["v_max"] = _CosmoBolognaLib.STR_xi0K_v_max_get
    if _newclass:
        v_max = _swig_property(_CosmoBolognaLib.STR_xi0K_v_max_get, _CosmoBolognaLib.STR_xi0K_v_max_set)
    __swig_setmethods__["step_v"] = _CosmoBolognaLib.STR_xi0K_step_v_set
    __swig_getmethods__["step_v"] = _CosmoBolognaLib.STR_xi0K_step_v_get
    if _newclass:
        step_v = _swig_property(_CosmoBolognaLib.STR_xi0K_step_v_get, _CosmoBolognaLib.STR_xi0K_step_v_set)
    __swig_setmethods__["norm"] = _CosmoBolognaLib.STR_xi0K_norm_set
    __swig_getmethods__["norm"] = _CosmoBolognaLib.STR_xi0K_norm_get
    if _newclass:
        norm = _swig_property(_CosmoBolognaLib.STR_xi0K_norm_get, _CosmoBolognaLib.STR_xi0K_norm_set)
    __swig_setmethods__["r_min"] = _CosmoBolognaLib.STR_xi0K_r_min_set
    __swig_getmethods__["r_min"] = _CosmoBolognaLib.STR_xi0K_r_min_get
    if _newclass:
        r_min = _swig_property(_CosmoBolognaLib.STR_xi0K_r_min_get, _CosmoBolognaLib.STR_xi0K_r_min_set)
    __swig_setmethods__["r_max"] = _CosmoBolognaLib.STR_xi0K_r_max_set
    __swig_getmethods__["r_max"] = _CosmoBolognaLib.STR_xi0K_r_max_get
    if _newclass:
        r_max = _swig_property(_CosmoBolognaLib.STR_xi0K_r_max_get, _CosmoBolognaLib.STR_xi0K_r_max_set)
    __swig_setmethods__["k_min"] = _CosmoBolognaLib.STR_xi0K_k_min_set
    __swig_getmethods__["k_min"] = _CosmoBolognaLib.STR_xi0K_k_min_get
    if _newclass:
        k_min = _swig_property(_CosmoBolognaLib.STR_xi0K_k_min_get, _CosmoBolognaLib.STR_xi0K_k_min_set)
    __swig_setmethods__["k_max"] = _CosmoBolognaLib.STR_xi0K_k_max_set
    __swig_getmethods__["k_max"] = _CosmoBolognaLib.STR_xi0K_k_max_get
    if _newclass:
        k_max = _swig_property(_CosmoBolognaLib.STR_xi0K_k_max_get, _CosmoBolognaLib.STR_xi0K_k_max_set)
    __swig_setmethods__["aa"] = _CosmoBolognaLib.STR_xi0K_aa_set
    __swig_getmethods__["aa"] = _CosmoBolognaLib.STR_xi0K_aa_get
    if _newclass:
        aa = _swig_property(_CosmoBolognaLib.STR_xi0K_aa_get, _CosmoBolognaLib.STR_xi0K_aa_set)
    __swig_setmethods__["GSL"] = _CosmoBolognaLib.STR_xi0K_GSL_set
    __swig_getmethods__["GSL"] = _CosmoBolognaLib.STR_xi0K_GSL_get
    if _newclass:
        GSL = _swig_property(_CosmoBolognaLib.STR_xi0K_GSL_get, _CosmoBolognaLib.STR_xi0K_GSL_set)
    __swig_setmethods__["prec"] = _CosmoBolognaLib.STR_xi0K_prec_set
    __swig_getmethods__["prec"] = _CosmoBolognaLib.STR_xi0K_prec_get
    if _newclass:
        prec = _swig_property(_CosmoBolognaLib.STR_xi0K_prec_get, _CosmoBolognaLib.STR_xi0K_prec_set)
    __swig_setmethods__["file_par"] = _CosmoBolognaLib.STR_xi0K_file_par_set
    __swig_getmethods__["file_par"] = _CosmoBolognaLib.STR_xi0K_file_par_get
    if _newclass:
        file_par = _swig_property(_CosmoBolognaLib.STR_xi0K_file_par_get, _CosmoBolognaLib.STR_xi0K_file_par_set)

    def __init__(self):
        this = _CosmoBolognaLib.new_STR_xi0K()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_STR_xi0K
    __del__ = lambda self: None
STR_xi0K_swigregister = _CosmoBolognaLib.STR_xi0K_swigregister
STR_xi0K_swigregister(STR_xi0K)

class Triplets(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplets, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triplets, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplets
    __del__ = lambda self: None

    def binsize(self):
        return _CosmoBolognaLib.Triplets_binsize(self)

    def side_s(self):
        return _CosmoBolognaLib.Triplets_side_s(self)

    def side_u(self):
        return _CosmoBolognaLib.Triplets_side_u(self)

    def perc_increase(self):
        return _CosmoBolognaLib.Triplets_perc_increase(self)

    def TT(self, *args):
        return _CosmoBolognaLib.Triplets_TT(self, *args)

    def sum(self, tt, ww=1.):
        return _CosmoBolognaLib.Triplets_sum(self, tt, ww)

    def put(self, *args):
        return _CosmoBolognaLib.Triplets_put(self, *args)

    def __init__(self):
        this = _CosmoBolognaLib.new_Triplets()
        try:
            self.this.append(this)
        except:
            self.this = this
Triplets_swigregister = _CosmoBolognaLib.Triplets_swigregister
Triplets_swigregister(Triplets)

class Triplets2D(Triplets):
    __swig_setmethods__ = {}
    for _s in [Triplets]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplets2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Triplets]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triplets2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Triplets2D(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def binsize(self):
        return _CosmoBolognaLib.Triplets2D_binsize(self)

    def side_s(self):
        return _CosmoBolognaLib.Triplets2D_side_s(self)

    def side_u(self):
        return _CosmoBolognaLib.Triplets2D_side_u(self)

    def perc_increase(self):
        return _CosmoBolognaLib.Triplets2D_perc_increase(self)

    def TT(self, *args):
        return _CosmoBolognaLib.Triplets2D_TT(self, *args)

    def sum(self, arg2, ww=1):
        return _CosmoBolognaLib.Triplets2D_sum(self, arg2, ww)

    def put(self, *args):
        return _CosmoBolognaLib.Triplets2D_put(self, *args)
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplets2D
    __del__ = lambda self: None
Triplets2D_swigregister = _CosmoBolognaLib.Triplets2D_swigregister
Triplets2D_swigregister(Triplets2D)

class Triplets3D(Triplets):
    __swig_setmethods__ = {}
    for _s in [Triplets]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triplets3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Triplets]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Triplets3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_Triplets3D(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def binsize(self):
        return _CosmoBolognaLib.Triplets3D_binsize(self)

    def side_s(self):
        return _CosmoBolognaLib.Triplets3D_side_s(self)

    def side_u(self):
        return _CosmoBolognaLib.Triplets3D_side_u(self)

    def perc_increase(self):
        return _CosmoBolognaLib.Triplets3D_perc_increase(self)

    def TT(self, *args):
        return _CosmoBolognaLib.Triplets3D_TT(self, *args)

    def sum(self, arg2, ww=1):
        return _CosmoBolognaLib.Triplets3D_sum(self, arg2, ww)

    def put(self, *args):
        return _CosmoBolognaLib.Triplets3D_put(self, *args)
    __swig_destroy__ = _CosmoBolognaLib.delete_Triplets3D
    __del__ = lambda self: None
Triplets3D_swigregister = _CosmoBolognaLib.Triplets3D_swigregister
Triplets3D_swigregister(Triplets3D)

class ThreePointCorrelation(TwoPointCorrelation):
    __swig_setmethods__ = {}
    for _s in [TwoPointCorrelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreePointCorrelation, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoPointCorrelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreePointCorrelation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CosmoBolognaLib.new_ThreePointCorrelation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _CosmoBolognaLib.delete_ThreePointCorrelation
    __del__ = lambda self: None

    def setParameters3p(self, arg2, arg3, arg4, arg5, arg6):
        return _CosmoBolognaLib.ThreePointCorrelation_setParameters3p(self, arg2, arg3, arg4, arg5, arg6)

    def allocate_vectors_zeta(self):
        return _CosmoBolognaLib.ThreePointCorrelation_allocate_vectors_zeta(self)

    def measure_Q(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_measure_Q(self, *args)

    def measure_Q_TEST(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_measure_Q_TEST(self, *args)

    def measure_Q_ang(self, *args):
        return _CosmoBolognaLib.ThreePointCorrelation_measure_Q_ang(self, *args)

    def write_Q(self, arg2):
        return _CosmoBolognaLib.ThreePointCorrelation_write_Q(self, arg2)
ThreePointCorrelation_swigregister = _CosmoBolognaLib.ThreePointCorrelation_swigregister
ThreePointCorrelation_swigregister(ThreePointCorrelation)


def Vmax_DC_distribution(*args):
    return _CosmoBolognaLib.Vmax_DC_distribution(*args)
Vmax_DC_distribution = _CosmoBolognaLib.Vmax_DC_distribution

def AP_shift_r(arg1, arg2, arg3):
    return _CosmoBolognaLib.AP_shift_r(arg1, arg2, arg3)
AP_shift_r = _CosmoBolognaLib.AP_shift_r

def AP_shift_rp(arg1, arg2, arg3):
    return _CosmoBolognaLib.AP_shift_rp(arg1, arg2, arg3)
AP_shift_rp = _CosmoBolognaLib.AP_shift_rp

def AP_shift_pi(arg1, arg2, arg3):
    return _CosmoBolognaLib.AP_shift_pi(arg1, arg2, arg3)
AP_shift_pi = _CosmoBolognaLib.AP_shift_pi

def max_separations_AP(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _CosmoBolognaLib.max_separations_AP(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
max_separations_AP = _CosmoBolognaLib.max_separations_AP

def converted_xi(*args):
    return _CosmoBolognaLib.converted_xi(*args)
converted_xi = _CosmoBolognaLib.converted_xi

def redshift_range(arg1, arg2, arg3, arg4, arg5):
    return _CosmoBolognaLib.redshift_range(arg1, arg2, arg3, arg4, arg5)
redshift_range = _CosmoBolognaLib.redshift_range

def volume(arg1, arg2, arg3, arg4, arg5):
    return _CosmoBolognaLib.volume(arg1, arg2, arg3, arg4, arg5)
volume = _CosmoBolognaLib.volume

def coord_zSpace(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _CosmoBolognaLib.coord_zSpace(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
coord_zSpace = _CosmoBolognaLib.coord_zSpace

def create_mocks(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _CosmoBolognaLib.create_mocks(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
create_mocks = _CosmoBolognaLib.create_mocks

def set_ObjectRegion_SubBoxes(arg1, arg2, arg3, arg4, arg5):
    return _CosmoBolognaLib.set_ObjectRegion_SubBoxes(arg1, arg2, arg3, arg4, arg5)
set_ObjectRegion_SubBoxes = _CosmoBolognaLib.set_ObjectRegion_SubBoxes

def set_ObjectRegion_mangle(arg1, arg2, arg3, arg4, arg5):
    return _CosmoBolognaLib.set_ObjectRegion_mangle(arg1, arg2, arg3, arg4, arg5)
set_ObjectRegion_mangle = _CosmoBolognaLib.set_ObjectRegion_mangle
# This file is compatible with both classic and new-style classes.


