Metadata-Version: 1.1
Name: flask-hookserver
Version: 0.3.2
Summary: Server for GitHub webhooks using Flask
Home-page: https://github.com/nickfrostatx/flask-hookserver
Author: Nick Frost
Author-email: nickfrostatx@gmail.com
License: MIT
Description: flask-hookserver
        ================
        
        .. image:: https://img.shields.io/travis/nickfrostatx/flask-hookserver.svg
            :target: https://travis-ci.org/nickfrostatx/flask-hookserver
        
        .. image:: https://img.shields.io/coveralls/nickfrostatx/flask-hookserver.svg
            :target: https://coveralls.io/github/nickfrostatx/flask-hookserver
        
        .. image:: https://img.shields.io/pypi/v/flask-hookserver.svg
            :target: https://pypi.python.org/pypi/flask-hookserver
        
        .. image:: https://img.shields.io/pypi/l/flask-hookserver.svg
            :target: https://raw.githubusercontent.com/nickfrostatx/flask-hookserver/master/LICENSE
        
        GitHub webhooks using Flask.
        
        This tool receives webhooks from GitHub and passes the data along to a
        user-defined function. It validates the HMAC hash, and checks that the
        originating IP address comes from the GitHub IP block.
        
        Installation
        ------------
        
        .. code-block:: bash
        
            $ pip install flask-hookserver
        
        Usage
        -----
        
        .. code-block:: python
        
            from hookserver import HookServer
        
            app = HookServer(__name__, key=b'mySecretKey', num_proxies=1, url='/hooks')
        
            @app.hook('ping')
            def ping(data, guid):
                return 'pong'
        
            app.run()
        
        The ``HookServer`` constructor takes the following parameters:
        
        * **key** - Byte sequence containing your shared secret key. This is required if ``VALIDATE_SIGNATURE`` is on
        
        * **num_proxies** - If you're using a reverse proxy, this is required to correctly identify the client's IP address. Only really necessary if ``VALIDATE_IP`` is on. See the `Werkzeug documentation <http://werkzeug.pocoo.org/docs/contrib/fixers/#werkzeug.contrib.fixers.ProxyFix>`_ for more info.
        
        * **url** (default ``'/hooks'``) - The URI that GitHub will make the POST request to (for example, ``https://repo.yourserver.com/hooks``)
        
        Blueprint
        ---------
        
        You can also add GitHub webhooks to an existing Flask application.
        
        .. code-block:: python
        
            from hookserver import HookRoutes
            from flask import Flask
        
            app = Flask(__name__)
            app.config['KEY'] = b'mySecretKey'
        
            # ... Add all your other routes to app
        
            webhooks = HookRoutes()
            app.register_blueprint(webhooks)
        
            @webhooks.hook('ping')
            def ping(data, guid):
                return 'pong'
        
            app.run()
        
        Note that you'll need to manually set the ``KEY`` config variable if you want
        to validate the HMAC signatures.
        
        Config
        ------
        
        Signature and IP validation are both optional, but turned on by default.  They
        can each be turned off with a config flag.
        
        .. code-block:: python
        
            app = HookServer(__name__)
            app.config['VALIDATE_IP'] = False
            app.config['VALIDATE_SIGNATURE'] = False
        
        
        .. :changelog:
        
        History
        -------
        
        0.3.2 (2015-11-28)
        ++++++++++++++++++
        
        - Don't actually connect to GitHub from test suite
        - Deploy to PyPI from Travis
        
        0.3.1 (2015-11-19)
        ++++++++++++++++++
        
        - Accept unicode keys
        - Default to true for VALIDATE_IP and VALIDATE_SIGNATURE if missing
        
        0.3.0 (2015-11-08)
        ++++++++++++++++++
        
        - Move hooks URL route into a blueprint
        - Report rate limit expire time when the GitHub request limit is exceeded
        
        0.2.1 (2015-10-21)
        ++++++++++++++++++
        
        - Install Requests security dependencies
        
        0.2.0 (2015-10-21)
        ++++++++++++++++++
        
        - Proper Python 2.7 support
        - Respect GitHub rate limit of 60 requests per hour
        - Make key param to HookServer optional
        - Add optional param url
        - Use VALIDATE_IP and VALIDATE_SIGNATURE instead of DEBUG
        - Simplify some error messages
        - Add test suite
        
        0.1.4 (2015-04-07)
        ++++++++++++++++++
        
        - Support IPv4 addresses mapped to IPv6
        
        0.1.3 (2014-07-10)
        ++++++++++++++++++
        
        - Fix Python 2 bug in IP address decoding
        
        0.1.2 (2014-07-09)
        ++++++++++++++++++
        
        - Ignore HMAC in debug mode
        
        0.1.1 (2014-07-08)
        ++++++++++++++++++
        
        - Reload GitHub IP block on each request
        
        0.1.0 (2014-07-07)
        ++++++++++++++++++
        
        - Initial release
        
Keywords: github,webhooks,flask
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Framework :: Flask
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Software Development
