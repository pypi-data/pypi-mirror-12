
Contribute to / Recommend / Share asyncoro
******************************************

If you find asyncoro useful, please consider contrbuting to the
project.

The source code is available on GitHub. Here are a few suggestions (of
course, you can implement anything else you need, or any pet idea!):

   1. More examples (real-world, academic, or demonstrative
      examples) can be added. Multi-agent systems, evolutionary /
      genetic computing, for example, can be implemented with
      *Distributed Communicating Processes (discoro)*.

   2. Documentation can be improved.

   3. Currently the coroutine finish status is indicated
      asynchronously to 'status_coro' coroutine with *Distributed
      Communicating Processes (discoro)*. This is useful to schedule
      coroutines, but if one wants to start remote coroutines and wait
      for their results indicated as exit values, then asynchronous
      notification is not easy to use. A specialized class can be used
      to provide '.finish' method to wait for remote coroutine to
      finish and give the exit value. There is an experimental
      implementation of this; if you are interested in using /
      improving it, email me.

   4. Support for fault tolerance can be added to Scheduler.

   5. Different schedulers (priority scheduling?) in asyncoro (for
      concurrency), or discoro (for managing distributed coroutines)
      can be tried.

   6. Name resolution of resources is not currently cached, so if,
      for example, a coroutine is located again, asyncoro sends lookup
      request and waits for results. Caching can improve performance,
      but it means resources may need to be validated (periodically),
      pruned if too many resources are cached etc. Alternatley,
      external libraries such as Redis can be supported to store
      location information of resources.

   7. Comments in the code with 'TODO' are ideas / improvements /
      potential issues; these can be addressed.

   8. Recommend / Share asyncoro with the links below :
