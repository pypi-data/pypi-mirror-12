(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/Buttons.jsx":[function(require,module,exports){
var Button = React.createClass({displayName: "Button",
    render: function() {
        return (
            React.createElement("button", {className: "btn btn-" + this.props.type + " btn-sm", onClick: this.props.clickHandler}, this.props.value)
        )
    }
})

window.Button = Button
module.exports = Button

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/IconButton.jsx":[function(require,module,exports){
var IconButton = React.createClass({displayName: "IconButton",
    render: function() {
        return (
            React.createElement("button", {
                className: "btn btn-" + this.props.type + " " + this.props.btnsize, 
                onClick: this.props.clickHandler, 
                id: this.props.btnid
                }, 
                  React.createElement("i", {className: "fa " + (this.props.size ? ("fa-" + this.props.size + " ") : " ") + ("fa-" + this.props.value)})
            )
        )
    }
})

window.IconButton = IconButton
module.exports = IconButton

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/Order.jsx":[function(require,module,exports){
var Order = React.createClass({displayName: "Order",
  loadOrder: function(orderid) {
    $.ajax({
      url: api_base + 'orders/' + orderid,
      dataType: 'json',
      success: function(success) {
        this.setState({order: success})
        this.setState({restaurant: success.restaurant})
      }.bind(this),
      error: function(xhr, status, err) {
        console.log(xhr, status, err)
      }.bind(this)
    })
  },

  loadOrderLines: function(path) {
      $.ajax({
      url: path || this.props.url,
      dataType: 'json',
      cache: false,
      success: function(success) {
        var data = this.state.data;
        for (var attrname in success.results) {data[success.results[attrname].id] = success.results[attrname]; }
        this.setState({data: data});
        if (success.next != null) {
            this.loadOrderLines(success.next)
        }
      }.bind(this),
      error: function(xhr, status, error) {
        console.error(xhr, status, error)
      }.bind(this)
    });
  },

  handleOrderLineSubmit: function(orderline) {
    // Submit to server and refresh list
    orderline.csrfmiddlewaretoken = csrftoken;
    orderline.order = order;
    var shouldPut = orderline.id !== ""
    $.ajax({
        url: api_base + "orderlines/" + (shouldPut ? orderline.id : ''),
        beforeSend: function(xhr) {
          xhr.setRequestHeader("X-CSRFToken", getCookie("csrftoken"));
        },
        dateType: 'json',
        type: shouldPut ? 'PUT' : 'POST',
        data: orderline,
        success: function(response) {
            if (shouldPut) {
                var data = this.state.data
                for (var attrname in response) {data[response[attrname].id] = response[attrname]; }
                this.setState({data: data})
                $("#orderline-" + response.id).removeClass("hide") // hacky way to show it again afterwards
            } else {
                this.setState({data: this.state.data.concat(response)})
            }
        }.bind(this),
        error: function(xhr, status, error) {
            console.error(xhr, status, error)
        }.bind(this)
    });
  },

  getInitialState: function() {
    return {
      data: [],
      order: {},
      restaurant: {restaurant_name: ''}
    }
  },

  componentDidMount: function() {
    this.loadOrder(this.props.orderid)
    this.loadOrderLines()
  },

  render: function() {
    var that = this
    var Menu = React.createClass({displayName: "Menu",
      render: function () {
        return (
          React.createElement("span", null, 
            React.createElement("i", {className: "fa fa-cutlery"}), " ", React.createElement("a", {href: that.state.restaurant.menu_url}, "Menu")
          )
        )
      }
    })
    var Phone = React.createClass({displayName: "Phone",
      render: function () {
        return (
          React.createElement("span", null, 
            React.createElement("i", {className: "fa fa-phone"}), " ", React.createElement("a", {href: "tel:" + that.state.restaurant.phone_number}, that.state.restaurant.phone_number)
          )
        )
      }
    })

    return (
      React.createElement("div", {className: "container order"}, 
        React.createElement("div", {className: "row"}, 
          React.createElement("h1", null, "Feedme"), 
          React.createElement("h2", null, 
              this.state.restaurant.restaurant_name, "  ", 
              React.createElement("small", null, 
                React.createElement(Menu, null), "  ", 
                React.createElement(Phone, null)
              )
          ), 
          React.createElement(OrderLineList, {
              apiroot: this.props.apiroot, 
              data: this.state.data, 
              url: this.props.url, 
              extra_costs: this.state.order.extra_costs}
              ), 
          React.createElement(OrderLineForm, {onOrderLineSubmit: this.handleOrderLineSubmit})
        )
      )
    );
  }
});

window.Order = Order
module.exports = Order

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLine.jsx":[function(require,module,exports){
var OrderLine = React.createClass({displayName: "OrderLine",
    getInitialState: function() {
      return {
          orderline: {},
          hidden: false,
          showDelete: false,
          showEdit: false,
          showJoin: false,
          showLeave: false
      }
    },

    loadOrderLine: function(path) {
      $.ajax({
        url: path || api_base + "orderlines/" + this.props.olid,
        success: function(result) {
          // console.log(result)
          this.setState({orderline: result})
        }.bind(this),
        error: function(xhr, err, status) {
          console.log("Something went wrong.", xhr, err, status)
        }.bind(this)
      })
      this.setState({hideOrderLine: false})
    },

    componentDidMount: function() {
      this.loadOrderLine()
    },

    handleRemove: function(orderline) {
      this.setState({hideOrderLine: true})
      this.props.onRemoveOrderLine(orderline)
    },

    handleEdit: function(orderline) {
      // @ToDo: Make this better, and send a callback which updates this state
      // Place values in form
      $("#id").val(orderline.id)
      $("#menu_item").val(orderline.menu_item)
      $("#soda").val(orderline.soda)
      $("#extras").val(orderline.extras)
      $("#price").val(orderline.price)
      $("#users").val(orderline.users)
      this.setState({hideOrderLine: true})

      // On form submit, reload current orderline
      var that = this
      $("#formSubmit").click(function() {
        setTimeout(function() {
          that.loadOrderLine()
        }, 500) // I hope 500ms is enough to wait for a POST request to complete.
      })
    },
    // @ToDo: join and leave events

    render: function() {
        var deleteButton =  this.state.orderline.creator === username ? React.createElement(IconButton, {value: "trash-o", type: "danger", btnsize: "btn-sm", clickHandler: this.handleRemove.bind(this, this.state.orderline)}) : ""
        var editButton = this.state.orderline.creator === username ? React.createElement(IconButton, {value: "pencil-square-o", type: "primary", btnsize: "btn-sm", clickHandler: this.handleEdit.bind(this, this.state.orderline)}) : ""
        var joinButton = this.state.orderline.creator !== username ? React.createElement(IconButton, {value: "sign-in", type: "primary", btnsize: "btn-sm", clickHandler: this.handleJoin}) : ""
        var leaveButton = this.state.orderline.creator !== username ? React.createElement(IconButton, {value: "sign-out", type: "primary", btnsize: "btn-sm", clickHandler: this.handleLeave}) : ""
        return (
            React.createElement("tr", {className: this.state.hideOrderLine ? 'hide' : '', id: "orderline-" + this.state.orderline.id}, 
                React.createElement("td", null, React.createElement("b", null, this.state.orderline.creator), " ", this.state.orderline.users), 
                React.createElement("td", null, this.state.orderline.menu_item), 
                React.createElement("td", null, this.state.orderline.soda), 
                React.createElement("td", null, this.state.orderline.extras), 
                React.createElement("td", null, this.state.orderline.price), 
                React.createElement("td", null, React.createElement("div", {className: "btn-group"}, joinButton, " ", leaveButton, " ", editButton, " ", deleteButton))
            )
        );
    }
});

window.OrderLine = OrderLine
module.exports = OrderLine

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLineForm.jsx":[function(require,module,exports){
var OrderLineForm = React.createClass({displayName: "OrderLineForm",
    getInitialState: function() {
      return {
        users: []
      }
    },

    componentDidMount: function() {
      $.ajax({
        url: api_base + "orderlines/",
        method: 'OPTIONS',
        success: function(success) {
            this.setState({users: success.actions.POST.users.choices})
        }.bind(this),
        error: function(xhr, status, err) {
            console.log(xhr, status, err)
        }.bind(this)
      })
    },

    handleSubmit: function(e) {
      e.preventDefault();

      // Get a list of users id's (buddies)
      var users = []
      var users_list = $('#users_list').children()
      for (var i = 0; i < users_list.length; i++) {
        if (this.refs.users.value === users_list[i].value) {
          users.push(parseInt(users_list[i].innerHTML))
        }
      }

      if (users.length > 0) {
        users = $.parseJSON(users)
      }

      this.props.onOrderLineSubmit({
          id: this.refs.id.value,
          menu_item: this.refs.menu_item.value,
          soda: this.refs.soda.value,
          extras: this.refs.extras.value,
          price: this.refs.price.value,
          users: users
      });
      // Reset all the stuff
      this.refs.id.value = "";
      this.refs.menu_item.value = "";
      this.refs.soda.value = "";
      this.refs.extras.value = "";
      this.refs.price.value = "";
      this.refs.users.value = "";
      return;
    },

    render: function() {
        var users = this.state.users.map(function (user) {
        return (
            React.createElement("option", {key: user.value, value: user.display_name}, user.value)
          )
        })
        return (
            React.createElement("div", {className: "col-md-12"}, 
              React.createElement("h3", null, "New orderline"), 
              React.createElement("div", {className: "col-md-12"}, 
                React.createElement("form", {className: "form-inline orderLineForm", onSubmit: this.handleSubmit}, 
                  React.createElement("input", {type: "number", id: "id", ref: "id", hidden: true}), 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {className: "sr-only", htmlFor: "menu_item"}, "Menu item"), 
                    React.createElement("input", {type: "text", className: "form-control", placeholder: "Menu item", id: "menu_item", ref: "menu_item"})
                  ), 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {className: "sr-only", htmlFor: "soda"}, "Soda"), 
                    React.createElement("input", {type: "text", className: "form-control", placeholder: "Soda", id: "soda", ref: "soda"})
                  ), 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {className: "sr-only", htmlFor: "extras"}, "Extras"), 
                    React.createElement("input", {type: "text", className: "form-control", placeholder: "Extras", id: "extras", ref: "extras"})
                  ), 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {className: "sr-only", htmlFor: "price"}, "Price"), 
                    React.createElement("input", {type: "number", className: "form-control", placeholder: "Price", id: "price", ref: "price"})
                  ), 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {className: "sr-only", htmlFor: "users"}, "Additional users"), 
                    React.createElement("input", {type: "text", list: "users_list", className: "form-control", placeholder: "Additional users", id: "users", ref: "users"}), 
                    React.createElement("datalist", {id: "users_list"}, 
                        users
                    )
                  ), 
                  React.createElement(IconButton, {value: "floppy-o", btnid: "formSubmit", type: "success", btnsize: "primary"})
                )
              )
            )
        );
    }
});

window.OrderLineForm = OrderLineForm
module.exports = OrderLineForm

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLineList.jsx":[function(require,module,exports){
var OrderLineList = React.createClass({displayName: "OrderLineList",
  handleRemoveOrderLine: function(orderline) {
    $.ajax({
        url: api_base + "orderlines/" + orderline.id,
        beforeSend: function(xhr) {
          xhr.setRequestHeader("X-CSRFToken", getCookie("csrftoken"));
        },
        type: "DELETE",
        success: function(result) {
        }.bind(this),
          error: function(xhr, error, something) {
            console.log(xhr, error, something)
        }.bind(this)
    })
  },

  render: function() {
    var that = this
    var orderlines = this.props.data.map(function (orderline) {
        return (
            React.createElement(OrderLine, {olid: orderline.id, key: orderline.id, onEditOrderLine: that.handleUpdateOrderLine, onRemoveOrderLine: that.handleRemoveOrderLine})
        );
    });
    return (
      React.createElement("div", {className: "col-md-12"}, 
        React.createElement("table", {className: "table table-striped orderLineList"}, 
          React.createElement("thead", null, 
            React.createElement("tr", null, 
              React.createElement("th", null, "User(s)"), 
              React.createElement("th", null, "Menu item"), 
              React.createElement("th", null, "Soda"), 
              React.createElement("th", null, "Extras"), 
              React.createElement("th", null, "Price"), 
              React.createElement("th", null, "Status")
            )
          ), 
          React.createElement("tbody", null, 
            orderlines, 
            React.createElement("tr", null, 
              React.createElement("td", null, React.createElement("i", {className: "fa fa-2x fa-truck"})), 
              React.createElement("td", null, "Extra costs"), 
              React.createElement("td", null, React.createElement("i", {className: "fa fa-2x fa-bicycle"}), " ", React.createElement("i", {className: "fa fa-2x fa-rocket"})), 
              React.createElement("td", null), 
              React.createElement("td", null, this.props.extra_costs), 
              React.createElement("td", null)
            )
          )
        )
      )
    );
  }
});

window.OrderLineList = OrderLineList
module.exports = OrderLineList

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/feedme.jsx":[function(require,module,exports){
var Button = require('./Buttons.jsx')

var IconButton = require('./IconButton.jsx')

var Order = require('./Order.jsx')

var OrderLine = require('./OrderLine.jsx')

var OrderLineList = require('./OrderLineList.jsx')

var OrderLineForm = require('./OrderLineForm.jsx')


ReactDOM.render(
    React.createElement(Order, {apiroot: "../feedme-api/", url: "/feedme-api/orderlines/?order=" + order, orderid: order}),
    document.getElementById("feedme-main")
);

},{"./Buttons.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/Buttons.jsx","./IconButton.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/IconButton.jsx","./Order.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/Order.jsx","./OrderLine.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLine.jsx","./OrderLineForm.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLineForm.jsx","./OrderLineList.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLineList.jsx"}]},{},["/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/feedme.jsx"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
