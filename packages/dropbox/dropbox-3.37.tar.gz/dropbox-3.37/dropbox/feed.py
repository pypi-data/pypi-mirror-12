# Auto-generated by BabelAPI, do not modify.
try:
    from . import babel_validators as bv
except (SystemError, ValueError):
    # Catch errors raised when importing a relative module when not in a package.
    # This makes testing this file directly (outside of a package) easier.
    import babel_validators as bv

class MemberInfo(object):
    """
    This is information about a dropbox user
    """

    __slots__ = [
        '_dbx_account_id_value',
        '_dbx_account_id_present',
        '_display_name_value',
        '_display_name_present',
        '_email_value',
        '_email_present',
        '_fname_value',
        '_fname_present',
        '_id_value',
        '_id_present',
        '_initials_url_value',
        '_initials_url_present',
        '_lname_value',
        '_lname_present',
        '_photo_circle_url_value',
        '_photo_circle_url_present',
        '_photo_url_value',
        '_photo_url_present',
        '_role_value',
        '_role_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 dbx_account_id=None,
                 display_name=None,
                 email=None,
                 fname=None,
                 id=None,
                 initials_url=None,
                 lname=None,
                 role=None,
                 photo_circle_url=None,
                 photo_url=None):
        self._dbx_account_id_value = None
        self._dbx_account_id_present = False
        self._display_name_value = None
        self._display_name_present = False
        self._email_value = None
        self._email_present = False
        self._fname_value = None
        self._fname_present = False
        self._id_value = None
        self._id_present = False
        self._initials_url_value = None
        self._initials_url_present = False
        self._lname_value = None
        self._lname_present = False
        self._photo_circle_url_value = None
        self._photo_circle_url_present = False
        self._photo_url_value = None
        self._photo_url_present = False
        self._role_value = None
        self._role_present = False
        if dbx_account_id is not None:
            self.dbx_account_id = dbx_account_id
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if fname is not None:
            self.fname = fname
        if id is not None:
            self.id = id
        if initials_url is not None:
            self.initials_url = initials_url
        if lname is not None:
            self.lname = lname
        if photo_circle_url is not None:
            self.photo_circle_url = photo_circle_url
        if photo_url is not None:
            self.photo_url = photo_url
        if role is not None:
            self.role = role

    @property
    def dbx_account_id(self):
        """
        :rtype: str
        """
        if self._dbx_account_id_present:
            return self._dbx_account_id_value
        else:
            raise AttributeError("missing required field 'dbx_account_id'")

    @dbx_account_id.setter
    def dbx_account_id(self, val):
        val = self._dbx_account_id_validator.validate(val)
        self._dbx_account_id_value = val
        self._dbx_account_id_present = True

    @dbx_account_id.deleter
    def dbx_account_id(self):
        self._dbx_account_id_value = None
        self._dbx_account_id_present = False

    @property
    def display_name(self):
        """
        :rtype: str
        """
        if self._display_name_present:
            return self._display_name_value
        else:
            raise AttributeError("missing required field 'display_name'")

    @display_name.setter
    def display_name(self, val):
        val = self._display_name_validator.validate(val)
        self._display_name_value = val
        self._display_name_present = True

    @display_name.deleter
    def display_name(self):
        self._display_name_value = None
        self._display_name_present = False

    @property
    def email(self):
        """
        :rtype: str
        """
        if self._email_present:
            return self._email_value
        else:
            raise AttributeError("missing required field 'email'")

    @email.setter
    def email(self, val):
        val = self._email_validator.validate(val)
        self._email_value = val
        self._email_present = True

    @email.deleter
    def email(self):
        self._email_value = None
        self._email_present = False

    @property
    def fname(self):
        """
        :rtype: str
        """
        if self._fname_present:
            return self._fname_value
        else:
            raise AttributeError("missing required field 'fname'")

    @fname.setter
    def fname(self, val):
        val = self._fname_validator.validate(val)
        self._fname_value = val
        self._fname_present = True

    @fname.deleter
    def fname(self):
        self._fname_value = None
        self._fname_present = False

    @property
    def id(self):
        """
        :rtype: long
        """
        if self._id_present:
            return self._id_value
        else:
            raise AttributeError("missing required field 'id'")

    @id.setter
    def id(self, val):
        val = self._id_validator.validate(val)
        self._id_value = val
        self._id_present = True

    @id.deleter
    def id(self):
        self._id_value = None
        self._id_present = False

    @property
    def initials_url(self):
        """
        :rtype: str
        """
        if self._initials_url_present:
            return self._initials_url_value
        else:
            raise AttributeError("missing required field 'initials_url'")

    @initials_url.setter
    def initials_url(self, val):
        val = self._initials_url_validator.validate(val)
        self._initials_url_value = val
        self._initials_url_present = True

    @initials_url.deleter
    def initials_url(self):
        self._initials_url_value = None
        self._initials_url_present = False

    @property
    def lname(self):
        """
        :rtype: str
        """
        if self._lname_present:
            return self._lname_value
        else:
            raise AttributeError("missing required field 'lname'")

    @lname.setter
    def lname(self, val):
        val = self._lname_validator.validate(val)
        self._lname_value = val
        self._lname_present = True

    @lname.deleter
    def lname(self):
        self._lname_value = None
        self._lname_present = False

    @property
    def photo_circle_url(self):
        """
        :rtype: str
        """
        if self._photo_circle_url_present:
            return self._photo_circle_url_value
        else:
            return None

    @photo_circle_url.setter
    def photo_circle_url(self, val):
        if val is None:
            del self.photo_circle_url
            return
        val = self._photo_circle_url_validator.validate(val)
        self._photo_circle_url_value = val
        self._photo_circle_url_present = True

    @photo_circle_url.deleter
    def photo_circle_url(self):
        self._photo_circle_url_value = None
        self._photo_circle_url_present = False

    @property
    def photo_url(self):
        """
        :rtype: str
        """
        if self._photo_url_present:
            return self._photo_url_value
        else:
            return None

    @photo_url.setter
    def photo_url(self, val):
        if val is None:
            del self.photo_url
            return
        val = self._photo_url_validator.validate(val)
        self._photo_url_value = val
        self._photo_url_present = True

    @photo_url.deleter
    def photo_url(self):
        self._photo_url_value = None
        self._photo_url_present = False

    @property
    def role(self):
        """
        :rtype: str
        """
        if self._role_present:
            return self._role_value
        else:
            raise AttributeError("missing required field 'role'")

    @role.setter
    def role(self, val):
        val = self._role_validator.validate(val)
        self._role_value = val
        self._role_present = True

    @role.deleter
    def role(self):
        self._role_value = None
        self._role_present = False

    def __repr__(self):
        return 'MemberInfo(dbx_account_id={!r}, display_name={!r}, email={!r}, fname={!r}, id={!r}, initials_url={!r}, lname={!r}, role={!r}, photo_circle_url={!r}, photo_url={!r})'.format(
            self._dbx_account_id_value,
            self._display_name_value,
            self._email_value,
            self._fname_value,
            self._id_value,
            self._initials_url_value,
            self._lname_value,
            self._role_value,
            self._photo_circle_url_value,
            self._photo_url_value,
        )

class WorkspaceSettings(object):
    """
    These are workspace settings
    """

    __slots__ = [
        '_description_value',
        '_description_present',
        '_email_list_value',
        '_email_list_present',
        '_is_feed_enabled_value',
        '_is_feed_enabled_present',
        '_last_activity_value',
        '_last_activity_present',
        '_last_activity_milli_value',
        '_last_activity_milli_present',
        '_members_value',
        '_members_present',
        '_mount_point_value',
        '_mount_point_present',
        '_name_value',
        '_name_present',
        '_ns_id_value',
        '_ns_id_present',
        '_one_on_one_chat_value',
        '_one_on_one_chat_present',
        '_owner_value',
        '_owner_present',
        '_owner_team_id_value',
        '_owner_team_id_present',
        '_owner_team_name_value',
        '_owner_team_name_present',
        '_pinned_activities_value',
        '_pinned_activities_present',
        '_shared_folder_link_value',
        '_shared_folder_link_present',
        '_visibility_value',
        '_visibility_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 description=None,
                 is_feed_enabled=None,
                 last_activity=None,
                 last_activity_milli=None,
                 name=None,
                 ns_id=None,
                 one_on_one_chat=None,
                 owner=None,
                 owner_team_id=None,
                 owner_team_name=None,
                 pinned_activities=None,
                 visibility=None,
                 email_list=None,
                 members=None,
                 mount_point=None,
                 shared_folder_link=None):
        self._description_value = None
        self._description_present = False
        self._email_list_value = None
        self._email_list_present = False
        self._is_feed_enabled_value = None
        self._is_feed_enabled_present = False
        self._last_activity_value = None
        self._last_activity_present = False
        self._last_activity_milli_value = None
        self._last_activity_milli_present = False
        self._members_value = None
        self._members_present = False
        self._mount_point_value = None
        self._mount_point_present = False
        self._name_value = None
        self._name_present = False
        self._ns_id_value = None
        self._ns_id_present = False
        self._one_on_one_chat_value = None
        self._one_on_one_chat_present = False
        self._owner_value = None
        self._owner_present = False
        self._owner_team_id_value = None
        self._owner_team_id_present = False
        self._owner_team_name_value = None
        self._owner_team_name_present = False
        self._pinned_activities_value = None
        self._pinned_activities_present = False
        self._shared_folder_link_value = None
        self._shared_folder_link_present = False
        self._visibility_value = None
        self._visibility_present = False
        if description is not None:
            self.description = description
        if email_list is not None:
            self.email_list = email_list
        if is_feed_enabled is not None:
            self.is_feed_enabled = is_feed_enabled
        if last_activity is not None:
            self.last_activity = last_activity
        if last_activity_milli is not None:
            self.last_activity_milli = last_activity_milli
        if members is not None:
            self.members = members
        if mount_point is not None:
            self.mount_point = mount_point
        if name is not None:
            self.name = name
        if ns_id is not None:
            self.ns_id = ns_id
        if one_on_one_chat is not None:
            self.one_on_one_chat = one_on_one_chat
        if owner is not None:
            self.owner = owner
        if owner_team_id is not None:
            self.owner_team_id = owner_team_id
        if owner_team_name is not None:
            self.owner_team_name = owner_team_name
        if pinned_activities is not None:
            self.pinned_activities = pinned_activities
        if shared_folder_link is not None:
            self.shared_folder_link = shared_folder_link
        if visibility is not None:
            self.visibility = visibility

    @property
    def description(self):
        """
        :rtype: str
        """
        if self._description_present:
            return self._description_value
        else:
            raise AttributeError("missing required field 'description'")

    @description.setter
    def description(self, val):
        val = self._description_validator.validate(val)
        self._description_value = val
        self._description_present = True

    @description.deleter
    def description(self):
        self._description_value = None
        self._description_present = False

    @property
    def email_list(self):
        """
        :rtype: list of [str]
        """
        if self._email_list_present:
            return self._email_list_value
        else:
            return None

    @email_list.setter
    def email_list(self, val):
        if val is None:
            del self.email_list
            return
        val = self._email_list_validator.validate(val)
        self._email_list_value = val
        self._email_list_present = True

    @email_list.deleter
    def email_list(self):
        self._email_list_value = None
        self._email_list_present = False

    @property
    def is_feed_enabled(self):
        """
        :rtype: bool
        """
        if self._is_feed_enabled_present:
            return self._is_feed_enabled_value
        else:
            raise AttributeError("missing required field 'is_feed_enabled'")

    @is_feed_enabled.setter
    def is_feed_enabled(self, val):
        val = self._is_feed_enabled_validator.validate(val)
        self._is_feed_enabled_value = val
        self._is_feed_enabled_present = True

    @is_feed_enabled.deleter
    def is_feed_enabled(self):
        self._is_feed_enabled_value = None
        self._is_feed_enabled_present = False

    @property
    def last_activity(self):
        """
        :rtype: long
        """
        if self._last_activity_present:
            return self._last_activity_value
        else:
            raise AttributeError("missing required field 'last_activity'")

    @last_activity.setter
    def last_activity(self, val):
        val = self._last_activity_validator.validate(val)
        self._last_activity_value = val
        self._last_activity_present = True

    @last_activity.deleter
    def last_activity(self):
        self._last_activity_value = None
        self._last_activity_present = False

    @property
    def last_activity_milli(self):
        """
        :rtype: long
        """
        if self._last_activity_milli_present:
            return self._last_activity_milli_value
        else:
            raise AttributeError("missing required field 'last_activity_milli'")

    @last_activity_milli.setter
    def last_activity_milli(self, val):
        val = self._last_activity_milli_validator.validate(val)
        self._last_activity_milli_value = val
        self._last_activity_milli_present = True

    @last_activity_milli.deleter
    def last_activity_milli(self):
        self._last_activity_milli_value = None
        self._last_activity_milli_present = False

    @property
    def members(self):
        """
        :rtype: list of [MemberInfo]
        """
        if self._members_present:
            return self._members_value
        else:
            return None

    @members.setter
    def members(self, val):
        if val is None:
            del self.members
            return
        val = self._members_validator.validate(val)
        self._members_value = val
        self._members_present = True

    @members.deleter
    def members(self):
        self._members_value = None
        self._members_present = False

    @property
    def mount_point(self):
        """
        :rtype: str
        """
        if self._mount_point_present:
            return self._mount_point_value
        else:
            return None

    @mount_point.setter
    def mount_point(self, val):
        if val is None:
            del self.mount_point
            return
        val = self._mount_point_validator.validate(val)
        self._mount_point_value = val
        self._mount_point_present = True

    @mount_point.deleter
    def mount_point(self):
        self._mount_point_value = None
        self._mount_point_present = False

    @property
    def name(self):
        """
        :rtype: str
        """
        if self._name_present:
            return self._name_value
        else:
            raise AttributeError("missing required field 'name'")

    @name.setter
    def name(self, val):
        val = self._name_validator.validate(val)
        self._name_value = val
        self._name_present = True

    @name.deleter
    def name(self):
        self._name_value = None
        self._name_present = False

    @property
    def ns_id(self):
        """
        :rtype: long
        """
        if self._ns_id_present:
            return self._ns_id_value
        else:
            raise AttributeError("missing required field 'ns_id'")

    @ns_id.setter
    def ns_id(self, val):
        val = self._ns_id_validator.validate(val)
        self._ns_id_value = val
        self._ns_id_present = True

    @ns_id.deleter
    def ns_id(self):
        self._ns_id_value = None
        self._ns_id_present = False

    @property
    def one_on_one_chat(self):
        """
        :rtype: bool
        """
        if self._one_on_one_chat_present:
            return self._one_on_one_chat_value
        else:
            raise AttributeError("missing required field 'one_on_one_chat'")

    @one_on_one_chat.setter
    def one_on_one_chat(self, val):
        val = self._one_on_one_chat_validator.validate(val)
        self._one_on_one_chat_value = val
        self._one_on_one_chat_present = True

    @one_on_one_chat.deleter
    def one_on_one_chat(self):
        self._one_on_one_chat_value = None
        self._one_on_one_chat_present = False

    @property
    def owner(self):
        """
        :rtype: MemberInfo
        """
        if self._owner_present:
            return self._owner_value
        else:
            raise AttributeError("missing required field 'owner'")

    @owner.setter
    def owner(self, val):
        self._owner_validator.validate_type_only(val)
        self._owner_value = val
        self._owner_present = True

    @owner.deleter
    def owner(self):
        self._owner_value = None
        self._owner_present = False

    @property
    def owner_team_id(self):
        """
        :rtype: long
        """
        if self._owner_team_id_present:
            return self._owner_team_id_value
        else:
            raise AttributeError("missing required field 'owner_team_id'")

    @owner_team_id.setter
    def owner_team_id(self, val):
        val = self._owner_team_id_validator.validate(val)
        self._owner_team_id_value = val
        self._owner_team_id_present = True

    @owner_team_id.deleter
    def owner_team_id(self):
        self._owner_team_id_value = None
        self._owner_team_id_present = False

    @property
    def owner_team_name(self):
        """
        :rtype: str
        """
        if self._owner_team_name_present:
            return self._owner_team_name_value
        else:
            raise AttributeError("missing required field 'owner_team_name'")

    @owner_team_name.setter
    def owner_team_name(self, val):
        val = self._owner_team_name_validator.validate(val)
        self._owner_team_name_value = val
        self._owner_team_name_present = True

    @owner_team_name.deleter
    def owner_team_name(self):
        self._owner_team_name_value = None
        self._owner_team_name_present = False

    @property
    def pinned_activities(self):
        """
        :rtype: list of [str]
        """
        if self._pinned_activities_present:
            return self._pinned_activities_value
        else:
            raise AttributeError("missing required field 'pinned_activities'")

    @pinned_activities.setter
    def pinned_activities(self, val):
        val = self._pinned_activities_validator.validate(val)
        self._pinned_activities_value = val
        self._pinned_activities_present = True

    @pinned_activities.deleter
    def pinned_activities(self):
        self._pinned_activities_value = None
        self._pinned_activities_present = False

    @property
    def shared_folder_link(self):
        """
        :rtype: str
        """
        if self._shared_folder_link_present:
            return self._shared_folder_link_value
        else:
            return None

    @shared_folder_link.setter
    def shared_folder_link(self, val):
        if val is None:
            del self.shared_folder_link
            return
        val = self._shared_folder_link_validator.validate(val)
        self._shared_folder_link_value = val
        self._shared_folder_link_present = True

    @shared_folder_link.deleter
    def shared_folder_link(self):
        self._shared_folder_link_value = None
        self._shared_folder_link_present = False

    @property
    def visibility(self):
        """
        :rtype: long
        """
        if self._visibility_present:
            return self._visibility_value
        else:
            raise AttributeError("missing required field 'visibility'")

    @visibility.setter
    def visibility(self, val):
        val = self._visibility_validator.validate(val)
        self._visibility_value = val
        self._visibility_present = True

    @visibility.deleter
    def visibility(self):
        self._visibility_value = None
        self._visibility_present = False

    def __repr__(self):
        return 'WorkspaceSettings(description={!r}, is_feed_enabled={!r}, last_activity={!r}, last_activity_milli={!r}, name={!r}, ns_id={!r}, one_on_one_chat={!r}, owner={!r}, owner_team_id={!r}, owner_team_name={!r}, pinned_activities={!r}, visibility={!r}, email_list={!r}, members={!r}, mount_point={!r}, shared_folder_link={!r})'.format(
            self._description_value,
            self._is_feed_enabled_value,
            self._last_activity_value,
            self._last_activity_milli_value,
            self._name_value,
            self._ns_id_value,
            self._one_on_one_chat_value,
            self._owner_value,
            self._owner_team_id_value,
            self._owner_team_name_value,
            self._pinned_activities_value,
            self._visibility_value,
            self._email_list_value,
            self._members_value,
            self._mount_point_value,
            self._shared_folder_link_value,
        )

class NotificationPref(object):

    __slots__ = ['_tag', '_value']

    _catch_all = None
    # Attribute is overwritten below the class definition
    all = None
    # Attribute is overwritten below the class definition
    involved = None
    # Attribute is overwritten below the class definition
    none = None

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    def is_all(self):
        return self._tag == 'all'

    def is_involved(self):
        return self._tag == 'involved'

    def is_none(self):
        return self._tag == 'none'

    def __repr__(self):
        return 'NotificationPref(%r)' % self._tag

class UserSettings(object):
    """
    Settings a user might have on a workspace
    """

    __slots__ = [
        '_archive_new_emails_value',
        '_archive_new_emails_present',
        '_last_viewed_value',
        '_last_viewed_present',
        '_last_viewed_milli_value',
        '_last_viewed_milli_present',
        '_ns_id_value',
        '_ns_id_present',
        '_email_pref_value',
        '_email_pref_present',
        '_push_pref_value',
        '_push_pref_present',
        '_web_pref_value',
        '_web_pref_present',
        '_is_favorited_value',
        '_is_favorited_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 archive_new_emails=None,
                 ns_id=None,
                 email_pref=None,
                 push_pref=None,
                 web_pref=None,
                 is_favorited=None,
                 last_viewed=None,
                 last_viewed_milli=None):
        self._archive_new_emails_value = None
        self._archive_new_emails_present = False
        self._last_viewed_value = None
        self._last_viewed_present = False
        self._last_viewed_milli_value = None
        self._last_viewed_milli_present = False
        self._ns_id_value = None
        self._ns_id_present = False
        self._email_pref_value = None
        self._email_pref_present = False
        self._push_pref_value = None
        self._push_pref_present = False
        self._web_pref_value = None
        self._web_pref_present = False
        self._is_favorited_value = None
        self._is_favorited_present = False
        if archive_new_emails is not None:
            self.archive_new_emails = archive_new_emails
        if last_viewed is not None:
            self.last_viewed = last_viewed
        if last_viewed_milli is not None:
            self.last_viewed_milli = last_viewed_milli
        if ns_id is not None:
            self.ns_id = ns_id
        if email_pref is not None:
            self.email_pref = email_pref
        if push_pref is not None:
            self.push_pref = push_pref
        if web_pref is not None:
            self.web_pref = web_pref
        if is_favorited is not None:
            self.is_favorited = is_favorited

    @property
    def archive_new_emails(self):
        """
        :rtype: bool
        """
        if self._archive_new_emails_present:
            return self._archive_new_emails_value
        else:
            raise AttributeError("missing required field 'archive_new_emails'")

    @archive_new_emails.setter
    def archive_new_emails(self, val):
        val = self._archive_new_emails_validator.validate(val)
        self._archive_new_emails_value = val
        self._archive_new_emails_present = True

    @archive_new_emails.deleter
    def archive_new_emails(self):
        self._archive_new_emails_value = None
        self._archive_new_emails_present = False

    @property
    def last_viewed(self):
        """
        :rtype: long
        """
        if self._last_viewed_present:
            return self._last_viewed_value
        else:
            return None

    @last_viewed.setter
    def last_viewed(self, val):
        if val is None:
            del self.last_viewed
            return
        val = self._last_viewed_validator.validate(val)
        self._last_viewed_value = val
        self._last_viewed_present = True

    @last_viewed.deleter
    def last_viewed(self):
        self._last_viewed_value = None
        self._last_viewed_present = False

    @property
    def last_viewed_milli(self):
        """
        :rtype: long
        """
        if self._last_viewed_milli_present:
            return self._last_viewed_milli_value
        else:
            return None

    @last_viewed_milli.setter
    def last_viewed_milli(self, val):
        if val is None:
            del self.last_viewed_milli
            return
        val = self._last_viewed_milli_validator.validate(val)
        self._last_viewed_milli_value = val
        self._last_viewed_milli_present = True

    @last_viewed_milli.deleter
    def last_viewed_milli(self):
        self._last_viewed_milli_value = None
        self._last_viewed_milli_present = False

    @property
    def ns_id(self):
        """
        :rtype: long
        """
        if self._ns_id_present:
            return self._ns_id_value
        else:
            raise AttributeError("missing required field 'ns_id'")

    @ns_id.setter
    def ns_id(self, val):
        val = self._ns_id_validator.validate(val)
        self._ns_id_value = val
        self._ns_id_present = True

    @ns_id.deleter
    def ns_id(self):
        self._ns_id_value = None
        self._ns_id_present = False

    @property
    def email_pref(self):
        """
        :rtype: NotificationPref
        """
        if self._email_pref_present:
            return self._email_pref_value
        else:
            raise AttributeError("missing required field 'email_pref'")

    @email_pref.setter
    def email_pref(self, val):
        self._email_pref_validator.validate_type_only(val)
        self._email_pref_value = val
        self._email_pref_present = True

    @email_pref.deleter
    def email_pref(self):
        self._email_pref_value = None
        self._email_pref_present = False

    @property
    def push_pref(self):
        """
        :rtype: NotificationPref
        """
        if self._push_pref_present:
            return self._push_pref_value
        else:
            raise AttributeError("missing required field 'push_pref'")

    @push_pref.setter
    def push_pref(self, val):
        self._push_pref_validator.validate_type_only(val)
        self._push_pref_value = val
        self._push_pref_present = True

    @push_pref.deleter
    def push_pref(self):
        self._push_pref_value = None
        self._push_pref_present = False

    @property
    def web_pref(self):
        """
        :rtype: NotificationPref
        """
        if self._web_pref_present:
            return self._web_pref_value
        else:
            raise AttributeError("missing required field 'web_pref'")

    @web_pref.setter
    def web_pref(self, val):
        self._web_pref_validator.validate_type_only(val)
        self._web_pref_value = val
        self._web_pref_present = True

    @web_pref.deleter
    def web_pref(self):
        self._web_pref_value = None
        self._web_pref_present = False

    @property
    def is_favorited(self):
        """
        :rtype: bool
        """
        if self._is_favorited_present:
            return self._is_favorited_value
        else:
            raise AttributeError("missing required field 'is_favorited'")

    @is_favorited.setter
    def is_favorited(self, val):
        val = self._is_favorited_validator.validate(val)
        self._is_favorited_value = val
        self._is_favorited_present = True

    @is_favorited.deleter
    def is_favorited(self):
        self._is_favorited_value = None
        self._is_favorited_present = False

    def __repr__(self):
        return 'UserSettings(archive_new_emails={!r}, ns_id={!r}, email_pref={!r}, push_pref={!r}, web_pref={!r}, is_favorited={!r}, last_viewed={!r}, last_viewed_milli={!r})'.format(
            self._archive_new_emails_value,
            self._ns_id_value,
            self._email_pref_value,
            self._push_pref_value,
            self._web_pref_value,
            self._is_favorited_value,
            self._last_viewed_value,
            self._last_viewed_milli_value,
        )

class FeedSettings(object):

    __slots__ = [
        '_settings_value',
        '_settings_present',
        '_user_settings_value',
        '_user_settings_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 settings=None,
                 user_settings=None):
        self._settings_value = None
        self._settings_present = False
        self._user_settings_value = None
        self._user_settings_present = False
        if settings is not None:
            self.settings = settings
        if user_settings is not None:
            self.user_settings = user_settings

    @property
    def settings(self):
        """
        :rtype: WorkspaceSettings
        """
        if self._settings_present:
            return self._settings_value
        else:
            raise AttributeError("missing required field 'settings'")

    @settings.setter
    def settings(self, val):
        self._settings_validator.validate_type_only(val)
        self._settings_value = val
        self._settings_present = True

    @settings.deleter
    def settings(self):
        self._settings_value = None
        self._settings_present = False

    @property
    def user_settings(self):
        """
        :rtype: UserSettings
        """
        if self._user_settings_present:
            return self._user_settings_value
        else:
            raise AttributeError("missing required field 'user_settings'")

    @user_settings.setter
    def user_settings(self, val):
        self._user_settings_validator.validate_type_only(val)
        self._user_settings_value = val
        self._user_settings_present = True

    @user_settings.deleter
    def user_settings(self):
        self._user_settings_value = None
        self._user_settings_present = False

    def __repr__(self):
        return 'FeedSettings(settings={!r}, user_settings={!r})'.format(
            self._settings_value,
            self._user_settings_value,
        )

class UserQueueResult(object):

    __slots__ = [
        '_queue_id_value',
        '_queue_id_present',
        '_queue_token_value',
        '_queue_token_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 queue_id=None,
                 queue_token=None):
        self._queue_id_value = None
        self._queue_id_present = False
        self._queue_token_value = None
        self._queue_token_present = False
        if queue_id is not None:
            self.queue_id = queue_id
        if queue_token is not None:
            self.queue_token = queue_token

    @property
    def queue_id(self):
        """
        :rtype: str
        """
        if self._queue_id_present:
            return self._queue_id_value
        else:
            raise AttributeError("missing required field 'queue_id'")

    @queue_id.setter
    def queue_id(self, val):
        val = self._queue_id_validator.validate(val)
        self._queue_id_value = val
        self._queue_id_present = True

    @queue_id.deleter
    def queue_id(self):
        self._queue_id_value = None
        self._queue_id_present = False

    @property
    def queue_token(self):
        """
        :rtype: str
        """
        if self._queue_token_present:
            return self._queue_token_value
        else:
            raise AttributeError("missing required field 'queue_token'")

    @queue_token.setter
    def queue_token(self, val):
        val = self._queue_token_validator.validate(val)
        self._queue_token_value = val
        self._queue_token_present = True

    @queue_token.deleter
    def queue_token(self):
        self._queue_token_value = None
        self._queue_token_present = False

    def __repr__(self):
        return 'UserQueueResult(queue_id={!r}, queue_token={!r})'.format(
            self._queue_id_value,
            self._queue_token_value,
        )

class ChatGetArg(object):

    __slots__ = [
        '_member_emails_value',
        '_member_emails_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 member_emails=None):
        self._member_emails_value = None
        self._member_emails_present = False
        if member_emails is not None:
            self.member_emails = member_emails

    @property
    def member_emails(self):
        """
        :rtype: list of [str]
        """
        if self._member_emails_present:
            return self._member_emails_value
        else:
            raise AttributeError("missing required field 'member_emails'")

    @member_emails.setter
    def member_emails(self, val):
        val = self._member_emails_validator.validate(val)
        self._member_emails_value = val
        self._member_emails_present = True

    @member_emails.deleter
    def member_emails(self):
        self._member_emails_value = None
        self._member_emails_present = False

    def __repr__(self):
        return 'ChatGetArg(member_emails={!r})'.format(
            self._member_emails_value,
        )

class SubmitFeedbackArg(object):

    __slots__ = [
        '_feedback_text_value',
        '_feedback_text_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 feedback_text=None):
        self._feedback_text_value = None
        self._feedback_text_present = False
        if feedback_text is not None:
            self.feedback_text = feedback_text

    @property
    def feedback_text(self):
        """
        :rtype: str
        """
        if self._feedback_text_present:
            return self._feedback_text_value
        else:
            raise AttributeError("missing required field 'feedback_text'")

    @feedback_text.setter
    def feedback_text(self, val):
        val = self._feedback_text_validator.validate(val)
        self._feedback_text_value = val
        self._feedback_text_present = True

    @feedback_text.deleter
    def feedback_text(self):
        self._feedback_text_value = None
        self._feedback_text_present = False

    def __repr__(self):
        return 'SubmitFeedbackArg(feedback_text={!r})'.format(
            self._feedback_text_value,
        )

class ChatGetError(object):
    """
    :ivar invalid_chat_member: Unable to chat with that member
    :ivar permissions_error: You don't have permission to view.
    :ivar invalid_workspace_error: Not a valid workspace.
    """

    __slots__ = ['_tag', '_value']

    _catch_all = None
    # Attribute is overwritten below the class definition
    invalid_chat_member = None
    # Attribute is overwritten below the class definition
    permissions_error = None
    # Attribute is overwritten below the class definition
    invalid_workspace_error = None

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    def is_invalid_chat_member(self):
        return self._tag == 'invalid_chat_member'

    def is_permissions_error(self):
        return self._tag == 'permissions_error'

    def is_invalid_workspace_error(self):
        return self._tag == 'invalid_workspace_error'

    def __repr__(self):
        return 'ChatGetError(%r)' % self._tag

class ChatPresenceList(object):

    __slots__ = [
        '_presence_emails_value',
        '_presence_emails_present',
    ]

    _has_required_fields = False

    def __init__(self,
                 presence_emails=None):
        self._presence_emails_value = None
        self._presence_emails_present = False
        if presence_emails is not None:
            self.presence_emails = presence_emails

    @property
    def presence_emails(self):
        """
        :rtype: list of [str]
        """
        if self._presence_emails_present:
            return self._presence_emails_value
        else:
            return None

    @presence_emails.setter
    def presence_emails(self, val):
        if val is None:
            del self.presence_emails
            return
        val = self._presence_emails_validator.validate(val)
        self._presence_emails_value = val
        self._presence_emails_present = True

    @presence_emails.deleter
    def presence_emails(self):
        self._presence_emails_value = None
        self._presence_emails_present = False

    def __repr__(self):
        return 'ChatPresenceList(presence_emails={!r})'.format(
            self._presence_emails_value,
        )

class TypingState(object):

    __slots__ = ['_tag', '_value']

    _catch_all = None
    # Attribute is overwritten below the class definition
    started = None
    # Attribute is overwritten below the class definition
    stopped = None

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    def is_started(self):
        return self._tag == 'started'

    def is_stopped(self):
        return self._tag == 'stopped'

    def __repr__(self):
        return 'TypingState(%r)' % self._tag

class TypingStateActivityKey(object):
    """
    :ivar post: User is typing a new post
    :ivar str comment: User is typing a comment. The string is the post key.
    """

    __slots__ = ['_tag', '_value']

    _catch_all = None
    # Attribute is overwritten below the class definition
    post = None

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    @classmethod
    def comment(cls, val):
        return cls('comment', val)

    def is_post(self):
        return self._tag == 'post'

    def is_comment(self):
        return self._tag == 'comment'

    def get_comment(self):
        if not self.is_comment():
            raise AttributeError("tag 'comment' not set")
        return self._value

    def __repr__(self):
        return 'TypingStateActivityKey(%r)' % self._tag

class NotifyTypingStateArg(object):
    """
    :ivar ns_id: id of the workspace to broadcast membership
    :ivar state: typing state to broadcast
    :ivar activity_key: The corresponding activity
    """

    __slots__ = [
        '_ns_id_value',
        '_ns_id_present',
        '_state_value',
        '_state_present',
        '_activity_key_value',
        '_activity_key_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 ns_id=None,
                 state=None,
                 activity_key=None):
        self._ns_id_value = None
        self._ns_id_present = False
        self._state_value = None
        self._state_present = False
        self._activity_key_value = None
        self._activity_key_present = False
        if ns_id is not None:
            self.ns_id = ns_id
        if state is not None:
            self.state = state
        if activity_key is not None:
            self.activity_key = activity_key

    @property
    def ns_id(self):
        """
        id of the workspace to broadcast membership

        :rtype: long
        """
        if self._ns_id_present:
            return self._ns_id_value
        else:
            raise AttributeError("missing required field 'ns_id'")

    @ns_id.setter
    def ns_id(self, val):
        val = self._ns_id_validator.validate(val)
        self._ns_id_value = val
        self._ns_id_present = True

    @ns_id.deleter
    def ns_id(self):
        self._ns_id_value = None
        self._ns_id_present = False

    @property
    def state(self):
        """
        typing state to broadcast

        :rtype: TypingState
        """
        if self._state_present:
            return self._state_value
        else:
            raise AttributeError("missing required field 'state'")

    @state.setter
    def state(self, val):
        self._state_validator.validate_type_only(val)
        self._state_value = val
        self._state_present = True

    @state.deleter
    def state(self):
        self._state_value = None
        self._state_present = False

    @property
    def activity_key(self):
        """
        The corresponding activity

        :rtype: TypingStateActivityKey
        """
        if self._activity_key_present:
            return self._activity_key_value
        else:
            raise AttributeError("missing required field 'activity_key'")

    @activity_key.setter
    def activity_key(self, val):
        self._activity_key_validator.validate_type_only(val)
        self._activity_key_value = val
        self._activity_key_present = True

    @activity_key.deleter
    def activity_key(self):
        self._activity_key_value = None
        self._activity_key_present = False

    def __repr__(self):
        return 'NotifyTypingStateArg(ns_id={!r}, state={!r}, activity_key={!r})'.format(
            self._ns_id_value,
            self._state_value,
            self._activity_key_value,
        )

class NotifyTypingStateError(object):
    """
    :ivar permissions_error: User lacks permission to post to workspace
    :ivar workspace_error: Failed to load workspace
    """

    __slots__ = ['_tag', '_value']

    _catch_all = None
    # Attribute is overwritten below the class definition
    permissions_error = None
    # Attribute is overwritten below the class definition
    workspace_error = None

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    def is_permissions_error(self):
        return self._tag == 'permissions_error'

    def is_workspace_error(self):
        return self._tag == 'workspace_error'

    def __repr__(self):
        return 'NotifyTypingStateError(%r)' % self._tag

class RegisterPushArg(object):

    __slots__ = [
        '_apns_token_value',
        '_apns_token_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 apns_token=None):
        self._apns_token_value = None
        self._apns_token_present = False
        if apns_token is not None:
            self.apns_token = apns_token

    @property
    def apns_token(self):
        """
        :rtype: str
        """
        if self._apns_token_present:
            return self._apns_token_value
        else:
            raise AttributeError("missing required field 'apns_token'")

    @apns_token.setter
    def apns_token(self, val):
        val = self._apns_token_validator.validate(val)
        self._apns_token_value = val
        self._apns_token_present = True

    @apns_token.deleter
    def apns_token(self):
        self._apns_token_value = None
        self._apns_token_present = False

    def __repr__(self):
        return 'RegisterPushArg(apns_token={!r})'.format(
            self._apns_token_value,
        )

MemberInfo._dbx_account_id_validator = bv.String()
MemberInfo._display_name_validator = bv.String()
MemberInfo._email_validator = bv.String()
MemberInfo._fname_validator = bv.String()
MemberInfo._id_validator = bv.UInt64()
MemberInfo._initials_url_validator = bv.String()
MemberInfo._lname_validator = bv.String()
MemberInfo._photo_circle_url_validator = bv.Nullable(bv.String())
MemberInfo._photo_url_validator = bv.Nullable(bv.String())
MemberInfo._role_validator = bv.String()
MemberInfo._all_field_names_ = set([
    'dbx_account_id',
    'display_name',
    'email',
    'fname',
    'id',
    'initials_url',
    'lname',
    'photo_circle_url',
    'photo_url',
    'role',
])
MemberInfo._all_fields_ = [
    ('dbx_account_id', MemberInfo._dbx_account_id_validator),
    ('display_name', MemberInfo._display_name_validator),
    ('email', MemberInfo._email_validator),
    ('fname', MemberInfo._fname_validator),
    ('id', MemberInfo._id_validator),
    ('initials_url', MemberInfo._initials_url_validator),
    ('lname', MemberInfo._lname_validator),
    ('photo_circle_url', MemberInfo._photo_circle_url_validator),
    ('photo_url', MemberInfo._photo_url_validator),
    ('role', MemberInfo._role_validator),
]

WorkspaceSettings._description_validator = bv.String()
WorkspaceSettings._email_list_validator = bv.Nullable(bv.List(bv.String()))
WorkspaceSettings._is_feed_enabled_validator = bv.Boolean()
WorkspaceSettings._last_activity_validator = bv.Int64()
WorkspaceSettings._last_activity_milli_validator = bv.Int64()
WorkspaceSettings._members_validator = bv.Nullable(bv.List(bv.Struct(MemberInfo)))
WorkspaceSettings._mount_point_validator = bv.Nullable(bv.String())
WorkspaceSettings._name_validator = bv.String()
WorkspaceSettings._ns_id_validator = bv.UInt64()
WorkspaceSettings._one_on_one_chat_validator = bv.Boolean()
WorkspaceSettings._owner_validator = bv.Struct(MemberInfo)
WorkspaceSettings._owner_team_id_validator = bv.UInt64()
WorkspaceSettings._owner_team_name_validator = bv.String()
WorkspaceSettings._pinned_activities_validator = bv.List(bv.String())
WorkspaceSettings._shared_folder_link_validator = bv.Nullable(bv.String())
WorkspaceSettings._visibility_validator = bv.Int64()
WorkspaceSettings._all_field_names_ = set([
    'description',
    'email_list',
    'is_feed_enabled',
    'last_activity',
    'last_activity_milli',
    'members',
    'mount_point',
    'name',
    'ns_id',
    'one_on_one_chat',
    'owner',
    'owner_team_id',
    'owner_team_name',
    'pinned_activities',
    'shared_folder_link',
    'visibility',
])
WorkspaceSettings._all_fields_ = [
    ('description', WorkspaceSettings._description_validator),
    ('email_list', WorkspaceSettings._email_list_validator),
    ('is_feed_enabled', WorkspaceSettings._is_feed_enabled_validator),
    ('last_activity', WorkspaceSettings._last_activity_validator),
    ('last_activity_milli', WorkspaceSettings._last_activity_milli_validator),
    ('members', WorkspaceSettings._members_validator),
    ('mount_point', WorkspaceSettings._mount_point_validator),
    ('name', WorkspaceSettings._name_validator),
    ('ns_id', WorkspaceSettings._ns_id_validator),
    ('one_on_one_chat', WorkspaceSettings._one_on_one_chat_validator),
    ('owner', WorkspaceSettings._owner_validator),
    ('owner_team_id', WorkspaceSettings._owner_team_id_validator),
    ('owner_team_name', WorkspaceSettings._owner_team_name_validator),
    ('pinned_activities', WorkspaceSettings._pinned_activities_validator),
    ('shared_folder_link', WorkspaceSettings._shared_folder_link_validator),
    ('visibility', WorkspaceSettings._visibility_validator),
]

NotificationPref._all_validator = bv.Void()
NotificationPref._involved_validator = bv.Void()
NotificationPref._none_validator = bv.Void()
NotificationPref._tagmap = {
    'all': NotificationPref._all_validator,
    'involved': NotificationPref._involved_validator,
    'none': NotificationPref._none_validator,
}

NotificationPref.all = NotificationPref('all')
NotificationPref.involved = NotificationPref('involved')
NotificationPref.none = NotificationPref('none')

UserSettings._archive_new_emails_validator = bv.Boolean()
UserSettings._last_viewed_validator = bv.Nullable(bv.UInt64())
UserSettings._last_viewed_milli_validator = bv.Nullable(bv.UInt64())
UserSettings._ns_id_validator = bv.UInt64()
UserSettings._email_pref_validator = bv.Union(NotificationPref)
UserSettings._push_pref_validator = bv.Union(NotificationPref)
UserSettings._web_pref_validator = bv.Union(NotificationPref)
UserSettings._is_favorited_validator = bv.Boolean()
UserSettings._all_field_names_ = set([
    'archive_new_emails',
    'last_viewed',
    'last_viewed_milli',
    'ns_id',
    'email_pref',
    'push_pref',
    'web_pref',
    'is_favorited',
])
UserSettings._all_fields_ = [
    ('archive_new_emails', UserSettings._archive_new_emails_validator),
    ('last_viewed', UserSettings._last_viewed_validator),
    ('last_viewed_milli', UserSettings._last_viewed_milli_validator),
    ('ns_id', UserSettings._ns_id_validator),
    ('email_pref', UserSettings._email_pref_validator),
    ('push_pref', UserSettings._push_pref_validator),
    ('web_pref', UserSettings._web_pref_validator),
    ('is_favorited', UserSettings._is_favorited_validator),
]

FeedSettings._settings_validator = bv.Struct(WorkspaceSettings)
FeedSettings._user_settings_validator = bv.Struct(UserSettings)
FeedSettings._all_field_names_ = set([
    'settings',
    'user_settings',
])
FeedSettings._all_fields_ = [
    ('settings', FeedSettings._settings_validator),
    ('user_settings', FeedSettings._user_settings_validator),
]

UserQueueResult._queue_id_validator = bv.String()
UserQueueResult._queue_token_validator = bv.String()
UserQueueResult._all_field_names_ = set([
    'queue_id',
    'queue_token',
])
UserQueueResult._all_fields_ = [
    ('queue_id', UserQueueResult._queue_id_validator),
    ('queue_token', UserQueueResult._queue_token_validator),
]

ChatGetArg._member_emails_validator = bv.List(bv.String(), min_items=1, max_items=1)
ChatGetArg._all_field_names_ = set(['member_emails'])
ChatGetArg._all_fields_ = [('member_emails', ChatGetArg._member_emails_validator)]

SubmitFeedbackArg._feedback_text_validator = bv.String()
SubmitFeedbackArg._all_field_names_ = set(['feedback_text'])
SubmitFeedbackArg._all_fields_ = [('feedback_text', SubmitFeedbackArg._feedback_text_validator)]

ChatGetError._invalid_chat_member_validator = bv.Void()
ChatGetError._permissions_error_validator = bv.Void()
ChatGetError._invalid_workspace_error_validator = bv.Void()
ChatGetError._tagmap = {
    'invalid_chat_member': ChatGetError._invalid_chat_member_validator,
    'permissions_error': ChatGetError._permissions_error_validator,
    'invalid_workspace_error': ChatGetError._invalid_workspace_error_validator,
}

ChatGetError.invalid_chat_member = ChatGetError('invalid_chat_member')
ChatGetError.permissions_error = ChatGetError('permissions_error')
ChatGetError.invalid_workspace_error = ChatGetError('invalid_workspace_error')

ChatPresenceList._presence_emails_validator = bv.Nullable(bv.List(bv.String()))
ChatPresenceList._all_field_names_ = set(['presence_emails'])
ChatPresenceList._all_fields_ = [('presence_emails', ChatPresenceList._presence_emails_validator)]

TypingState._started_validator = bv.Void()
TypingState._stopped_validator = bv.Void()
TypingState._tagmap = {
    'started': TypingState._started_validator,
    'stopped': TypingState._stopped_validator,
}

TypingState.started = TypingState('started')
TypingState.stopped = TypingState('stopped')

TypingStateActivityKey._post_validator = bv.Void()
TypingStateActivityKey._comment_validator = bv.String()
TypingStateActivityKey._tagmap = {
    'post': TypingStateActivityKey._post_validator,
    'comment': TypingStateActivityKey._comment_validator,
}

TypingStateActivityKey.post = TypingStateActivityKey('post')

NotifyTypingStateArg._ns_id_validator = bv.UInt64()
NotifyTypingStateArg._state_validator = bv.Union(TypingState)
NotifyTypingStateArg._activity_key_validator = bv.Union(TypingStateActivityKey)
NotifyTypingStateArg._all_field_names_ = set([
    'ns_id',
    'state',
    'activity_key',
])
NotifyTypingStateArg._all_fields_ = [
    ('ns_id', NotifyTypingStateArg._ns_id_validator),
    ('state', NotifyTypingStateArg._state_validator),
    ('activity_key', NotifyTypingStateArg._activity_key_validator),
]

NotifyTypingStateError._permissions_error_validator = bv.Void()
NotifyTypingStateError._workspace_error_validator = bv.Void()
NotifyTypingStateError._tagmap = {
    'permissions_error': NotifyTypingStateError._permissions_error_validator,
    'workspace_error': NotifyTypingStateError._workspace_error_validator,
}

NotifyTypingStateError.permissions_error = NotifyTypingStateError('permissions_error')
NotifyTypingStateError.workspace_error = NotifyTypingStateError('workspace_error')

RegisterPushArg._apns_token_validator = bv.String()
RegisterPushArg._all_field_names_ = set(['apns_token'])
RegisterPushArg._all_fields_ = [('apns_token', RegisterPushArg._apns_token_validator)]

