# Auto-generated by BabelAPI, do not modify.
"""
This endpoint contains endpoints and data types for file request operations.
"""

try:
    from . import babel_validators as bv
except (SystemError, ValueError):
    # Catch errors raised when importing a relative module when not in a package.
    # This makes testing this file directly (outside of a package) easier.
    import babel_validators as bv

class FileRequestDeadline(object):
    """
    A deadline for a file request.

    :ivar no_deadline: No deadline.
    :ivar Optional[datetime.datetime] deadline: The deadline for this file
        request.
    """

    __slots__ = ['_tag', '_value']

    _catch_all = None
    # Attribute is overwritten below the class definition
    no_deadline = None

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    @classmethod
    def deadline(cls, val):
        return cls('deadline', val)

    def is_no_deadline(self):
        return self._tag == 'no_deadline'

    def is_deadline(self):
        return self._tag == 'deadline'

    def get_deadline(self):
        if not self.is_deadline():
            raise AttributeError("tag 'deadline' not set")
        return self._value

    def __repr__(self):
        return 'FileRequestDeadline(%r)' % self._tag

class FileRequestDeadlines(object):
    """
    The deadlines for a file request.

    :ivar soft_deadline: The soft deadline for uploading files for this file
        request. If provided, a hard deadline must also be provided, and the
        soft deadline must be before the hard deadline. Any files submitted
        after the soft deadline will be marked overdue.
    :ivar hard_deadline: The hard deadline for uploading files for this file
        request. The file request will be closed at this time. Note that the
        metadata for the file request may not immediately reflect the closed
        state after the deadline passes.
    """

    __slots__ = [
        '_soft_deadline_value',
        '_soft_deadline_present',
        '_hard_deadline_value',
        '_hard_deadline_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 hard_deadline=None,
                 soft_deadline=None):
        self._soft_deadline_value = None
        self._soft_deadline_present = False
        self._hard_deadline_value = None
        self._hard_deadline_present = False
        if soft_deadline is not None:
            self.soft_deadline = soft_deadline
        if hard_deadline is not None:
            self.hard_deadline = hard_deadline

    @property
    def soft_deadline(self):
        """
        The soft deadline for uploading files for this file request. If
        provided, a hard deadline must also be provided, and the soft deadline
        must be before the hard deadline. Any files submitted after the soft
        deadline will be marked overdue.

        :rtype: FileRequestDeadline
        """
        if self._soft_deadline_present:
            return self._soft_deadline_value
        else:
            return None

    @soft_deadline.setter
    def soft_deadline(self, val):
        if val is None:
            del self.soft_deadline
            return
        self._soft_deadline_validator.validate_type_only(val)
        self._soft_deadline_value = val
        self._soft_deadline_present = True

    @soft_deadline.deleter
    def soft_deadline(self):
        self._soft_deadline_value = None
        self._soft_deadline_present = False

    @property
    def hard_deadline(self):
        """
        The hard deadline for uploading files for this file request. The file
        request will be closed at this time. Note that the metadata for the file
        request may not immediately reflect the closed state after the deadline
        passes.

        :rtype: FileRequestDeadline
        """
        if self._hard_deadline_present:
            return self._hard_deadline_value
        else:
            raise AttributeError("missing required field 'hard_deadline'")

    @hard_deadline.setter
    def hard_deadline(self, val):
        self._hard_deadline_validator.validate_type_only(val)
        self._hard_deadline_value = val
        self._hard_deadline_present = True

    @hard_deadline.deleter
    def hard_deadline(self):
        self._hard_deadline_value = None
        self._hard_deadline_present = False

    def __repr__(self):
        return 'FileRequestDeadlines(hard_deadline={!r}, soft_deadline={!r})'.format(
            self._hard_deadline_value,
            self._soft_deadline_value,
        )

class FileRequest(object):
    """
    A `file request <https://www.dropbox.com/help/9090>`_ for receiving files
    into the user's Dropbox account.

    :ivar id: The ID of the file request.
    :ivar url: The URL of the file request.
    :ivar title: The title of the file request.
    :ivar destination: The path of the folder in the Dropbox where uploaded
        files will be sent. This can be None if the destination was removed. For
        apps with the app folder permission, this will be relative to the app
        folder.
    :ivar created: When this file request was created.
    :ivar deadlines: The deadlines for this file request.
    :ivar open: Whether or not the file request is open. If the file request is
        closed, it will not accept any more file submissions.
    :ivar file_count: The number of files this file request has received.
    """

    __slots__ = [
        '_id_value',
        '_id_present',
        '_url_value',
        '_url_present',
        '_title_value',
        '_title_present',
        '_destination_value',
        '_destination_present',
        '_created_value',
        '_created_present',
        '_deadlines_value',
        '_deadlines_present',
        '_open_value',
        '_open_present',
        '_file_count_value',
        '_file_count_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 id=None,
                 url=None,
                 title=None,
                 created=None,
                 open=None,
                 file_count=None,
                 destination=None,
                 deadlines=None):
        self._id_value = None
        self._id_present = False
        self._url_value = None
        self._url_present = False
        self._title_value = None
        self._title_present = False
        self._destination_value = None
        self._destination_present = False
        self._created_value = None
        self._created_present = False
        self._deadlines_value = None
        self._deadlines_present = False
        self._open_value = None
        self._open_present = False
        self._file_count_value = None
        self._file_count_present = False
        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if title is not None:
            self.title = title
        if destination is not None:
            self.destination = destination
        if created is not None:
            self.created = created
        if deadlines is not None:
            self.deadlines = deadlines
        if open is not None:
            self.open = open
        if file_count is not None:
            self.file_count = file_count

    @property
    def id(self):
        """
        The ID of the file request.

        :rtype: str
        """
        if self._id_present:
            return self._id_value
        else:
            raise AttributeError("missing required field 'id'")

    @id.setter
    def id(self, val):
        val = self._id_validator.validate(val)
        self._id_value = val
        self._id_present = True

    @id.deleter
    def id(self):
        self._id_value = None
        self._id_present = False

    @property
    def url(self):
        """
        The URL of the file request.

        :rtype: str
        """
        if self._url_present:
            return self._url_value
        else:
            raise AttributeError("missing required field 'url'")

    @url.setter
    def url(self, val):
        val = self._url_validator.validate(val)
        self._url_value = val
        self._url_present = True

    @url.deleter
    def url(self):
        self._url_value = None
        self._url_present = False

    @property
    def title(self):
        """
        The title of the file request.

        :rtype: str
        """
        if self._title_present:
            return self._title_value
        else:
            raise AttributeError("missing required field 'title'")

    @title.setter
    def title(self, val):
        val = self._title_validator.validate(val)
        self._title_value = val
        self._title_present = True

    @title.deleter
    def title(self):
        self._title_value = None
        self._title_present = False

    @property
    def destination(self):
        """
        The path of the folder in the Dropbox where uploaded files will be sent.
        This can be None if the destination was removed. For apps with the app
        folder permission, this will be relative to the app folder.

        :rtype: str
        """
        if self._destination_present:
            return self._destination_value
        else:
            return None

    @destination.setter
    def destination(self, val):
        if val is None:
            del self.destination
            return
        val = self._destination_validator.validate(val)
        self._destination_value = val
        self._destination_present = True

    @destination.deleter
    def destination(self):
        self._destination_value = None
        self._destination_present = False

    @property
    def created(self):
        """
        When this file request was created.

        :rtype: datetime.datetime
        """
        if self._created_present:
            return self._created_value
        else:
            raise AttributeError("missing required field 'created'")

    @created.setter
    def created(self, val):
        val = self._created_validator.validate(val)
        self._created_value = val
        self._created_present = True

    @created.deleter
    def created(self):
        self._created_value = None
        self._created_present = False

    @property
    def deadlines(self):
        """
        The deadlines for this file request.

        :rtype: FileRequestDeadlines
        """
        if self._deadlines_present:
            return self._deadlines_value
        else:
            return None

    @deadlines.setter
    def deadlines(self, val):
        if val is None:
            del self.deadlines
            return
        self._deadlines_validator.validate_type_only(val)
        self._deadlines_value = val
        self._deadlines_present = True

    @deadlines.deleter
    def deadlines(self):
        self._deadlines_value = None
        self._deadlines_present = False

    @property
    def open(self):
        """
        Whether or not the file request is open. If the file request is closed,
        it will not accept any more file submissions.

        :rtype: bool
        """
        if self._open_present:
            return self._open_value
        else:
            raise AttributeError("missing required field 'open'")

    @open.setter
    def open(self, val):
        val = self._open_validator.validate(val)
        self._open_value = val
        self._open_present = True

    @open.deleter
    def open(self):
        self._open_value = None
        self._open_present = False

    @property
    def file_count(self):
        """
        The number of files this file request has received.

        :rtype: long
        """
        if self._file_count_present:
            return self._file_count_value
        else:
            raise AttributeError("missing required field 'file_count'")

    @file_count.setter
    def file_count(self, val):
        val = self._file_count_validator.validate(val)
        self._file_count_value = val
        self._file_count_present = True

    @file_count.deleter
    def file_count(self):
        self._file_count_value = None
        self._file_count_present = False

    def __repr__(self):
        return 'FileRequest(id={!r}, url={!r}, title={!r}, created={!r}, open={!r}, file_count={!r}, destination={!r}, deadlines={!r})'.format(
            self._id_value,
            self._url_value,
            self._title_value,
            self._created_value,
            self._open_value,
            self._file_count_value,
            self._destination_value,
            self._deadlines_value,
        )

class FileRequestError(object):
    """
    There is an error with the file request.

    :ivar not_found: This file request ID was not found.
    :ivar no_access: This file request is not accessible to this app. Apps with
        the app folder permission can only access file requests in their app
        folder.
    :ivar wrong_user: This file request is for a different user.
    :ivar no_deadlines: This user doesn't have access to the deadlines feature.
        Deadlines are only availe to Pro and Dropbox for Business accounts.
    :ivar email_unverified: This user's email address is not verified. File
        requests are only available on accounts with a verified email address.
        Users can verify their email address `here
        <https://www.dropbox.com/help/317>`_
    :ivar Optional[str] validation_error: There was an error validating the
        request.
    """

    __slots__ = ['_tag', '_value']

    _catch_all = 'other'
    # Attribute is overwritten below the class definition
    not_found = None
    # Attribute is overwritten below the class definition
    no_access = None
    # Attribute is overwritten below the class definition
    wrong_user = None
    # Attribute is overwritten below the class definition
    no_deadlines = None
    # Attribute is overwritten below the class definition
    email_unverified = None
    # Attribute is overwritten below the class definition
    other = None

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    @classmethod
    def validation_error(cls, val):
        return cls('validation_error', val)

    def is_not_found(self):
        return self._tag == 'not_found'

    def is_no_access(self):
        return self._tag == 'no_access'

    def is_wrong_user(self):
        return self._tag == 'wrong_user'

    def is_no_deadlines(self):
        return self._tag == 'no_deadlines'

    def is_email_unverified(self):
        return self._tag == 'email_unverified'

    def is_validation_error(self):
        return self._tag == 'validation_error'

    def is_other(self):
        return self._tag == 'other'

    def get_validation_error(self):
        if not self.is_validation_error():
            raise AttributeError("tag 'validation_error' not set")
        return self._value

    def __repr__(self):
        return 'FileRequestError(%r)' % self._tag

class ListFileRequestsResult(object):
    """
    Result for list_file_requests.

    :ivar file_requests: The file requests owned by this user. Apps with the app
        folder permission will only see file requests in their app folder.
    """

    __slots__ = [
        '_file_requests_value',
        '_file_requests_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 file_requests=None):
        self._file_requests_value = None
        self._file_requests_present = False
        if file_requests is not None:
            self.file_requests = file_requests

    @property
    def file_requests(self):
        """
        The file requests owned by this user. Apps with the app folder
        permission will only see file requests in their app folder.

        :rtype: list of [FileRequest]
        """
        if self._file_requests_present:
            return self._file_requests_value
        else:
            raise AttributeError("missing required field 'file_requests'")

    @file_requests.setter
    def file_requests(self, val):
        val = self._file_requests_validator.validate(val)
        self._file_requests_value = val
        self._file_requests_present = True

    @file_requests.deleter
    def file_requests(self):
        self._file_requests_value = None
        self._file_requests_present = False

    def __repr__(self):
        return 'ListFileRequestsResult(file_requests={!r})'.format(
            self._file_requests_value,
        )

class ListFileRequestsError(object):
    """
    There was an error retrieving the file requests.
    """

    __slots__ = ['_tag', '_value']

    _catch_all = 'other'
    # Attribute is overwritten below the class definition
    other = None

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    def is_other(self):
        return self._tag == 'other'

    def __repr__(self):
        return 'ListFileRequestsError(%r)' % self._tag

class GetFileRequestArgs(object):
    """
    Arguments for get_file_request.

    :ivar id: The ID of the file request to retrieve.
    """

    __slots__ = [
        '_id_value',
        '_id_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 id=None):
        self._id_value = None
        self._id_present = False
        if id is not None:
            self.id = id

    @property
    def id(self):
        """
        The ID of the file request to retrieve.

        :rtype: str
        """
        if self._id_present:
            return self._id_value
        else:
            raise AttributeError("missing required field 'id'")

    @id.setter
    def id(self, val):
        val = self._id_validator.validate(val)
        self._id_value = val
        self._id_present = True

    @id.deleter
    def id(self):
        self._id_value = None
        self._id_present = False

    def __repr__(self):
        return 'GetFileRequestArgs(id={!r})'.format(
            self._id_value,
        )

class GetFileRequestError(FileRequestError):
    """
    There was an error retrieving the specified file request.
    """

    __slots__ = ['_tag', '_value']

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    def __repr__(self):
        return 'GetFileRequestError(%r)' % self._tag

class CreateFileRequestArgs(object):
    """
    Arguments for create_file_request.

    :ivar title: The title of the file request. Must not be empty.
    :ivar destination: The path of the folder in the Dropbox where uploaded
        files will be sent. For apps with the app folder permission, this will
        be relative to the app folder.
    :ivar deadlines: The deadlines for the file request.
    :ivar open: Whether or not the file request should be open. If the file
        request is closed, it will not accept any file submissions, but it can
        be opened later.
    """

    __slots__ = [
        '_title_value',
        '_title_present',
        '_destination_value',
        '_destination_present',
        '_deadlines_value',
        '_deadlines_present',
        '_open_value',
        '_open_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 title=None,
                 destination=None,
                 deadlines=None,
                 open=None):
        self._title_value = None
        self._title_present = False
        self._destination_value = None
        self._destination_present = False
        self._deadlines_value = None
        self._deadlines_present = False
        self._open_value = None
        self._open_present = False
        if title is not None:
            self.title = title
        if destination is not None:
            self.destination = destination
        if deadlines is not None:
            self.deadlines = deadlines
        if open is not None:
            self.open = open

    @property
    def title(self):
        """
        The title of the file request. Must not be empty.

        :rtype: str
        """
        if self._title_present:
            return self._title_value
        else:
            raise AttributeError("missing required field 'title'")

    @title.setter
    def title(self, val):
        val = self._title_validator.validate(val)
        self._title_value = val
        self._title_present = True

    @title.deleter
    def title(self):
        self._title_value = None
        self._title_present = False

    @property
    def destination(self):
        """
        The path of the folder in the Dropbox where uploaded files will be sent.
        For apps with the app folder permission, this will be relative to the
        app folder.

        :rtype: str
        """
        if self._destination_present:
            return self._destination_value
        else:
            raise AttributeError("missing required field 'destination'")

    @destination.setter
    def destination(self, val):
        val = self._destination_validator.validate(val)
        self._destination_value = val
        self._destination_present = True

    @destination.deleter
    def destination(self):
        self._destination_value = None
        self._destination_present = False

    @property
    def deadlines(self):
        """
        The deadlines for the file request.

        :rtype: FileRequestDeadlines
        """
        if self._deadlines_present:
            return self._deadlines_value
        else:
            return None

    @deadlines.setter
    def deadlines(self, val):
        if val is None:
            del self.deadlines
            return
        self._deadlines_validator.validate_type_only(val)
        self._deadlines_value = val
        self._deadlines_present = True

    @deadlines.deleter
    def deadlines(self):
        self._deadlines_value = None
        self._deadlines_present = False

    @property
    def open(self):
        """
        Whether or not the file request should be open. If the file request is
        closed, it will not accept any file submissions, but it can be opened
        later.

        :rtype: bool
        """
        if self._open_present:
            return self._open_value
        else:
            return True

    @open.setter
    def open(self, val):
        val = self._open_validator.validate(val)
        self._open_value = val
        self._open_present = True

    @open.deleter
    def open(self):
        self._open_value = None
        self._open_present = False

    def __repr__(self):
        return 'CreateFileRequestArgs(title={!r}, destination={!r}, deadlines={!r}, open={!r})'.format(
            self._title_value,
            self._destination_value,
            self._deadlines_value,
            self._open_value,
        )

class CreateFileRequestError(FileRequestError):
    """
    There was an error creating the file request.
    """

    __slots__ = ['_tag', '_value']

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    def __repr__(self):
        return 'CreateFileRequestError(%r)' % self._tag

class EditFileRequestArgs(object):
    """
    Arguments for edit_file_request.

    :ivar id: The ID of the file request to edit.
    :ivar title: The new title of the file request. Must not be empty.
    :ivar destination: The new path of the folder in the Dropbox where uploaded
        files will be sent. For apps with the app folder permission, this will
        be relative to the app folder.
    :ivar deadlines: The new deadlines for the file request.
    :ivar open: Whether to set this file request as open or closed.
    """

    __slots__ = [
        '_id_value',
        '_id_present',
        '_title_value',
        '_title_present',
        '_destination_value',
        '_destination_present',
        '_deadlines_value',
        '_deadlines_present',
        '_open_value',
        '_open_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 id=None,
                 title=None,
                 destination=None,
                 deadlines=None,
                 open=None):
        self._id_value = None
        self._id_present = False
        self._title_value = None
        self._title_present = False
        self._destination_value = None
        self._destination_present = False
        self._deadlines_value = None
        self._deadlines_present = False
        self._open_value = None
        self._open_present = False
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if destination is not None:
            self.destination = destination
        if deadlines is not None:
            self.deadlines = deadlines
        if open is not None:
            self.open = open

    @property
    def id(self):
        """
        The ID of the file request to edit.

        :rtype: str
        """
        if self._id_present:
            return self._id_value
        else:
            raise AttributeError("missing required field 'id'")

    @id.setter
    def id(self, val):
        val = self._id_validator.validate(val)
        self._id_value = val
        self._id_present = True

    @id.deleter
    def id(self):
        self._id_value = None
        self._id_present = False

    @property
    def title(self):
        """
        The new title of the file request. Must not be empty.

        :rtype: str
        """
        if self._title_present:
            return self._title_value
        else:
            return None

    @title.setter
    def title(self, val):
        if val is None:
            del self.title
            return
        val = self._title_validator.validate(val)
        self._title_value = val
        self._title_present = True

    @title.deleter
    def title(self):
        self._title_value = None
        self._title_present = False

    @property
    def destination(self):
        """
        The new path of the folder in the Dropbox where uploaded files will be
        sent. For apps with the app folder permission, this will be relative to
        the app folder.

        :rtype: str
        """
        if self._destination_present:
            return self._destination_value
        else:
            return None

    @destination.setter
    def destination(self, val):
        if val is None:
            del self.destination
            return
        val = self._destination_validator.validate(val)
        self._destination_value = val
        self._destination_present = True

    @destination.deleter
    def destination(self):
        self._destination_value = None
        self._destination_present = False

    @property
    def deadlines(self):
        """
        The new deadlines for the file request.

        :rtype: FileRequestDeadlines
        """
        if self._deadlines_present:
            return self._deadlines_value
        else:
            return None

    @deadlines.setter
    def deadlines(self, val):
        if val is None:
            del self.deadlines
            return
        self._deadlines_validator.validate_type_only(val)
        self._deadlines_value = val
        self._deadlines_present = True

    @deadlines.deleter
    def deadlines(self):
        self._deadlines_value = None
        self._deadlines_present = False

    @property
    def open(self):
        """
        Whether to set this file request as open or closed.

        :rtype: bool
        """
        if self._open_present:
            return self._open_value
        else:
            return None

    @open.setter
    def open(self, val):
        if val is None:
            del self.open
            return
        val = self._open_validator.validate(val)
        self._open_value = val
        self._open_present = True

    @open.deleter
    def open(self):
        self._open_value = None
        self._open_present = False

    def __repr__(self):
        return 'EditFileRequestArgs(id={!r}, title={!r}, destination={!r}, deadlines={!r}, open={!r})'.format(
            self._id_value,
            self._title_value,
            self._destination_value,
            self._deadlines_value,
            self._open_value,
        )

class EditFileRequestError(FileRequestError):
    """
    There is an error editing the file request.
    """

    __slots__ = ['_tag', '_value']

    def __init__(self, tag, value=None):
        assert tag in self._tagmap, 'Invalid tag %r.' % tag
        validator = self._tagmap[tag]
        if isinstance(validator, bv.Void):
            assert value is None, 'Void type union member must have None value.'
        elif isinstance(validator, (bv.Struct, bv.Union)):
            validator.validate_type_only(value)
        else:
            validator.validate(value)
        self._tag = tag
        self._value = value

    def __repr__(self):
        return 'EditFileRequestError(%r)' % self._tag

FileRequestDeadline._no_deadline_validator = bv.Void()
FileRequestDeadline._deadline_validator = bv.Nullable(bv.Timestamp(u'%Y-%m-%dT%H:%M:%SZ'))
FileRequestDeadline._tagmap = {
    'no_deadline': FileRequestDeadline._no_deadline_validator,
    'deadline': FileRequestDeadline._deadline_validator,
}

FileRequestDeadline.no_deadline = FileRequestDeadline('no_deadline')

FileRequestDeadlines._soft_deadline_validator = bv.Nullable(bv.Union(FileRequestDeadline))
FileRequestDeadlines._hard_deadline_validator = bv.Union(FileRequestDeadline)
FileRequestDeadlines._all_field_names_ = set([
    'soft_deadline',
    'hard_deadline',
])
FileRequestDeadlines._all_fields_ = [
    ('soft_deadline', FileRequestDeadlines._soft_deadline_validator),
    ('hard_deadline', FileRequestDeadlines._hard_deadline_validator),
]

FileRequest._id_validator = bv.String(pattern=u'[-_0-9a-zA-Z]+')
FileRequest._url_validator = bv.String()
FileRequest._title_validator = bv.String()
FileRequest._destination_validator = bv.Nullable(bv.String(pattern=u'/.*'))
FileRequest._created_validator = bv.Timestamp(u'%Y-%m-%dT%H:%M:%SZ')
FileRequest._deadlines_validator = bv.Nullable(bv.Struct(FileRequestDeadlines))
FileRequest._open_validator = bv.Boolean()
FileRequest._file_count_validator = bv.Int64()
FileRequest._all_field_names_ = set([
    'id',
    'url',
    'title',
    'destination',
    'created',
    'deadlines',
    'open',
    'file_count',
])
FileRequest._all_fields_ = [
    ('id', FileRequest._id_validator),
    ('url', FileRequest._url_validator),
    ('title', FileRequest._title_validator),
    ('destination', FileRequest._destination_validator),
    ('created', FileRequest._created_validator),
    ('deadlines', FileRequest._deadlines_validator),
    ('open', FileRequest._open_validator),
    ('file_count', FileRequest._file_count_validator),
]

FileRequestError._not_found_validator = bv.Void()
FileRequestError._no_access_validator = bv.Void()
FileRequestError._wrong_user_validator = bv.Void()
FileRequestError._no_deadlines_validator = bv.Void()
FileRequestError._email_unverified_validator = bv.Void()
FileRequestError._validation_error_validator = bv.Nullable(bv.String())
FileRequestError._other_validator = bv.Void()
FileRequestError._tagmap = {
    'not_found': FileRequestError._not_found_validator,
    'no_access': FileRequestError._no_access_validator,
    'wrong_user': FileRequestError._wrong_user_validator,
    'no_deadlines': FileRequestError._no_deadlines_validator,
    'email_unverified': FileRequestError._email_unverified_validator,
    'validation_error': FileRequestError._validation_error_validator,
    'other': FileRequestError._other_validator,
}

FileRequestError.not_found = FileRequestError('not_found')
FileRequestError.no_access = FileRequestError('no_access')
FileRequestError.wrong_user = FileRequestError('wrong_user')
FileRequestError.no_deadlines = FileRequestError('no_deadlines')
FileRequestError.email_unverified = FileRequestError('email_unverified')
FileRequestError.other = FileRequestError('other')

ListFileRequestsResult._file_requests_validator = bv.List(bv.Struct(FileRequest))
ListFileRequestsResult._all_field_names_ = set(['file_requests'])
ListFileRequestsResult._all_fields_ = [('file_requests', ListFileRequestsResult._file_requests_validator)]

ListFileRequestsError._other_validator = bv.Void()
ListFileRequestsError._tagmap = {
    'other': ListFileRequestsError._other_validator,
}

ListFileRequestsError.other = ListFileRequestsError('other')

GetFileRequestArgs._id_validator = bv.String(pattern=u'[-_0-9a-zA-Z]+')
GetFileRequestArgs._all_field_names_ = set(['id'])
GetFileRequestArgs._all_fields_ = [('id', GetFileRequestArgs._id_validator)]

GetFileRequestError._tagmap = {
}
GetFileRequestError._tagmap.update(FileRequestError._tagmap)

CreateFileRequestArgs._title_validator = bv.String()
CreateFileRequestArgs._destination_validator = bv.String(pattern=u'/.*')
CreateFileRequestArgs._deadlines_validator = bv.Nullable(bv.Struct(FileRequestDeadlines))
CreateFileRequestArgs._open_validator = bv.Boolean()
CreateFileRequestArgs._all_field_names_ = set([
    'title',
    'destination',
    'deadlines',
    'open',
])
CreateFileRequestArgs._all_fields_ = [
    ('title', CreateFileRequestArgs._title_validator),
    ('destination', CreateFileRequestArgs._destination_validator),
    ('deadlines', CreateFileRequestArgs._deadlines_validator),
    ('open', CreateFileRequestArgs._open_validator),
]

CreateFileRequestError._tagmap = {
}
CreateFileRequestError._tagmap.update(FileRequestError._tagmap)

EditFileRequestArgs._id_validator = bv.String(pattern=u'[-_0-9a-zA-Z]+')
EditFileRequestArgs._title_validator = bv.Nullable(bv.String())
EditFileRequestArgs._destination_validator = bv.Nullable(bv.String(pattern=u'/.*'))
EditFileRequestArgs._deadlines_validator = bv.Nullable(bv.Struct(FileRequestDeadlines))
EditFileRequestArgs._open_validator = bv.Nullable(bv.Boolean())
EditFileRequestArgs._all_field_names_ = set([
    'id',
    'title',
    'destination',
    'deadlines',
    'open',
])
EditFileRequestArgs._all_fields_ = [
    ('id', EditFileRequestArgs._id_validator),
    ('title', EditFileRequestArgs._title_validator),
    ('destination', EditFileRequestArgs._destination_validator),
    ('deadlines', EditFileRequestArgs._deadlines_validator),
    ('open', EditFileRequestArgs._open_validator),
]

EditFileRequestError._tagmap = {
}
EditFileRequestError._tagmap.update(FileRequestError._tagmap)

