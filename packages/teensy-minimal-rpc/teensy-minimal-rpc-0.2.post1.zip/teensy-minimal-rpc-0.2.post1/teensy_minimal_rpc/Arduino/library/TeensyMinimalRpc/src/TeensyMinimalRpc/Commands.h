
/* #########################################################################
 * [2015-11-30 12:17:34.668000] THIS FILE IS AUTOGENERATED - DO NOT EDIT!
 * ######################################################################### */
#ifndef ___TEENSY_MINIMAL_RPC__COMMANDS___
#define ___TEENSY_MINIMAL_RPC__COMMANDS___

#include "CArrayDefs.h"



namespace teensy_minimal_rpc {


typedef struct __attribute__((packed)) {
} BaseNodeSoftwareVersionRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} BaseNodeSoftwareVersionResponse;

typedef struct __attribute__((packed)) {
} PackageNameRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} PackageNameResponse;

typedef struct __attribute__((packed)) {
} DisplayNameRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} DisplayNameResponse;

typedef struct __attribute__((packed)) {
} ManufacturerRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ManufacturerResponse;

typedef struct __attribute__((packed)) {
} SoftwareVersionRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} SoftwareVersionResponse;

typedef struct __attribute__((packed)) {
} UrlRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} UrlResponse;

typedef struct __attribute__((packed)) {
} MicrosecondsRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MicrosecondsResponse;

typedef struct __attribute__((packed)) {
} MillisecondsRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MillisecondsResponse;

typedef struct __attribute__((packed)) {
  uint16_t us;
} DelayUsRequest;

typedef struct __attribute__((packed)) {
} DelayUsResponse;

typedef struct __attribute__((packed)) {
  uint16_t ms;
} DelayMsRequest;

typedef struct __attribute__((packed)) {
} DelayMsResponse;

typedef struct __attribute__((packed)) {
} RamFreeRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} RamFreeResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  uint8_t mode;
} PinModeRequest;

typedef struct __attribute__((packed)) {
} PinModeResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
} DigitalReadRequest;

typedef struct __attribute__((packed)) {
  uint8_t result;
} DigitalReadResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  uint8_t value;
} DigitalWriteRequest;

typedef struct __attribute__((packed)) {
} DigitalWriteResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
} AnalogReadRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} AnalogReadResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  uint8_t value;
} AnalogWriteRequest;

typedef struct __attribute__((packed)) {
} AnalogWriteResponse;

typedef struct __attribute__((packed)) {
  UInt8Array array;
} ArrayLengthRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} ArrayLengthResponse;

typedef struct __attribute__((packed)) {
  UInt32Array array;
} EchoArrayRequest;

typedef struct __attribute__((packed)) {
  UInt32Array result;
} EchoArrayResponse;

typedef struct __attribute__((packed)) {
  UInt8Array msg;
} StrEchoRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} StrEchoResponse;

typedef struct __attribute__((packed)) {
} MaxSerialPayloadSizeRequest;

typedef struct __attribute__((packed)) {
  int32_t result;
} MaxSerialPayloadSizeResponse;

typedef struct __attribute__((packed)) {
} GetBufferRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} GetBufferResponse;

typedef struct __attribute__((packed)) {
} BeginRequest;

typedef struct __attribute__((packed)) {
} BeginResponse;

typedef struct __attribute__((packed)) {
} DmaTcdRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} DmaTcdResponse;

typedef struct __attribute__((packed)) {
  uint32_t buffer_size;
} DmaStartRequest;

typedef struct __attribute__((packed)) {
  bool result;
} DmaStartResponse;

typedef struct __attribute__((packed)) {
} DmaStopRequest;

typedef struct __attribute__((packed)) {
} DmaStopResponse;

typedef struct __attribute__((packed)) {
} DmaReadRequest;

typedef struct __attribute__((packed)) {
  int16_t result;
} DmaReadResponse;

typedef struct __attribute__((packed)) {
} DmaFullRequest;

typedef struct __attribute__((packed)) {
  bool result;
} DmaFullResponse;

typedef struct __attribute__((packed)) {
} DmaEmptyRequest;

typedef struct __attribute__((packed)) {
  bool result;
} DmaEmptyResponse;

typedef struct __attribute__((packed)) {
} DmaAvailableRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} DmaAvailableResponse;

typedef struct __attribute__((packed)) {
} AdcBufferRequest;

typedef struct __attribute__((packed)) {
  UInt16Array result;
} AdcBufferResponse;

typedef struct __attribute__((packed)) {
} AdcReadRequest;

typedef struct __attribute__((packed)) {
  UInt16Array result;
} AdcReadResponse;

typedef struct __attribute__((packed)) {
  uint8_t type;
  int8_t adc_num;
} SetreferenceRequest;

typedef struct __attribute__((packed)) {
} SetreferenceResponse;

typedef struct __attribute__((packed)) {
  uint32_t period;
} StartTimerRequest;

typedef struct __attribute__((packed)) {
} StartTimerResponse;

typedef struct __attribute__((packed)) {
} StopTimerRequest;

typedef struct __attribute__((packed)) {
} StopTimerResponse;

typedef struct __attribute__((packed)) {
} OnTickRequest;

typedef struct __attribute__((packed)) {
} OnTickResponse;

typedef struct __attribute__((packed)) {
} V_SystCvrRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} V_SystCvrResponse;

typedef struct __attribute__((packed)) {
} V_ScbIcsrRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} V_ScbIcsrResponse;

typedef struct __attribute__((packed)) {
} D_FCpuRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} D_FCpuResponse;

typedef struct __attribute__((packed)) {
} D_FBusRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} D_FBusResponse;

typedef struct __attribute__((packed)) {
} OnAdcDoneRequest;

typedef struct __attribute__((packed)) {
} OnAdcDoneResponse;

typedef struct __attribute__((packed)) {
} AdcTimestampUsRequest;

typedef struct __attribute__((packed)) {
  float result;
} AdcTimestampUsResponse;

typedef struct __attribute__((packed)) {
  uint32_t _SYST_CVR;
  uint32_t _millis;
} ComputeTimestampUsRequest;

typedef struct __attribute__((packed)) {
  float result;
} ComputeTimestampUsResponse;

typedef struct __attribute__((packed)) {
} AdcPeriodUsRequest;

typedef struct __attribute__((packed)) {
  float result;
} AdcPeriodUsResponse;

typedef struct __attribute__((packed)) {
  uint8_t bits;
  int8_t adc_num;
} SetresolutionRequest;

typedef struct __attribute__((packed)) {
} SetresolutionResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} GetresolutionRequest;

typedef struct __attribute__((packed)) {
  uint8_t result;
} GetresolutionResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} GetmaxvalueRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} GetmaxvalueResponse;

typedef struct __attribute__((packed)) {
  uint8_t speed;
  int8_t adc_num;
} SetconversionspeedRequest;

typedef struct __attribute__((packed)) {
} SetconversionspeedResponse;

typedef struct __attribute__((packed)) {
  uint8_t speed;
  int8_t adc_num;
} SetsamplingspeedRequest;

typedef struct __attribute__((packed)) {
} SetsamplingspeedResponse;

typedef struct __attribute__((packed)) {
  uint32_t N;
} BenchmarkFlopsRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} BenchmarkFlopsResponse;

typedef struct __attribute__((packed)) {
  uint32_t N;
} BenchmarkIopsRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} BenchmarkIopsResponse;

typedef struct __attribute__((packed)) {
  uint8_t num;
  int8_t adc_num;
} SetaveragingRequest;

typedef struct __attribute__((packed)) {
} SetaveragingResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} EnableinterruptsRequest;

typedef struct __attribute__((packed)) {
} EnableinterruptsResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} DisableinterruptsRequest;

typedef struct __attribute__((packed)) {
} DisableinterruptsResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} EnabledmaRequest;

typedef struct __attribute__((packed)) {
} EnabledmaResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} DisabledmaRequest;

typedef struct __attribute__((packed)) {
} DisabledmaResponse;

typedef struct __attribute__((packed)) {
  int16_t compValue;
  bool greaterThan;
  int8_t adc_num;
} EnablecompareRequest;

typedef struct __attribute__((packed)) {
} EnablecompareResponse;

typedef struct __attribute__((packed)) {
  int16_t lowerLimit;
  int16_t upperLimit;
  bool insideRange;
  bool inclusive;
  int8_t adc_num;
} EnablecomparerangeRequest;

typedef struct __attribute__((packed)) {
} EnablecomparerangeResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} DisablecompareRequest;

typedef struct __attribute__((packed)) {
} DisablecompareResponse;

typedef struct __attribute__((packed)) {
  uint8_t gain;
  int8_t adc_num;
} EnablepgaRequest;

typedef struct __attribute__((packed)) {
} EnablepgaResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} GetpgaRequest;

typedef struct __attribute__((packed)) {
  uint8_t result;
} GetpgaResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} DisablepgaRequest;

typedef struct __attribute__((packed)) {
} DisablepgaResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} IsconvertingRequest;

typedef struct __attribute__((packed)) {
  bool result;
} IsconvertingResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} IscompleteRequest;

typedef struct __attribute__((packed)) {
  bool result;
} IscompleteResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} IsdifferentialRequest;

typedef struct __attribute__((packed)) {
  bool result;
} IsdifferentialResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} IscontinuousRequest;

typedef struct __attribute__((packed)) {
  bool result;
} IscontinuousResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  int8_t adc_num;
} AnalogreadRequest;

typedef struct __attribute__((packed)) {
  int32_t result;
} AnalogreadResponse;

typedef struct __attribute__((packed)) {
  uint8_t pinP;
  uint8_t pinN;
  int8_t adc_num;
} AnalogreaddifferentialRequest;

typedef struct __attribute__((packed)) {
  int32_t result;
} AnalogreaddifferentialResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  int8_t adc_num;
} StartsinglereadRequest;

typedef struct __attribute__((packed)) {
  bool result;
} StartsinglereadResponse;

typedef struct __attribute__((packed)) {
  uint8_t pinP;
  uint8_t pinN;
  int8_t adc_num;
} StartsingledifferentialRequest;

typedef struct __attribute__((packed)) {
  bool result;
} StartsingledifferentialResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} ReadsingleRequest;

typedef struct __attribute__((packed)) {
  int32_t result;
} ReadsingleResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  int8_t adc_num;
} StartcontinuousRequest;

typedef struct __attribute__((packed)) {
  bool result;
} StartcontinuousResponse;

typedef struct __attribute__((packed)) {
  uint8_t pinP;
  uint8_t pinN;
  int8_t adc_num;
} StartcontinuousdifferentialRequest;

typedef struct __attribute__((packed)) {
  bool result;
} StartcontinuousdifferentialResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} AnalogreadcontinuousRequest;

typedef struct __attribute__((packed)) {
  int32_t result;
} AnalogreadcontinuousResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} StopcontinuousRequest;

typedef struct __attribute__((packed)) {
} StopcontinuousResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin0;
  uint8_t pin1;
} AnalogsynchronizedreadRequest;

typedef struct __attribute__((packed)) {
  Int32Array result;
} AnalogsynchronizedreadResponse;

typedef struct __attribute__((packed)) {
  uint16_t pin;
} AnalogInputToDigitalPinRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} AnalogInputToDigitalPinResponse;

typedef struct __attribute__((packed)) {
  uint16_t pin;
} DigitalPinHasPwmRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} DigitalPinHasPwmResponse;

typedef struct __attribute__((packed)) {
  uint16_t pin;
} DigitalPinToInterruptRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} DigitalPinToInterruptResponse;

typedef struct __attribute__((packed)) {
  uint8_t adc_num;
} ReadAdcRegistersRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadAdcRegistersResponse;

typedef struct __attribute__((packed)) {
  uint8_t adc_num;
  UInt8Array serialized_adc_msg;
} UpdateAdcRegistersRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateAdcRegistersResponse;

typedef struct __attribute__((packed)) {
} ReadPitRegistersRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadPitRegistersResponse;

typedef struct __attribute__((packed)) {
  UInt8Array serialized_pit_msg;
} UpdatePitRegistersRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdatePitRegistersResponse;

typedef struct __attribute__((packed)) {
  uint8_t timer_index;
} ReadPitTimerConfigRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadPitTimerConfigResponse;

typedef struct __attribute__((packed)) {
  uint32_t index;
  UInt8Array serialized_config;
} UpdatePitTimerConfigRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdatePitTimerConfigResponse;

typedef struct __attribute__((packed)) {
} DmaChannelCountRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} DmaChannelCountResponse;

typedef struct __attribute__((packed)) {
  uint8_t channel_num;
} ReadDmaTcdRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadDmaTcdResponse;

typedef struct __attribute__((packed)) {
  uint8_t channel_num;
} ResetDmaTcdRequest;

typedef struct __attribute__((packed)) {
} ResetDmaTcdResponse;

typedef struct __attribute__((packed)) {
  uint8_t channel_num;
  UInt8Array serialized_tcd;
} UpdateDmaTcdRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateDmaTcdResponse;

typedef struct __attribute__((packed)) {
  uint8_t channel_num;
} ReadDmaPriorityRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadDmaPriorityResponse;

typedef struct __attribute__((packed)) {
} ReadDmaRegistersRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadDmaRegistersResponse;

typedef struct __attribute__((packed)) {
  UInt8Array serialized_dma_msg;
} UpdateDmaRegistersRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateDmaRegistersResponse;

typedef struct __attribute__((packed)) {
} ReadSimScgc6Request;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadSimScgc6Response;

typedef struct __attribute__((packed)) {
} ReadSimScgc7Request;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadSimScgc7Response;

typedef struct __attribute__((packed)) {
  UInt8Array serialized_scgc6;
} UpdateSimScgc6Request;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateSimScgc6Response;

typedef struct __attribute__((packed)) {
  UInt8Array serialized_scgc7;
} UpdateSimScgc7Request;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateSimScgc7Response;

typedef struct __attribute__((packed)) {
} FreeAllRequest;

typedef struct __attribute__((packed)) {
} FreeAllResponse;

typedef struct __attribute__((packed)) {
  uint32_t size;
} MemAllocRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MemAllocResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
} MemFreeRequest;

typedef struct __attribute__((packed)) {
} MemFreeResponse;

typedef struct __attribute__((packed)) {
  uint32_t alignment;
  uint32_t size;
} MemAlignedAllocRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MemAlignedAllocResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
} MemAlignedFreeRequest;

typedef struct __attribute__((packed)) {
} MemAlignedFreeResponse;

typedef struct __attribute__((packed)) {
  uint32_t alignment;
  UInt8Array data;
} MemAlignedAllocAndSetRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MemAlignedAllocAndSetResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
  UInt8Array data;
} MemCpyHostToDeviceRequest;

typedef struct __attribute__((packed)) {
} MemCpyHostToDeviceResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
  uint32_t size;
} MemCpyDeviceToHostRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} MemCpyDeviceToHostResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
  uint8_t value;
  uint32_t size;
} MemFillUint8Request;

typedef struct __attribute__((packed)) {
} MemFillUint8Response;

typedef struct __attribute__((packed)) {
  uint32_t address;
  uint16_t value;
  uint32_t size;
} MemFillUint16Request;

typedef struct __attribute__((packed)) {
} MemFillUint16Response;

typedef struct __attribute__((packed)) {
  uint32_t address;
  uint32_t value;
  uint32_t size;
} MemFillUint32Request;

typedef struct __attribute__((packed)) {
} MemFillUint32Response;

typedef struct __attribute__((packed)) {
  uint32_t address;
  float value;
  uint32_t size;
} MemFillFloatRequest;

typedef struct __attribute__((packed)) {
} MemFillFloatResponse;



static const int CMD_BASE_NODE_SOFTWARE_VERSION = 0x00;
static const int CMD_PACKAGE_NAME = 0x01;
static const int CMD_DISPLAY_NAME = 0x02;
static const int CMD_MANUFACTURER = 0x03;
static const int CMD_SOFTWARE_VERSION = 0x04;
static const int CMD_URL = 0x05;
static const int CMD_MICROSECONDS = 0x06;
static const int CMD_MILLISECONDS = 0x07;
static const int CMD_DELAY_US = 0x08;
static const int CMD_DELAY_MS = 0x09;
static const int CMD_RAM_FREE = 0x0a;
static const int CMD_PIN_MODE = 0x0b;
static const int CMD_DIGITAL_READ = 0x0c;
static const int CMD_DIGITAL_WRITE = 0x0d;
static const int CMD_ANALOG_READ = 0x0e;
static const int CMD_ANALOG_WRITE = 0x0f;
static const int CMD_ARRAY_LENGTH = 0x10;
static const int CMD_ECHO_ARRAY = 0x11;
static const int CMD_STR_ECHO = 0x12;
static const int CMD_MAX_SERIAL_PAYLOAD_SIZE = 0xff;
static const int CMD_GET_BUFFER = 0x1fe;
static const int CMD_BEGIN = 0x1ff;
static const int CMD_DMA_TCD = 0x200;
static const int CMD_DMA_START = 0x201;
static const int CMD_DMA_STOP = 0x202;
static const int CMD_DMA_READ = 0x203;
static const int CMD_DMA_FULL = 0x204;
static const int CMD_DMA_EMPTY = 0x205;
static const int CMD_DMA_AVAILABLE = 0x206;
static const int CMD_ADC_BUFFER = 0x207;
static const int CMD_ADC_READ = 0x208;
static const int CMD_SETREFERENCE = 0x209;
static const int CMD_START_TIMER = 0x20a;
static const int CMD_STOP_TIMER = 0x20b;
static const int CMD_ON_TICK = 0x20c;
static const int CMD_V__SYST_CVR = 0x20d;
static const int CMD_V__SCB_ICSR = 0x20e;
static const int CMD_D__F_CPU = 0x20f;
static const int CMD_D__F_BUS = 0x210;
static const int CMD_ON_ADC_DONE = 0x211;
static const int CMD_ADC_TIMESTAMP_US = 0x212;
static const int CMD_COMPUTE_TIMESTAMP_US = 0x213;
static const int CMD_ADC_PERIOD_US = 0x214;
static const int CMD_SETRESOLUTION = 0x215;
static const int CMD_GETRESOLUTION = 0x216;
static const int CMD_GETMAXVALUE = 0x217;
static const int CMD_SETCONVERSIONSPEED = 0x218;
static const int CMD_SETSAMPLINGSPEED = 0x219;
static const int CMD_BENCHMARK_FLOPS = 0x21a;
static const int CMD_BENCHMARK_IOPS = 0x21b;
static const int CMD_SETAVERAGING = 0x21c;
static const int CMD_ENABLEINTERRUPTS = 0x21d;
static const int CMD_DISABLEINTERRUPTS = 0x21e;
static const int CMD_ENABLEDMA = 0x21f;
static const int CMD_DISABLEDMA = 0x220;
static const int CMD_ENABLECOMPARE = 0x221;
static const int CMD_ENABLECOMPARERANGE = 0x222;
static const int CMD_DISABLECOMPARE = 0x223;
static const int CMD_ENABLEPGA = 0x224;
static const int CMD_GETPGA = 0x225;
static const int CMD_DISABLEPGA = 0x226;
static const int CMD_ISCONVERTING = 0x227;
static const int CMD_ISCOMPLETE = 0x228;
static const int CMD_ISDIFFERENTIAL = 0x229;
static const int CMD_ISCONTINUOUS = 0x22a;
static const int CMD_ANALOGREAD = 0x22b;
static const int CMD_ANALOGREADDIFFERENTIAL = 0x22c;
static const int CMD_STARTSINGLEREAD = 0x22d;
static const int CMD_STARTSINGLEDIFFERENTIAL = 0x22e;
static const int CMD_READSINGLE = 0x22f;
static const int CMD_STARTCONTINUOUS = 0x230;
static const int CMD_STARTCONTINUOUSDIFFERENTIAL = 0x231;
static const int CMD_ANALOGREADCONTINUOUS = 0x232;
static const int CMD_STOPCONTINUOUS = 0x233;
static const int CMD_ANALOGSYNCHRONIZEDREAD = 0x234;
static const int CMD_ANALOG_INPUT_TO_DIGITAL_PIN = 0x235;
static const int CMD_DIGITAL_PIN_HAS_PWM = 0x236;
static const int CMD_DIGITAL_PIN_TO_INTERRUPT = 0x237;
static const int CMD_READ_ADC_REGISTERS = 0x238;
static const int CMD_UPDATE_ADC_REGISTERS = 0x239;
static const int CMD_READ_PIT_REGISTERS = 0x23a;
static const int CMD_UPDATE_PIT_REGISTERS = 0x23b;
static const int CMD_READ_PIT_TIMER_CONFIG = 0x23c;
static const int CMD_UPDATE_PIT_TIMER_CONFIG = 0x23d;
static const int CMD_DMA_CHANNEL_COUNT = 0x23e;
static const int CMD_READ_DMA_TCD = 0x23f;
static const int CMD_RESET_DMA_TCD = 0x240;
static const int CMD_UPDATE_DMA_TCD = 0x241;
static const int CMD_READ_DMA_PRIORITY = 0x242;
static const int CMD_READ_DMA_REGISTERS = 0x243;
static const int CMD_UPDATE_DMA_REGISTERS = 0x244;
static const int CMD_READ_SIM_SCGC6 = 0x245;
static const int CMD_READ_SIM_SCGC7 = 0x246;
static const int CMD_UPDATE_SIM_SCGC6 = 0x247;
static const int CMD_UPDATE_SIM_SCGC7 = 0x248;
static const int CMD_FREE_ALL = 0x249;
static const int CMD_MEM_ALLOC = 0x24a;
static const int CMD_MEM_FREE = 0x24b;
static const int CMD_MEM_ALIGNED_ALLOC = 0x24c;
static const int CMD_MEM_ALIGNED_FREE = 0x24d;
static const int CMD_MEM_ALIGNED_ALLOC_AND_SET = 0x24e;
static const int CMD_MEM_CPY_HOST_TO_DEVICE = 0x24f;
static const int CMD_MEM_CPY_DEVICE_TO_HOST = 0x250;
static const int CMD_MEM_FILL_UINT8 = 0x251;
static const int CMD_MEM_FILL_UINT16 = 0x252;
static const int CMD_MEM_FILL_UINT32 = 0x253;
static const int CMD_MEM_FILL_FLOAT = 0x254;

}  // namespace teensy_minimal_rpc



#endif  // ifndef ___TEENSY_MINIMAL_RPC__COMMANDS___
