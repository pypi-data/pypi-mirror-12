Metadata-Version: 1.0
Name: notedown
Version: 1.5.0
Summary: Convert markdown to IPython notebook.
Home-page: http://github.com/aaren/notedown
Author: Aaron O'Leary
Author-email: dev@aaren.me
License: BSD 2-Clause
Description: b"*Python 2/3 and IPython 4 / Jupyter compatible!*\n\nConvert IPython Notebooks to markdown (and back)\n================================================\n\n`notedown <http://github.com/aaren/notedown>`__ is a simple tool to\ncreate `IPython notebooks <http://www.ipython.org/notebook>`__ from\nmarkdown (and r-markdown).\n\n``notedown`` separates your markdown into code and not code. Code blocks\n(fenced or indented) go into input cells, everything else goes into\nmarkdown cells.\n\nUsage:\n\n::\n\n    notedown input.md > output.ipynb\n\nInstallation:\n\n::\n\n    pip install notedown\n\nor the latest on github:\n\n::\n\n    pip install https://github.com/aaren/notedown/tarball/master\n\nConversion to markdown\n----------------------\n\nConvert a notebook into markdown, stripping all outputs:\n\n::\n\n    notedown input.ipynb --to markdown --strip > output.md\n\nConvert a notebook into markdown, with output JSON intact:\n\n::\n\n    notedown input.ipynb --to markdown > output_with_outputs.md\n\nThe outputs are placed as JSON in a code-block immediately after the\ncorresponding input code-block. ``notedown`` understands this convention\nas well, so it is possible to convert this markdown-with-json back into\na notebook.\n\nThis means it is possible to edit markdown, convert to notebook, play\naround a bit and convert back to markdown.\n\nNB: currently, notebook and cell metadata is not preserved in the\nconversion.\n\nStrip the output cells from markdown:\n\n::\n\n    notedown with_output_cells.md --to markdown --strip > no_output_cells.md\n\nRunning an IPython Notebook\n---------------------------\n\n::\n\n    notedown notebook.md --run > executed_notebook.ipynb\n\nEditing in the browser *(new!)*\n-------------------------------\n\nYou can configure IPython / Jupyter to seamlessly use markdown as its\nstorage format. Add the following to your config file:\n\n::\n\n    c.NotebookApp.contents_manager_class = 'notedown.NotedownContentsManager'\n\nNow you can edit your markdown files in the browser, execute code,\ncreate plots - all stored in markdown!\n\nFor Jupyter, your config file is ``jupyter_notebook_config.py`` in\n``~/.jupyter``. For IPython your config is\n``ipython_notebook_config.py`` in your ipython profile (probably\n``~/.ipython/profile_default``):\n\nR-markdown\n----------\n\nYou can use ``notedown`` to convert r-markdown as well. We just need to\ntell ``notedown`` to use `knitr <yihui.name/knitr>`__ to convert the\nr-markdown. This requires that you have R installed with\n`knitr <yihui.name/knitr>`__.\n\nConvert r-markdown into markdown:\n\n::\n\n    notedown input.Rmd --to markdown --knit > output.md\n\nConvert r-markdown into an IPython notebook:\n\n::\n\n    notedown input.Rmd --knit > output.ipynb\n\n-  ``--rmagic`` will add ``%load_ext rpy2.ipython`` at the start of the\n   notebook, allowing you to execute code cells using the rmagic\n   extension (requires `rpy2 <http://rpy.sourceforge.net/>`__). notedown\n   does the appropriate ``%R`` cell magic automatically.\n\nMagic\n-----\n\nFenced code blocks annotated with a language other than python are read\ninto cells using IPython's ``%%`` `cell\nmagic <http://nbviewer.ipython.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb>`__.\n\nYou can disable this with ``--nomagic``.\n\n-  ``--pre`` lets you add arbitrary code to the start of the notebook.\n   e.g.\n   ``notedown file.md --pre '%matplotlib inline' 'import numpy as np'``\n\nHow do I put a literal code block in my markdown?\n-------------------------------------------------\n\nBy using the ``--match`` argument. ``notedown`` defaults to converting\n*all* code-blocks into code-cells. This behaviour can be changed by\ngiving a different argument to ``--match``:\n\n-  ``--match=all``: convert all code blocks (the default)\n-  ``--match=fenced``: only convert fenced code blocks\n-  ``--match=language``: only convert fenced code blocks with 'language'\n   as the syntax specifier.\n-  ``--match=strict``: only convert code blocks with Pandoc style\n   attributes containing 'python' and 'input' as classes. i.e. code\n   blocks must look like\n\n   ::\n\n       ```{.python .input}\n       code\n       ```\n\nThis isn't very interactive!\n----------------------------\n\nTry editing the markdown in the IPython Notebook using the\n``NotedownContentsManager`` (see above).\n\nYou can get an interactive ipython session in vim by using\n`vim-ipython <http://www.github.com/ivanov/vim-ipython>`__, which allows\nyou to connect to a running ipython kernel. You can send code from vim\nto ipython and get code completion from the running kernel. Try it!\n\nWhere's my syntax highlighting?!\n--------------------------------\n\nTry using either\n`vim-markdown <https://github.com/tpope/vim-markdown>`__ or\n`vim-pandoc <https://github.com/vim-pandoc/vim-pandoc>`__. Both are\nclever enough to highlight code in markdown.\n\nRendering outputs in markdown\n-----------------------------\n\nThis is experimental!\n\nConvert a notebook into markdown, rendering cell outputs as native\nmarkdown elements:\n\n::\n\n    notedown input.ipynb --render\n\nThis means that e.g. png outputs become ``![](data-uri)`` images and\nthat text is placed in the document.\n\nOf course, you can use this in conjuntion with runipy to produce\nmarkdown-with-code-and-figures from markdown-with-code:\n\n::\n\n    notedown input.md --run --render > output.md\n\nNot a notebook in sight!\n\nThe ``--render`` flag forces the output format to markdown.\n\nTODO\n----\n\n-  [x] Python 3 support\n-  [x] unicode support\n-  [x] IPython 3 support\n-  [ ] IPython 4 (Jupyter) support\n-  [ ] Allow kernel specification\n"
Platform: UNKNOWN
