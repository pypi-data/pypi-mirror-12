[{"type":"js","data":"/* Imports for global scope */\n\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nLog = Package.logging.Log;\nReload = Package.reload.Reload;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nMongo = Package.mongo.Mongo;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nTemplate = Package.templating.Template;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"container\"\n  }, HTML.Raw(\"\\n    <header>\\n      <h1>Todo List</h1>\\n    </header>\\n\\n    \"), HTML.UL(\"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"tasks\"));\n  }, function() {\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"task\")), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"task\");\nTemplate[\"task\"] = new Template(\"Template.task\", (function() {\n  var view = this;\n  return HTML.LI(Blaze.View(\"lookup:text\", function() {\n    return Spacebars.mustache(view.lookup(\"text\"));\n  }));\n}));\n\n}).call(this);\n","servePath":"/meteor_todos.compiled.html.js","sourceMap":{"version":3,"sources":["/meteor_todos.compiled.html.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/meteor_todos.compiled.html.js","sourcesContent":["\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"container\"\n  }, HTML.Raw(\"\\n    <header>\\n      <h1>Todo List</h1>\\n    </header>\\n\\n    \"), HTML.UL(\"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"tasks\"));\n  }, function() {\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"task\")), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"task\");\nTemplate[\"task\"] = new Template(\"Template.task\", (function() {\n  var view = this;\n  return HTML.LI(Blaze.View(\"lookup:text\", function() {\n    return Spacebars.mustache(view.lookup(\"text\"));\n  }));\n}));\n"]}},{"type":"js","data":"(function(){if (Meteor.isClient) {\n  // This code only runs on the client\n  options = {};\n  if (__meteor_runtime_config__.hasOwnProperty('DDP_DEFAULT_CONNECTION_URL')) {\n    Django = Meteor;\n  } else {\n    Django = DDP.connect(window.location.protocol + '//'+window.location.hostname+':8000/');\n    options.connection = Django;\n  }\n  Tasks = new Mongo.Collection(\"django_todos.task\", options);\n  TaskSub = Django.subscribe('Tasks');\n  Template.body.helpers({\n    tasks: function () {\n      return Tasks.find({});\n    }\n  });\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  });\n}\n\n}).call(this);\n","servePath":"/meteor_todos.js","sourceMap":{"version":3,"sources":["/meteor_todos.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/meteor_todos.js","sourcesContent":["if (Meteor.isClient) {\n  // This code only runs on the client\n  options = {};\n  if (__meteor_runtime_config__.hasOwnProperty('DDP_DEFAULT_CONNECTION_URL')) {\n    Django = Meteor;\n  } else {\n    Django = DDP.connect(window.location.protocol + '//'+window.location.hostname+':8000/');\n    options.connection = Django;\n  }\n  Tasks = new Mongo.Collection(\"django_todos.task\", options);\n  TaskSub = Django.subscribe('Tasks');\n  Template.body.helpers({\n    tasks: function () {\n      return Tasks.find({});\n    }\n  });\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  });\n}\n"]}}]