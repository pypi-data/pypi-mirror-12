########################################################
# Started Logging At: 2015-10-27 20:19:58
########################################################

########################################################
# # Started Logging At: 2015-10-27 20:19:58
########################################################
get_ipython().system('edhead 10074-190_HCOp.fits')
get_ipython().system('edhead 10074-190_HCOp.fits')
interactive=True
########################################################
# Started Logging At: 2015-10-27 20:21:18
########################################################

########################################################
# # Started Logging At: 2015-10-27 20:21:18
########################################################
get_ipython().magic('paste')
from __future__ import print_function
import pyspeckit
import matplotlib
import numpy as np
from astropy import units as u

if not 'savedir' in globals():
    savedir = ''

# load a FITS-compliant spectrum
spec = pyspeckit.Spectrum('10074-190_HCOp.fits')
# The units are originally frequency (check this by printing spec.xarr.units).
# I want to know the velocity.  Convert!
# Note that this only works because the reference frequency is set in the header
# this is no longer necessary!  #spec.xarr.frequency_to_velocity()
# Default conversion is to m/s, but we traditionally work in km/s
spec.xarr = spec.xarr.as_unit('km/s', equivalencies=u.doppler_radio(spec.xarr.center_frequency))
# plot it up!
spec.plotter()
# Subtract a baseline (the data is only 'mostly' reduced)
spec.baseline(interactive=True)

# specify x points in data units.  We need to transform them to axis units
# because the axis are not consistently generated by mpl
xpoints = [-270,0,50,218,218]
ypoints = [0]*5
buttons = [1,1,1,1,2]
transform = spec.plotter.axis.transData.transform_point
# this absolutely ridiculous line is to deal with scope changes from py2->py3
# http://stackoverflow.com/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition#comment19179733_13913933
def xy_(transform, xpoints, ypoints):
    return [transform((xp,yp)) for xp,yp in zip(xpoints,ypoints)]
xy = xy_(transform, xpoints, ypoints)

mouseevent = matplotlib.backend_bases.MouseEvent
def events_(MouseEvent=matplotlib.backend_bases.MouseEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [MouseEvent('button_press_event', canvas,
                       xp, yp, button=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_()

for ev in events:
    print("Events x={0},y={1}".format(ev.xdata,ev.ydata))
    spec.baseline.event_manager(ev)

spec.baseline.highlight_fitregion()
get_ipython().magic('paste')
spec.specfit(interactive=True)

xpoints = [0,50,26,28,28]
ypoints = [0, 0, 0.14, 0.07, 0]
buttons = [1,1,2,2,3]
xy = xy_(transform, xpoints, ypoints)

for ev in events:
    print("Events x={0},y={1}".format(ev.xdata,ev.ydata))
    spec.baseline.event_manager(ev)

def events_(KeyEvent=matplotlib.backend_bases.KeyEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [KeyEvent('button_press_event', canvas,
                     x=xp, y=yp, key=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_(matplotlib.backend_bases.KeyEvent,
                 spec.plotter.axis.figure.canvas, xy, buttons)

for ev in events:
    print("Events x={0},y={1}".format(ev.xdata,ev.ydata))
    spec.specfit.event_manager(ev)


print("Includemask before excludefit: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
spec.baseline(excludefit=True)
spec.baseline.highlight_fitregion()
print("Includemask after excludefit: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
spec.specfit(guesses=spec.specfit.modelpars)
get_ipython().magic('paste')
print("Doing the interactive thing now")
event1 = matplotlib.backend_bases.KeyEvent('key_press_event', spec.plotter.axis.figure.canvas,key='o')
# event 1 is clicking the zoom button
x,y = transform((-20,-0.07))
event2 = matplotlib.backend_bases.MouseEvent('button_press_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event2.inaxes = spec.plotter.axis

event3 = matplotlib.backend_bases.MouseEvent('motion_notify_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event3.inaxes = spec.plotter.axis

x,y = transform((75,0.16))
event4 = matplotlib.backend_bases.MouseEvent('button_release_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event4.inaxes = spec.plotter.axis
get_ipython().magic('paste')
if hasattr(spec.plotter.figure.canvas,'toolbar'):
    spec.plotter.figure.canvas.toolbar.press_zoom(event2)
    spec.plotter.figure.canvas.toolbar._xypress=[(event2.x,event2.y,spec.plotter.axis,0,spec.plotter.axis.viewLim.frozen(),spec.plotter.axis.transData.frozen())]
    spec.plotter.figure.canvas.toolbar.drag_zoom(event3)
    spec.plotter.figure.canvas.toolbar.release_zoom(event4)

    # make sure zoom worked
    np.testing.assert_array_almost_equal(spec.plotter.axis.get_xlim(), [-20, 75])
    np.testing.assert_array_almost_equal(spec.plotter.axis.get_ylim(), [-0.07, 0.16])
else:
    spec.plotter.axis.set_xlim(-20, 75)
    spec.plotter.axis.set_ylim(-0.07, 0.16)
get_ipython().magic('paste')
#spec.plotter.debug=True
print("Includemask before excludefit with window limits: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
spec.baseline(excludefit=True,use_window_limits=True,highlight=True)
spec.baseline.highlight_fitregion()
print("Includemask after excludefit with window limits: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
# total 512 pixels, 5 should be excluded inside, 107 should be available
spec.specfit.includemask.sum()
spec.baseline.includemask.sum()
get_ipython().magic('paste')
event1 = matplotlib.backend_bases.KeyEvent('key_press_event', spec.plotter.axis.figure.canvas,key='B')
spec.plotter.parse_keys(event1)
print("spec.baseline.includemask.sum()",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() == 0
x,y = transform((-83.3,-0.007))
event2 = matplotlib.backend_bases.MouseEvent('button_press_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event2.inaxes,event2.button,event2.xdata,event2.ydata = spec.plotter.axis,1,-83.3,-0.007
spec.baseline.event_manager(event2,debug=True)
event2.inaxes,event2.button,event2.xdata,event2.ydata = spec.plotter.axis,1,23,-0.01
spec.baseline.event_manager(event2,debug=True)
spec.baseline.includemask.sum()
get_ipython().magic('paste')
event2.inaxes,event2.button,event2.xdata,event2.ydata = spec.plotter.axis,1,59,-0.1
spec.baseline.event_manager(event2,debug=True)
event2.inaxes,event2.button,event2.xdata,event2.ydata = spec.plotter.axis,1,244,0.1
spec.baseline.event_manager(event2,debug=True)
assert spec.baseline.includemask.sum() == 264
spec.baseline.includemask.sum()
event2.inaxes,event2.button,event2.xdata,event2.ydata = spec.plotter.axis,3,244,0.1
spec.baseline.event_manager(event2,debug=True)
spec.baseline.baselinepars
get_ipython().magic('run simple_fit_example.py')
get_ipython().magic('run simple_fit_interactive.py')
spec.baseline.baselinepars
spec.specfit.parinfo
spec.specfit.parinfo.values
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
spec.specfit.plot_fit()
spec.specfit.peakbgfit(use_window_limits=True, vheight=False)
spec.specfit.peakbgfit(use_window_limits=True, vheight=False)
spec.specfit.peakbgfit(use_window_limits=True, vheight=False)
spec.specfit.peakbgfit(use_window_limits=True, vheight=False)
spec.specfit.peakbgfit(use_window_limits=True, vheight=False)
spec.specfit.peakbgfit(use_window_limits=True, vheight=False)
spec.specfit.peakbgfit(use_window_limits=True, vheight=False)
spec.baseline()
spec.specfit.peakbgfit(use_window_limits=True, vheight=False)
spec.specfit.peakbgfit(use_window_limits=True, vheight=False)
spec.specfit(guesses='moments')
spec.specfit(guesses='moments')
spec.plotter.axis.set_xlim(-20, 75)
spec.specfit(guesses='moments', use_window_limits=True)
spec.specfit.parinfo
for ii in pl.get_fignums(): pl.close(ii)
import pylab as pl
for ii in pl.get_fignums(): pl.close(ii)
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('r')
get_ipython().magic('run simple_fit_interactive.py')
