# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import massmedia.fields
from django.conf import settings
import django.core.files.storage


class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('one_off_author', models.CharField(max_length=100, verbose_name='One-off Author', blank=True)),
                ('caption', models.TextField(verbose_name='Caption', blank=True)),
                ('metadata', massmedia.fields.SerializedObjectField(verbose_name='Metadata', blank=True)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name='we have reproduction rights for this media')),
                ('public', models.BooleanField(default=True, help_text='this media is publicly available', verbose_name='Public')),
                ('external_url', models.URLField(help_text='If this URL Field is set, the media will be pulled externally', null=True, verbose_name='External URL', blank=True)),
                ('mime_type', models.CharField(max_length=150, null=True, verbose_name='MIME type', blank=True)),
                ('width', models.IntegerField(help_text='The width of the widget for the media', null=True, verbose_name='Width', blank=True)),
                ('height', models.IntegerField(help_text='The height of the widget for the media', null=True, verbose_name='Height', blank=True)),
                ('widget_template', models.CharField(help_text='The template name used to generate the widget (defaults to MIME type layout)', max_length=255, null=True, verbose_name='Widget Template', blank=True)),
                ('file', models.FileField(storage=django.core.files.storage.FileSystemStorage(), null=True, upload_to=b'audio/%Y/%m/%d', blank=True)),
                ('author', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('site', models.ForeignKey(related_name='audio_site', to='sites.Site')),
            ],
            options={
                'verbose_name': 'audio clip',
                'verbose_name_plural': 'audio clips',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('caption', models.TextField(blank=True)),
                ('zip_file', models.FileField(help_text='Select a .zip file of media to upload into a the Collection.', upload_to=b'tmp', null=True, verbose_name='Media files in a .zip', blank=True)),
                ('external_url', models.URLField(help_text='Pull content from an external source. Supported: YouTube', blank=True)),
                ('public', models.BooleanField(default=True, help_text='this collection is publicly available')),
                ('site', models.ForeignKey(to='sites.Site')),
            ],
            options={
                'ordering': ['-creation_date'],
                'get_latest_by': 'creation_date',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CollectionRelation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('object_id', models.PositiveIntegerField()),
                ('position', models.PositiveSmallIntegerField(default=0, null=True, verbose_name='Position', blank=True)),
                ('collection', models.ForeignKey(to='massmedia.Collection')),
                ('content_type', models.ForeignKey(to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['position', 'id'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('one_off_author', models.CharField(max_length=100, verbose_name='One-off Author', blank=True)),
                ('caption', models.TextField(verbose_name='Caption', blank=True)),
                ('metadata', massmedia.fields.SerializedObjectField(verbose_name='Metadata', blank=True)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name='we have reproduction rights for this media')),
                ('public', models.BooleanField(default=True, help_text='this media is publicly available', verbose_name='Public')),
                ('external_url', models.URLField(help_text='If this URL Field is set, the media will be pulled externally', null=True, verbose_name='External URL', blank=True)),
                ('mime_type', models.CharField(max_length=150, null=True, verbose_name='MIME type', blank=True)),
                ('width', models.IntegerField(help_text='The width of the widget for the media', null=True, verbose_name='Width', blank=True)),
                ('height', models.IntegerField(help_text='The height of the widget for the media', null=True, verbose_name='Height', blank=True)),
                ('widget_template', models.CharField(help_text='The template name used to generate the widget (defaults to MIME type layout)', max_length=255, null=True, verbose_name='Widget Template', blank=True)),
                ('file', models.FileField(storage=django.core.files.storage.FileSystemStorage(), null=True, upload_to=b'misc/%Y/%m/%d', blank=True)),
                ('author', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('site', models.ForeignKey(related_name='document_site', to='sites.Site')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Embed',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('one_off_author', models.CharField(max_length=100, verbose_name='One-off Author', blank=True)),
                ('caption', models.TextField(verbose_name='Caption', blank=True)),
                ('metadata', massmedia.fields.SerializedObjectField(verbose_name='Metadata', blank=True)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name='we have reproduction rights for this media')),
                ('public', models.BooleanField(default=True, help_text='this media is publicly available', verbose_name='Public')),
                ('external_url', models.URLField(help_text='If this URL Field is set, the media will be pulled externally', null=True, verbose_name='External URL', blank=True)),
                ('mime_type', models.CharField(max_length=150, null=True, verbose_name='MIME type', blank=True)),
                ('width', models.IntegerField(help_text='The width of the widget for the media', null=True, verbose_name='Width', blank=True)),
                ('height', models.IntegerField(help_text='The height of the widget for the media', null=True, verbose_name='Height', blank=True)),
                ('widget_template', models.CharField(help_text='The template name used to generate the widget (defaults to MIME type layout)', max_length=255, null=True, verbose_name='Widget Template', blank=True)),
                ('code', models.TextField(help_text='Embed HTML source code', null=True, verbose_name='Embed Code', blank=True)),
                ('author', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('site', models.ForeignKey(related_name='embed_site', to='sites.Site')),
            ],
            options={
                'ordering': ('-creation_date',),
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Flash',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('one_off_author', models.CharField(max_length=100, verbose_name='One-off Author', blank=True)),
                ('caption', models.TextField(verbose_name='Caption', blank=True)),
                ('metadata', massmedia.fields.SerializedObjectField(verbose_name='Metadata', blank=True)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name='we have reproduction rights for this media')),
                ('public', models.BooleanField(default=True, help_text='this media is publicly available', verbose_name='Public')),
                ('external_url', models.URLField(help_text='If this URL Field is set, the media will be pulled externally', null=True, verbose_name='External URL', blank=True)),
                ('mime_type', models.CharField(max_length=150, null=True, verbose_name='MIME type', blank=True)),
                ('width', models.IntegerField(help_text='The width of the widget for the media', null=True, verbose_name='Width', blank=True)),
                ('height', models.IntegerField(help_text='The height of the widget for the media', null=True, verbose_name='Height', blank=True)),
                ('widget_template', models.CharField(help_text='The template name used to generate the widget (defaults to MIME type layout)', max_length=255, null=True, verbose_name='Widget Template', blank=True)),
                ('file', models.FileField(storage=django.core.files.storage.FileSystemStorage(), null=True, upload_to=b'flash/%Y/%m/%d', blank=True)),
                ('author', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('site', models.ForeignKey(related_name='flash_site', to='sites.Site')),
            ],
            options={
                'verbose_name': 'SWF File',
                'verbose_name_plural': 'SWF Files',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('one_off_author', models.CharField(max_length=100, verbose_name='One-off Author', blank=True)),
                ('caption', models.TextField(verbose_name='Caption', blank=True)),
                ('metadata', massmedia.fields.SerializedObjectField(verbose_name='Metadata', blank=True)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name='we have reproduction rights for this media')),
                ('public', models.BooleanField(default=True, help_text='this media is publicly available', verbose_name='Public')),
                ('external_url', models.URLField(help_text='If this URL Field is set, the media will be pulled externally', null=True, verbose_name='External URL', blank=True)),
                ('mime_type', models.CharField(max_length=150, null=True, verbose_name='MIME type', blank=True)),
                ('width', models.IntegerField(help_text='The width of the widget for the media', null=True, verbose_name='Width', blank=True)),
                ('height', models.IntegerField(help_text='The height of the widget for the media', null=True, verbose_name='Height', blank=True)),
                ('widget_template', models.CharField(help_text='The template name used to generate the widget (defaults to MIME type layout)', max_length=255, null=True, verbose_name='Widget Template', blank=True)),
                ('file', models.FileField(storage=django.core.files.storage.FileSystemStorage(), null=True, upload_to=b'image/%Y/%m/%d', blank=True)),
                ('thumbnail', models.ImageField(upload_to=b'thumb/%Y/%m/%d', width_field=b'thumb_width', storage=django.core.files.storage.FileSystemStorage(), height_field=b'thumb_height', blank=True, editable=False, null=True)),
                ('thumb_width', models.IntegerField(null=True, editable=False, blank=True)),
                ('thumb_height', models.IntegerField(null=True, editable=False, blank=True)),
                ('author', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('original', models.ForeignKey(related_name='variations', blank=True, to='massmedia.Image', null=True)),
                ('site', models.ForeignKey(related_name='image_site', to='sites.Site')),
            ],
            options={
                'ordering': ('-creation_date',),
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MediaTemplate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name', choices=[('detail', 'detail'), ('thumb', 'thumb')])),
                ('mimetype', models.CharField(max_length=255, null=True, verbose_name='MIME Type', blank=True)),
                ('content', models.TextField(verbose_name='Content')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('one_off_author', models.CharField(max_length=100, verbose_name='One-off Author', blank=True)),
                ('caption', models.TextField(verbose_name='Caption', blank=True)),
                ('metadata', massmedia.fields.SerializedObjectField(verbose_name='Metadata', blank=True)),
                ('reproduction_allowed', models.BooleanField(default=True, verbose_name='we have reproduction rights for this media')),
                ('public', models.BooleanField(default=True, help_text='this media is publicly available', verbose_name='Public')),
                ('external_url', models.URLField(help_text='If this URL Field is set, the media will be pulled externally', null=True, verbose_name='External URL', blank=True)),
                ('mime_type', models.CharField(max_length=150, null=True, verbose_name='MIME type', blank=True)),
                ('width', models.IntegerField(help_text='The width of the widget for the media', null=True, verbose_name='Width', blank=True)),
                ('height', models.IntegerField(help_text='The height of the widget for the media', null=True, verbose_name='Height', blank=True)),
                ('widget_template', models.CharField(help_text='The template name used to generate the widget (defaults to MIME type layout)', max_length=255, null=True, verbose_name='Widget Template', blank=True)),
                ('file', models.FileField(storage=django.core.files.storage.FileSystemStorage(), null=True, upload_to=b'video/%Y/%m/%d', blank=True)),
                ('author', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('site', models.ForeignKey(related_name='video_site', to='sites.Site')),
                ('thumbnail', models.ForeignKey(blank=True, to='massmedia.Image', null=True)),
            ],
            options={
                'ordering': ('-creation_date',),
                'abstract': False,
            },
            bases=(models.Model,),
        ),
    ]
