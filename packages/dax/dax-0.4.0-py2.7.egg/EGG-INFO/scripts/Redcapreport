#!/Users/boydb1/anaconda/bin/python
# -*- coding: utf-8 -*-

'''
Created on November 5, 2013

@author: Benjamin Yvernault, Electrical Engineering, Vanderbilt University
'''

import os,sys
import redcap

DEFAULT_API_URL='https://redcap.vanderbilt.edu/api/'

######################################################################################################
########################################## USEFUL FUNCTIONS ##########################################
######################################################################################################   
def read_txt(filepath):
    if filepath:
        print 'INFO: Export data from text file '+filepath+' ...'
        obj_list=list()
        if not os.path.exists(filepath):
            print '  error: '+filepath+' does not exist.'
            sys.exit()
        else:
            input_file = open(filepath,'r')
            for line in input_file:
                obj_list.append(line.strip().split('\n')[0])    
            input_file.close()
    else:
        obj_list=None
    return obj_list

def write_csv(csvfile,list_values):
    print 'INFO: Writing report ...'
    output_file = open(csvfile,'w')
    for line in list_values:
        output_file.write(line)
    output_file.close()
    
def get_option_list(option):
    if not option:
        return None
    elif option=='all':
        return 'all'
    elif option=='nan':
        return None
    else:
        return option.split(',')
    
########################################## SPECIFIC FUNCTIONS ##########################################
def print_lib(project):
    error=False
    all_forms=list()
    fnames,flabels=project.names_labels()
    for k in fnames:
        try:
            field = filter(lambda x: x['field_name'] == k, project.metadata)[0]
            all_forms.append(field['form_name'])
        except IndexError as e:
            print 'ERROR: IndexError when checking the libraries.'
            print e
            sys.exit()      
    
    #print the forms
    unique_forms = set(all_forms)
    print 'INFO: Printing REDCap libraries name'
    print '------------------------------------'
    for form in unique_forms:
        print form

def get_records(project_redcap,options):
    #variables:
    list_records=get_option_list(options.assessor)
    projects_list=get_option_list(options.project)
    subjects_list=get_option_list(options.subject)
    sessions_list=get_option_list(options.session)
    proctypes_list=get_option_list(options.proctype)
            
    if options.all:
        'INFO: Export ALL records from redcap project...'
        record_list = project_redcap.export_records(fields=[project_redcap.def_field])
        list_records=[r[project_redcap.def_field] for r in record_list]
    elif not list_records:
        list_records=list()
        print 'INFO: Export SPECIFIC records from redcap project...'
        rc_fields=['record_id','project_xnat','subject_xnat','experiment_xnat','process_name_xnat']
        rc_list = project_redcap.export_records(fields=rc_fields)
        #Filter:
        rc_list=filter(lambda x: isGoodRecord(x,projects_list,subjects_list,sessions_list,proctypes_list), rc_list)
        #Get list:
        list_records=[r['record_id'] for r in rc_list]
    return list_records
            
def isGoodRecord(obj_dict,projects_list,subjects_list,sessions_list,proctypes_list):
    if projects_list and obj_dict['project_xnat'] not in projects_list:
        return False
    if subjects_list and obj_dict['subject_xnat'] not in subjects_list:
        return False
    if sessions_list and obj_dict['experiment_xnat'] not in sessions_list:
        return False
    if proctypes_list and obj_dict['process_name_xnat'] not in proctypes_list:
        return False
    return True
    
def extract_redcap_data(project,m_records=None,m_fields=None,m_forms=None):
    if len(m_records)<100:
        print 'INFO: Export data from REDCap for the '+str(len(m_records))+' records that need to be download...'
        try:
            csv_string=project.export_records(records=m_records,forms=m_forms,fields=m_fields,format='csv')
            return True,csv_string
        except redcap.RedcapError as e:
            print 'ERROR from PyCap, see below: '
            print e
        except:
            print 'ERROR: Connection to REDCap stoped.'
            return False,''
    else:
        return chunked_export(project,m_records,forms=m_forms,fields=m_fields)

def chunks(l, n):
    """Yield successive n-sized chunks from list l"""
    for i in xrange(0, len(l), n):
        yield l[i:i+n]
            
def chunked_export(project,records,forms=None,fields=None,chunk_size=100):
    print 'INFO: Extracting data from REDCap 100 by 100 records for the '+str(len(records))+' records that need to be download...'
    try:
        response = []
        for index,record_chunk in enumerate(chunks(records, chunk_size)):
            print ' > index: '+str(index)+' x100'
            chunked_response = project.export_records(records=record_chunk,forms=forms,fields=fields,format='csv')
            response.extend(chunked_response)
    except RedcapError:
        msg = "Chunked export failed for chunk_size={:d}".format(chunk_size)
        raise ValueError(msg)
    else:
        return True,response
        
########################################## CHECK OPTIONS ##########################################                        
def check_options(options):
    if not options.key:
        print "OPTION ERROR: the API KEY "+options.key+" does not work. Please check the argument."
        return False
        
    if not options.lib and not options.names:
        if options.csvfile:
            if not os.path.exists(os.path.dirname(options.csvfile)):
                print "OPTION ERROR: the file "+options.csvfile+" does not exist."
                return False
            if options.csvfile.split('.')[-1]!='csv':
                print "OPTION ERROR: the file "+options.csvfile+" does not have the right extension. Please change it to '.csv' ."
                return False
        else:
            print "OPTION ERROR: You didn't provide a csv file path for the output. Please provide it with the options -c/--csvfile."
            return False
        
        if options.txtfile:
            if not os.path.exists(options.txtfile):
                print "OPTION ERROR: the file "+options.txtfile+" does not exist."
                return False
        
        if options.procfile:
            if not os.path.exists(options.procfile):
                print "OPTION ERROR: the file "+options.procfile+" does not exist."
                return False
    
    return True

########################################## MAIN DISPLAY FUNCTION ##########################################   
def Main_display(parser):
    (options,_)=parser.parse_args()
    print '################################################################'
    print '#                         REDCAPREPORT                         #'
    print '#                                                              #'
    print '# Developed by the MASI Lab Vanderbilt University, TN, USA.     #'
    print '# If issues, please start a thread here:                       #'
    print '# https://groups.google.com/forum/#!forum/vuiis-cci            #'
    print '# Usage:                                                       #'
    print '#     Generate REDCap report from a redcap project             #'
    print '#     (Need API key)                                           #'
    print '# Parameters :                                                 #'
    if options=={'procfile': None, 'lib': False, 'proctype': None,'project':None, 'all': False, 'csvfile': None, 'libraries': None, 'txtfile': None, 'session': None, 'names': False, 'key': None, 'assessor': None, 'subject': None}:
        print '#     No Arguments given                                       #'
        print '#     See the help bellow or Use "Redcapreport" -h             #'
        print '################################################################'
        parser.print_help()
        sys.exit()
    else:
        if options.names:
            print '#     %*s -> %*s#' %(-20,'Print field names/labels',-33,'on')
        elif options.lib:
            print '#     %*s -> %*s#' %(-20,'Print libraries names',-33,'on')
        else:
            if options.all:
                print '#     %*s -> %*s#' %(-20,'Records',-33,'all')
            if options.csvfile:
                print '#     %*s -> %*s#' %(-20,'OUPUT CSV File',-33,get_proper_str(options.csvfile,True))
            if options.txtfile:
                print '#     %*s -> %*s#' %(-20,'Records-field File',-33,get_proper_str(options.txtfile,True))
            if options.procfile:
                print '#     %*s -> %*s#' %(-20,'Records File',-33,get_proper_str(options.procfile,True))
            if options.project:
                print '#     %*s -> %*s#' %(-20,'Records-Project(s)',-33,get_proper_str(options.project))
            if options.subject:
                print '#     %*s -> %*s#' %(-20,'Records-Subject(s)',-33,get_proper_str(options.subject))
            if options.session:
                print '#     %*s -> %*s#' %(-20,'Records-Session(s)',-33,get_proper_str(options.session))
            if options.assessor:
                print '#     %*s -> %*s#' %(-20,'Records',-33,get_proper_str(options.assessor))
            if options.proctype:
                print '#     %*s -> %*s#' %(-20,'Records-Proctype(s)',-33,get_proper_str(options.proctype))
        print '################################################################'

def get_proper_str(str_option,end=False):
    if len(str_option)>32:
        if end:
            return '...'+str_option[-29:]
        else:
            return str_option[:29]+'...'
    else:
        return str_option
        
def get_usage():
    usage="usage: %prog [options] \n"
    usage+="What is the script doing : \n"
    usage+="   *Extract data from REDCap as a csv file.\n\n"
    #Example
    usage+="Examples:\n"
    usage+="   *Save the data in a csv file: Redcapreport -k KEY -c extract_redcap.csv \n"
    usage+="   *print the libraries name: Redcapreport -k KEY -L \n"
    usage+="   *print all fields name and label: Redcapreport -k KEY -F \n"
    usage+="   *Extract values for all record: Redcapreport -k KEY --all\n"
    usage+="   *Filter for specific project/subject/session/assessor type: Redcapreport -k KEY -p PID -s 109387 -e 109387_1,109387_2 -t FS,TRACULA_v1,dtiQA_v2\n"
    usage+="   *Extract for specific assessor: Redcapreport -k KEY -p PID -a PID-x-109387-x-109387_1-x-FS\n"
    usage+="   *Extract for specific libraries type: Redcapreport -k KEY -p PID -l library_name\n"
    usage+="   *Extract only the fields described in the txt file: Redcapreport -k KEY -x fields.txt\n"
    return usage

########################################## OPTIONS ##########################################
def parse_args():
    from optparse import OptionParser
    usage = get_usage()
    parser = OptionParser(usage=usage)
    parser.add_option("-k", "--key", dest="key",default=None,
                      help="API Token for REDCap project.", metavar="API_KEY")
    parser.add_option("-c", "--csvfile", dest="csvfile",default=None,
                      help="csv file path where the report will be save.", metavar="CSVFILEPATH")
    parser.add_option("-x", "--txtfile", dest="txtfile",default=None,
                      help="txt file path with each line one the name of the variable you want to extract the values.", metavar="TXTFILEPATH")
    parser.add_option("-p", "--project", dest="project",default=None,
                      help="Extract values for processes for the projects chosen. Warning: will be added to the subject or experiment or proctype. E.G: subject1,subject2", metavar="PROJECTS_XNAT")
    parser.add_option("-s", "--subject", dest="subject",default=None,
                      help="Extract values for processes for the subjects chosen. Warning: will be added to the project or experiment or proctype. E.G: subject1,subject2", metavar="SUBJECTS_XNAT")
    parser.add_option("-e", "--session", dest="session",default=None,
                      help="Extract values for processes for the sessions chosen. Warning: will be added to the project or subject or proctype. E.G: session1,session2", metavar="SESSIONS_XNAT")
    parser.add_option("-a", "--assessor", dest="assessor",default=None,
                      help="Extract values for processors chosen. E.G: processor1,processor2", metavar="PROCESSOR_XNAT")
    parser.add_option("-t", "--proctype", dest="proctype",default=None,
                      help="Extract values for processes types chosen. Warning: will be added to the subject or experiment. E.G: fMRIQA,dtiQA", metavar="PROCTYPE")
    parser.add_option("-f", "--procfile", dest="procfile",default=None,
                      help="file path with each line one processor label. Extract values for processes types chosen.", metavar="PROCFILE")
    parser.add_option("-l","--libraries",dest="libraries",default=None,
                      help="Extract values for only the libraries specify. Check the project for the libraries name. Switch spaces by '_' and everything lower case. E.G: dti_quality_assurance. By default: all libraries", metavar="")
    parser.add_option("-F","--fields",dest="names",action="store_true", default=False,
                      help="Print all field names and labels", metavar="")
    parser.add_option("-L","--printlib",dest="lib",action="store_true", default=False,
                      help="Print all libraries names for the project.", metavar="")
    parser.add_option("--all",dest="all",action="store_true", default=False,
                      help="Extract values for all records.", metavar="")
    return parser

###################################################################################################
########################################## MAIN FUNCTION ##########################################
###################################################################################################
if __name__ == '__main__':
    parser = parse_args()
    (options,args)=parser.parse_args()
    #############################
    #Main display:
    Main_display(parser)
    #check options:
    run=check_options(options)
    #############################
    
    #############################
    # RUN                       #
    #############################
    if run:
        #variables:
        Specific_fields=read_txt(options.txtfile)
        if options.libraries:
            list_forms=options.libraries.strip().replace(' ','_').lower().split(',')
        
        try:
            print 'INFO: Loading REDCap project...'
            rp = redcap.Project(DEFAULT_API_URL,options.key)
        except redcap.RedcapError:
            print 'ERROR: Connection to REDCap failed.'
            print 'INFO: Check the key passed with the argument -k/--key.'
            sys.exit()
        
        if options.names:
            fnames,flabels=rp.names_labels(True)
        elif options.lib:
            print_lib(rp)
        else:
            list_records=get_records(rp,options)
            worked,csv_string=extract_redcap_data(project=rp,m_records=list_records,m_fields=Specific_fields,m_forms=list_forms)    
            
            if not worked:
                print 'ERROR: No values to write. Failed extracting data from REDCap.'
            else:
                #write data
                write_csv(options.csvfile,csv_string)
        
        print '-------DONE-------'
    print '===================================================================\n'
