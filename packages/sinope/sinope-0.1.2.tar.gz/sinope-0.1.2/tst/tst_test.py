# Copyright (c) 2015, Simon D. Wilkinson
#
# This file is part of Sinope. (https://github.com/sw561/sinope)
#
# Sinope is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Sinope is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Sinope.  If not, see <http://www.gnu.org/licenses/>.
#
# --------------------------------------------------
#
from tst import *
import numpy as np
from scipy.linalg import toeplitz
from hypothesis import given
from hypothesis.strategies import lists, floats
import unittest

def tst_matrix(alpha,beta,n):
	"""Return TST matrix of size nxn with elements alpha,beta"""
	row = np.zeros(n)
	row[0:2] = [alpha, beta]
	a = toeplitz(row, row)
	return a

def abx_s(s):
	alpha = s[0]
	beta = s[1]
	x = np.array(s[2:])
	return (alpha, beta, x)

class ListComp(unittest.TestCase):
	"""
	Add a method for comparison of vectors of floating point numbers. Test
	classes can inherit from here
	"""
	def assertRelativeErrorSmall(self, a, b, tol):
		rel = abs(a-b)/(abs(a)+1)
		if rel>tol:
			print "Relative Error Large: ",a,b
			self.assertLess(rel,tol)

	def assertListAlmostEqual(self, list1, list2, tol):
		self.assertEqual(len(list1), len(list2))
		for a, b in zip(list1, list2):
			self.assertRelativeErrorSmall(a, b, pow(10,-tol))

max_value=1000
max_size=18

# A decorator from the hypothesis package, it generates random data for the
# test methods. When the decorator is applied to a method, the method is called
# with an argument generated by hypothesis
hypo_decorator = given(lists(floats(min_value=-max_value, max_value=max_value),
                 min_size=4,
                 max_size=max_size
                )
            )
class TestTST(ListComp):
	@hypo_decorator
	def test_TSTmultiply(self, s):
		(alpha, beta, x) = abx_s(s)

		y1 = py_TSTmultiply(alpha, beta, x)
		y2 = np.dot(tst_matrix(alpha, beta, len(x)), x)

		self.assertListAlmostEqual(y1, y2, 5)

	@hypo_decorator
	def test_cTSTmultiply(self, s):
		(alpha, beta, x) = abx_s(s)

		y1 = TSTmultiply(alpha, beta, x)
		y2 = py_TSTmultiply(alpha, beta, x)

		self.assertListAlmostEqual(y1, y2, 5)

	@hypo_decorator
	def test_cTSTmultiply_plus(self, s):
		(alpha, beta, x) = abx_s(s)
		b = np.random.random(len(x))

		y1 = TSTmultiply_plus(alpha, beta, x, b)
		y2 = py_TSTmultiply(alpha, beta, x) + b

		self.assertListAlmostEqual(y1, y2, 5)

	@hypo_decorator
	def test_cTSTmultiply_plus_coeff(self, s):
		(alpha, beta, x) = abx_s(s)
		b = np.random.random(len(x))
		c = np.random.random()

		y1 = TSTmultiply_plus_coeff(alpha, beta, c, x, b)
		y2 = py_TSTmultiply(alpha, beta, x) + c*b

		self.assertListAlmostEqual(y1, y2, 5)

if __name__=="__main__":
	unittest.main()
